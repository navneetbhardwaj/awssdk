<?php

/**
 * SupplySourcesApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources.
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\supplySources\v2020_07_01;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceRequest;
use SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse;
use SpApi\Model\supplySources\v2020_07_01\ErrorList;
use SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse;
use SpApi\Model\supplySources\v2020_07_01\SupplySource;
use SpApi\Model\supplySources\v2020_07_01\UpdateSupplySourceRequest;
use SpApi\Model\supplySources\v2020_07_01\UpdateSupplySourceStatusRequest;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * SupplySourcesApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class SupplySourcesApi
{
    public ?LimiterInterface $archiveSupplySourceRateLimiter;
    public ?LimiterInterface $createSupplySourceRateLimiter;
    public ?LimiterInterface $getSupplySourceRateLimiter;
    public ?LimiterInterface $getSupplySourcesRateLimiter;
    public ?LimiterInterface $updateSupplySourceRateLimiter;
    public ?LimiterInterface $updateSupplySourceStatusRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-archiveSupplySource'), $this->rateLimitStorage);
            $this->archiveSupplySourceRateLimiter = $factory->create('SupplySourcesApi-archiveSupplySource');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-createSupplySource'), $this->rateLimitStorage);
            $this->createSupplySourceRateLimiter = $factory->create('SupplySourcesApi-createSupplySource');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-getSupplySource'), $this->rateLimitStorage);
            $this->getSupplySourceRateLimiter = $factory->create('SupplySourcesApi-getSupplySource');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-getSupplySources'), $this->rateLimitStorage);
            $this->getSupplySourcesRateLimiter = $factory->create('SupplySourcesApi-getSupplySources');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-updateSupplySource'), $this->rateLimitStorage);
            $this->updateSupplySourceRateLimiter = $factory->create('SupplySourcesApi-updateSupplySource');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('SupplySourcesApi-updateSupplySourceStatus'), $this->rateLimitStorage);
            $this->updateSupplySourceStatusRateLimiter = $factory->create('SupplySourcesApi-updateSupplySourceStatus');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation archiveSupplySource.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function archiveSupplySource(
        string $supply_source_id
    ): ErrorList {
        list($response) = $this->archiveSupplySourceWithHttpInfo($supply_source_id);

        return $response;
    }

    /**
     * Operation archiveSupplySourceWithHttpInfo.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\ErrorList, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function archiveSupplySourceWithHttpInfo(
        string $supply_source_id
    ): array {
        $request = $this->archiveSupplySourceRequest($supply_source_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->archiveSupplySourceRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\ErrorList', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation archiveSupplySourceAsync.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function archiveSupplySourceAsync(
        string $supply_source_id
    ): PromiseInterface {
        return $this->archiveSupplySourceAsyncWithHttpInfo($supply_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation archiveSupplySourceAsyncWithHttpInfo.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function archiveSupplySourceAsyncWithHttpInfo(
        string $supply_source_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\ErrorList';
        $request = $this->archiveSupplySourceRequest($supply_source_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->archiveSupplySourceRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'archiveSupplySource'.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function archiveSupplySourceRequest(
        string $supply_source_id
    ): Request {
        // verify the required parameter 'supply_source_id' is set
        if (null === $supply_source_id || (is_array($supply_source_id) && 0 === count($supply_source_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling archiveSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $supply_source_id) {
            $resourcePath = str_replace(
                '{supplySourceId}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSupplySource.
     *
     * @param CreateSupplySourceRequest $payload
     *                                           A request to create a supply source. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createSupplySource(
        CreateSupplySourceRequest $payload
    ): CreateSupplySourceResponse {
        list($response) = $this->createSupplySourceWithHttpInfo($payload);

        return $response;
    }

    /**
     * Operation createSupplySourceWithHttpInfo.
     *
     * @param CreateSupplySourceRequest $payload
     *                                           A request to create a supply source. (required)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createSupplySourceWithHttpInfo(
        CreateSupplySourceRequest $payload
    ): array {
        $request = $this->createSupplySourceRequest($payload);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createSupplySourceRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createSupplySourceAsync.
     *
     * @param CreateSupplySourceRequest $payload
     *                                           A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createSupplySourceAsync(
        CreateSupplySourceRequest $payload
    ): PromiseInterface {
        return $this->createSupplySourceAsyncWithHttpInfo($payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createSupplySourceAsyncWithHttpInfo.
     *
     * @param CreateSupplySourceRequest $payload
     *                                           A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createSupplySourceAsyncWithHttpInfo(
        CreateSupplySourceRequest $payload
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\CreateSupplySourceResponse';
        $request = $this->createSupplySourceRequest($payload);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createSupplySourceRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createSupplySource'.
     *
     * @param CreateSupplySourceRequest $payload
     *                                           A request to create a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createSupplySourceRequest(
        CreateSupplySourceRequest $payload
    ): Request {
        // verify the required parameter 'payload' is set
        if (null === $payload || (is_array($payload) && 0 === count($payload))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling createSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySource.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSupplySource(
        string $supply_source_id
    ): SupplySource {
        list($response) = $this->getSupplySourceWithHttpInfo($supply_source_id);

        return $response;
    }

    /**
     * Operation getSupplySourceWithHttpInfo.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\SupplySource, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSupplySourceWithHttpInfo(
        string $supply_source_id
    ): array {
        $request = $this->getSupplySourceRequest($supply_source_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getSupplySourceRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\SupplySource' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\SupplySource' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\SupplySource', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getSupplySourceAsync.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourceAsync(
        string $supply_source_id
    ): PromiseInterface {
        return $this->getSupplySourceAsyncWithHttpInfo($supply_source_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getSupplySourceAsyncWithHttpInfo.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourceAsyncWithHttpInfo(
        string $supply_source_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\SupplySource';
        $request = $this->getSupplySourceRequest($supply_source_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getSupplySourceRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getSupplySource'.
     *
     * @param string $supply_source_id
     *                                 The unique identifier of a supply source. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourceRequest(
        string $supply_source_id
    ): Request {
        // verify the required parameter 'supply_source_id' is set
        if (null === $supply_source_id || (is_array($supply_source_id) && 0 === count($supply_source_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling getSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $supply_source_id) {
            $resourcePath = str_replace(
                '{supplySourceId}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSupplySources.
     *
     * @param null|string $next_page_token
     *                                     The pagination token to retrieve a specific page of results. (optional)
     * @param null|float  $page_size
     *                                     The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSupplySources(
        ?string $next_page_token = null,
        ?float $page_size = 10.0
    ): GetSupplySourcesResponse {
        list($response) = $this->getSupplySourcesWithHttpInfo($next_page_token, $page_size);

        return $response;
    }

    /**
     * Operation getSupplySourcesWithHttpInfo.
     *
     * @param null|string $next_page_token
     *                                     The pagination token to retrieve a specific page of results. (optional)
     * @param null|float  $page_size
     *                                     The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getSupplySourcesWithHttpInfo(
        ?string $next_page_token = null,
        ?float $page_size = 10.0
    ): array {
        $request = $this->getSupplySourcesRequest($next_page_token, $page_size);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getSupplySourcesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getSupplySourcesAsync.
     *
     * @param null|string $next_page_token
     *                                     The pagination token to retrieve a specific page of results. (optional)
     * @param null|float  $page_size
     *                                     The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourcesAsync(
        ?string $next_page_token = null,
        ?float $page_size = 10.0
    ): PromiseInterface {
        return $this->getSupplySourcesAsyncWithHttpInfo($next_page_token, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getSupplySourcesAsyncWithHttpInfo.
     *
     * @param null|string $next_page_token
     *                                     The pagination token to retrieve a specific page of results. (optional)
     * @param null|float  $page_size
     *                                     The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourcesAsyncWithHttpInfo(
        ?string $next_page_token = null,
        ?float $page_size = 10.0
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\GetSupplySourcesResponse';
        $request = $this->getSupplySourcesRequest($next_page_token, $page_size);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getSupplySourcesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getSupplySources'.
     *
     * @param null|string $next_page_token
     *                                     The pagination token to retrieve a specific page of results. (optional)
     * @param null|float  $page_size
     *                                     The number of supply sources to return per paginated request. (optional, default to 10.0)
     *
     * @throws \InvalidArgumentException
     */
    public function getSupplySourcesRequest(
        ?string $next_page_token = null,
        ?float $page_size = 10.0
    ): Request {
        $resourcePath = '/supplySources/2020-07-01/supplySources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_page_token,
            'nextPageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySource.
     *
     * @param string                         $supply_source_id
     *                                                         The unique identitier of a supply source. (required)
     * @param null|UpdateSupplySourceRequest $payload
     *                                                         payload (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSupplySource(
        string $supply_source_id,
        ?UpdateSupplySourceRequest $payload = null
    ): ErrorList {
        list($response) = $this->updateSupplySourceWithHttpInfo($supply_source_id, $payload);

        return $response;
    }

    /**
     * Operation updateSupplySourceWithHttpInfo.
     *
     * @param string                         $supply_source_id
     *                                                         The unique identitier of a supply source. (required)
     * @param null|UpdateSupplySourceRequest $payload
     *                                                         (optional)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\ErrorList, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceWithHttpInfo(
        string $supply_source_id,
        ?UpdateSupplySourceRequest $payload = null
    ): array {
        $request = $this->updateSupplySourceRequest($supply_source_id, $payload);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->updateSupplySourceRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\ErrorList', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceAsync.
     *
     * @param string                         $supply_source_id
     *                                                         The unique identitier of a supply source. (required)
     * @param null|UpdateSupplySourceRequest $payload
     *                                                         (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceAsync(
        string $supply_source_id,
        ?UpdateSupplySourceRequest $payload = null
    ): PromiseInterface {
        return $this->updateSupplySourceAsyncWithHttpInfo($supply_source_id, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation updateSupplySourceAsyncWithHttpInfo.
     *
     * @param string                         $supply_source_id
     *                                                         The unique identitier of a supply source. (required)
     * @param null|UpdateSupplySourceRequest $payload
     *                                                         (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceAsyncWithHttpInfo(
        string $supply_source_id,
        ?UpdateSupplySourceRequest $payload = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\ErrorList';
        $request = $this->updateSupplySourceRequest($supply_source_id, $payload);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->updateSupplySourceRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'updateSupplySource'.
     *
     * @param string                         $supply_source_id
     *                                                         The unique identitier of a supply source. (required)
     * @param null|UpdateSupplySourceRequest $payload
     *                                                         (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceRequest(
        string $supply_source_id,
        ?UpdateSupplySourceRequest $payload = null
    ): Request {
        // verify the required parameter 'supply_source_id' is set
        if (null === $supply_source_id || (is_array($supply_source_id) && 0 === count($supply_source_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling updateSupplySource'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $supply_source_id) {
            $resourcePath = str_replace(
                '{supplySourceId}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSupplySourceStatus.
     *
     * @param string                               $supply_source_id
     *                                                               The unique identifier of a supply source. (required)
     * @param null|UpdateSupplySourceStatusRequest $payload
     *                                                               payload (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceStatus(
        string $supply_source_id,
        ?UpdateSupplySourceStatusRequest $payload = null
    ): ErrorList {
        list($response) = $this->updateSupplySourceStatusWithHttpInfo($supply_source_id, $payload);

        return $response;
    }

    /**
     * Operation updateSupplySourceStatusWithHttpInfo.
     *
     * @param string                               $supply_source_id
     *                                                               The unique identifier of a supply source. (required)
     * @param null|UpdateSupplySourceStatusRequest $payload
     *                                                               (optional)
     *
     * @return array of \SpApi\Model\supplySources\v2020_07_01\ErrorList, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceStatusWithHttpInfo(
        string $supply_source_id,
        ?UpdateSupplySourceStatusRequest $payload = null
    ): array {
        $request = $this->updateSupplySourceStatusRequest($supply_source_id, $payload);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->updateSupplySourceStatusRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\supplySources\v2020_07_01\ErrorList' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\supplySources\v2020_07_01\ErrorList', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\supplySources\v2020_07_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation updateSupplySourceStatusAsync.
     *
     * @param string                               $supply_source_id
     *                                                               The unique identifier of a supply source. (required)
     * @param null|UpdateSupplySourceStatusRequest $payload
     *                                                               (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceStatusAsync(
        string $supply_source_id,
        ?UpdateSupplySourceStatusRequest $payload = null
    ): PromiseInterface {
        return $this->updateSupplySourceStatusAsyncWithHttpInfo($supply_source_id, $payload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation updateSupplySourceStatusAsyncWithHttpInfo.
     *
     * @param string                               $supply_source_id
     *                                                               The unique identifier of a supply source. (required)
     * @param null|UpdateSupplySourceStatusRequest $payload
     *                                                               (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceStatusAsyncWithHttpInfo(
        string $supply_source_id,
        ?UpdateSupplySourceStatusRequest $payload = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\supplySources\v2020_07_01\ErrorList';
        $request = $this->updateSupplySourceStatusRequest($supply_source_id, $payload);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->updateSupplySourceStatusRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'updateSupplySourceStatus'.
     *
     * @param string                               $supply_source_id
     *                                                               The unique identifier of a supply source. (required)
     * @param null|UpdateSupplySourceStatusRequest $payload
     *                                                               (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function updateSupplySourceStatusRequest(
        string $supply_source_id,
        ?UpdateSupplySourceStatusRequest $payload = null
    ): Request {
        // verify the required parameter 'supply_source_id' is set
        if (null === $supply_source_id || (is_array($supply_source_id) && 0 === count($supply_source_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supply_source_id when calling updateSupplySourceStatus'
            );
        }

        $resourcePath = '/supplySources/2020-07-01/supplySources/{supplySourceId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $supply_source_id) {
            $resourcePath = str_replace(
                '{supplySourceId}',
                ObjectSerializer::toPathValue($supply_source_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
