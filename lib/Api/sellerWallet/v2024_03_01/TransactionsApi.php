<?php

/**
 * TransactionsApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API.
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\sellerWallet\v2024_03_01;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\sellerWallet\v2024_03_01\Transaction;
use SpApi\Model\sellerWallet\v2024_03_01\TransactionInitiationRequest;
use SpApi\Model\sellerWallet\v2024_03_01\TransactionListing;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * TransactionsApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class TransactionsApi
{
    public ?LimiterInterface $createTransactionRateLimiter;
    public ?LimiterInterface $getTransactionRateLimiter;
    public ?LimiterInterface $listAccountTransactionsRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('TransactionsApi-createTransaction'), $this->rateLimitStorage);
            $this->createTransactionRateLimiter = $factory->create('TransactionsApi-createTransaction');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('TransactionsApi-getTransaction'), $this->rateLimitStorage);
            $this->getTransactionRateLimiter = $factory->create('TransactionsApi-getTransaction');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('TransactionsApi-listAccountTransactions'), $this->rateLimitStorage);
            $this->listAccountTransactionsRateLimiter = $factory->create('TransactionsApi-listAccountTransactions');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createTransaction.
     *
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param string                       $dest_account_digital_signature
     *                                                                     Digital signature for the destination bank account details. (required)
     * @param string                       $amount_digital_signature
     *                                                                     Digital signature for the source currency transaction amount. (required)
     * @param TransactionInitiationRequest $body
     *                                                                     The payload of the request (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createTransaction(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        TransactionInitiationRequest $body
    ): Transaction {
        list($response) = $this->createTransactionWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body);

        return $response;
    }

    /**
     * Operation createTransactionWithHttpInfo.
     *
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param string                       $dest_account_digital_signature
     *                                                                     Digital signature for the destination bank account details. (required)
     * @param string                       $amount_digital_signature
     *                                                                     Digital signature for the source currency transaction amount. (required)
     * @param TransactionInitiationRequest $body
     *                                                                     The payload of the request (required)
     *
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\Transaction, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createTransactionWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        TransactionInitiationRequest $body
    ): array {
        $request = $this->createTransactionRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createTransactionRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\sellerWallet\v2024_03_01\Transaction' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\sellerWallet\v2024_03_01\Transaction' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\Transaction', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createTransactionAsync.
     *
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param string                       $dest_account_digital_signature
     *                                                                     Digital signature for the destination bank account details. (required)
     * @param string                       $amount_digital_signature
     *                                                                     Digital signature for the source currency transaction amount. (required)
     * @param TransactionInitiationRequest $body
     *                                                                     The payload of the request (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createTransactionAsync(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        TransactionInitiationRequest $body
    ): PromiseInterface {
        return $this->createTransactionAsyncWithHttpInfo($dest_account_digital_signature, $amount_digital_signature, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createTransactionAsyncWithHttpInfo.
     *
     * Create a transaction request from Amazon Seller Wallet account to another customer-provided account
     *
     * @param string                       $dest_account_digital_signature
     *                                                                     Digital signature for the destination bank account details. (required)
     * @param string                       $amount_digital_signature
     *                                                                     Digital signature for the source currency transaction amount. (required)
     * @param TransactionInitiationRequest $body
     *                                                                     The payload of the request (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createTransactionAsyncWithHttpInfo(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        TransactionInitiationRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\Transaction';
        $request = $this->createTransactionRequest($dest_account_digital_signature, $amount_digital_signature, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createTransactionRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createTransaction'.
     *
     * @param string                       $dest_account_digital_signature
     *                                                                     Digital signature for the destination bank account details. (required)
     * @param string                       $amount_digital_signature
     *                                                                     Digital signature for the source currency transaction amount. (required)
     * @param TransactionInitiationRequest $body
     *                                                                     The payload of the request (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createTransactionRequest(
        string $dest_account_digital_signature,
        string $amount_digital_signature,
        TransactionInitiationRequest $body
    ): Request {
        // verify the required parameter 'dest_account_digital_signature' is set
        if (null === $dest_account_digital_signature || (is_array($dest_account_digital_signature) && 0 === count($dest_account_digital_signature))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dest_account_digital_signature when calling createTransaction'
            );
        }
        // verify the required parameter 'amount_digital_signature' is set
        if (null === $amount_digital_signature || (is_array($amount_digital_signature) && 0 === count($amount_digital_signature))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amount_digital_signature when calling createTransaction'
            );
        }
        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTransaction'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $dest_account_digital_signature) {
            $headerParams['destAccountDigitalSignature'] = ObjectSerializer::toHeaderValue($dest_account_digital_signature);
        }
        // header params
        if (null !== $amount_digital_signature) {
            $headerParams['amountDigitalSignature'] = ObjectSerializer::toHeaderValue($amount_digital_signature);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransaction.
     *
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     *
     * @param string $transaction_id
     *                               The ID of the Amazon Seller Wallet transaction. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getTransaction(
        string $transaction_id
    ): Transaction {
        list($response) = $this->getTransactionWithHttpInfo($transaction_id);

        return $response;
    }

    /**
     * Operation getTransactionWithHttpInfo.
     *
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     *
     * @param string $transaction_id
     *                               The ID of the Amazon Seller Wallet transaction. (required)
     *
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\Transaction, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getTransactionWithHttpInfo(
        string $transaction_id
    ): array {
        $request = $this->getTransactionRequest($transaction_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getTransactionRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\sellerWallet\v2024_03_01\Transaction' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\sellerWallet\v2024_03_01\Transaction' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\Transaction', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getTransactionAsync.
     *
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     *
     * @param string $transaction_id
     *                               The ID of the Amazon Seller Wallet transaction. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getTransactionAsync(
        string $transaction_id
    ): PromiseInterface {
        return $this->getTransactionAsyncWithHttpInfo($transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getTransactionAsyncWithHttpInfo.
     *
     * Find particular Amazon Seller Wallet account transaction by Amazon transaction identifier
     *
     * @param string $transaction_id
     *                               The ID of the Amazon Seller Wallet transaction. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getTransactionAsyncWithHttpInfo(
        string $transaction_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\Transaction';
        $request = $this->getTransactionRequest($transaction_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getTransactionRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getTransaction'.
     *
     * @param string $transaction_id
     *                               The ID of the Amazon Seller Wallet transaction. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getTransactionRequest(
        string $transaction_id
    ): Request {
        // verify the required parameter 'transaction_id' is set
        if (null === $transaction_id || (is_array($transaction_id) && 0 === count($transaction_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getTransaction'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $transaction_id) {
            $resourcePath = str_replace(
                '{transactionId}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAccountTransactions.
     *
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     *
     * @param string      $account_id
     *                                     The ID of the Amazon Seller Wallet account. (required)
     * @param null|string $next_page_token
     *                                     A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listAccountTransactions(
        string $account_id,
        ?string $next_page_token = null
    ): TransactionListing {
        list($response) = $this->listAccountTransactionsWithHttpInfo($account_id, $next_page_token);

        return $response;
    }

    /**
     * Operation listAccountTransactionsWithHttpInfo.
     *
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     *
     * @param string      $account_id
     *                                     The ID of the Amazon Seller Wallet account. (required)
     * @param null|string $next_page_token
     *                                     A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @return array of \SpApi\Model\sellerWallet\v2024_03_01\TransactionListing, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function listAccountTransactionsWithHttpInfo(
        string $account_id,
        ?string $next_page_token = null
    ): array {
        $request = $this->listAccountTransactionsRequest($account_id, $next_page_token);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->listAccountTransactionsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\sellerWallet\v2024_03_01\TransactionListing' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\sellerWallet\v2024_03_01\TransactionListing' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\sellerWallet\v2024_03_01\TransactionListing', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\sellerWallet\v2024_03_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation listAccountTransactionsAsync.
     *
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     *
     * @param string      $account_id
     *                                     The ID of the Amazon Seller Wallet account. (required)
     * @param null|string $next_page_token
     *                                     A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listAccountTransactionsAsync(
        string $account_id,
        ?string $next_page_token = null
    ): PromiseInterface {
        return $this->listAccountTransactionsAsyncWithHttpInfo($account_id, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation listAccountTransactionsAsyncWithHttpInfo.
     *
     * The API will return all the transactions for a given Amazon Seller Wallet account sorted by the transaction request date
     *
     * @param string      $account_id
     *                                     The ID of the Amazon Seller Wallet account. (required)
     * @param null|string $next_page_token
     *                                     A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listAccountTransactionsAsyncWithHttpInfo(
        string $account_id,
        ?string $next_page_token = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\sellerWallet\v2024_03_01\TransactionListing';
        $request = $this->listAccountTransactionsRequest($account_id, $next_page_token);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->listAccountTransactionsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'listAccountTransactions'.
     *
     * @param string      $account_id
     *                                     The ID of the Amazon Seller Wallet account. (required)
     * @param null|string $next_page_token
     *                                     A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function listAccountTransactionsRequest(
        string $account_id,
        ?string $next_page_token = null
    ): Request {
        // verify the required parameter 'account_id' is set
        if (null === $account_id || (is_array($account_id) && 0 === count($account_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listAccountTransactions'
            );
        }

        $resourcePath = '/finances/transfers/wallet/2024-03-01/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_id,
            'accountId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_page_token,
            'nextPageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
