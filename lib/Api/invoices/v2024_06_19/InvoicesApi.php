<?php

/**
 * InvoicesApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\invoices\v2024_06_19;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\invoices\v2024_06_19\ExportInvoicesRequest;
use SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse;
use SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * InvoicesApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class InvoicesApi
{
    public ?LimiterInterface $createInvoicesExportRateLimiter;
    public ?LimiterInterface $getInvoiceRateLimiter;
    public ?LimiterInterface $getInvoicesRateLimiter;
    public ?LimiterInterface $getInvoicesAttributesRateLimiter;
    public ?LimiterInterface $getInvoicesDocumentRateLimiter;
    public ?LimiterInterface $getInvoicesExportRateLimiter;
    public ?LimiterInterface $getInvoicesExportsRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-createInvoicesExport'), $this->rateLimitStorage);
            $this->createInvoicesExportRateLimiter = $factory->create('InvoicesApi-createInvoicesExport');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoice'), $this->rateLimitStorage);
            $this->getInvoiceRateLimiter = $factory->create('InvoicesApi-getInvoice');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoices'), $this->rateLimitStorage);
            $this->getInvoicesRateLimiter = $factory->create('InvoicesApi-getInvoices');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoicesAttributes'), $this->rateLimitStorage);
            $this->getInvoicesAttributesRateLimiter = $factory->create('InvoicesApi-getInvoicesAttributes');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoicesDocument'), $this->rateLimitStorage);
            $this->getInvoicesDocumentRateLimiter = $factory->create('InvoicesApi-getInvoicesDocument');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoicesExport'), $this->rateLimitStorage);
            $this->getInvoicesExportRateLimiter = $factory->create('InvoicesApi-getInvoicesExport');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('InvoicesApi-getInvoicesExports'), $this->rateLimitStorage);
            $this->getInvoicesExportsRateLimiter = $factory->create('InvoicesApi-getInvoicesExports');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createInvoicesExport.
     *
     * @param ExportInvoicesRequest $body
     *                                    Information required to create the export request. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createInvoicesExport(
        ExportInvoicesRequest $body
    ): ExportInvoicesResponse {
        list($response) = $this->createInvoicesExportWithHttpInfo($body);

        return $response;
    }

    /**
     * Operation createInvoicesExportWithHttpInfo.
     *
     * @param ExportInvoicesRequest $body
     *                                    Information required to create the export request. (required)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createInvoicesExportWithHttpInfo(
        ExportInvoicesRequest $body
    ): array {
        $request = $this->createInvoicesExportRequest($body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createInvoicesExportRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createInvoicesExportAsync.
     *
     * @param ExportInvoicesRequest $body
     *                                    Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInvoicesExportAsync(
        ExportInvoicesRequest $body
    ): PromiseInterface {
        return $this->createInvoicesExportAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createInvoicesExportAsyncWithHttpInfo.
     *
     * @param ExportInvoicesRequest $body
     *                                    Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInvoicesExportAsyncWithHttpInfo(
        ExportInvoicesRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\ExportInvoicesResponse';
        $request = $this->createInvoicesExportRequest($body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createInvoicesExportRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createInvoicesExport'.
     *
     * @param ExportInvoicesRequest $body
     *                                    Information required to create the export request. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInvoicesExportRequest(
        ExportInvoicesRequest $body
    ): Request {
        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInvoicesExport'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoice.
     *
     * @param string $marketplace_id
     *                               The marketplace from which you want the invoice. (required)
     * @param string $invoice_id
     *                               The invoice identifier. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoice(
        string $marketplace_id,
        string $invoice_id
    ): GetInvoiceResponse {
        list($response) = $this->getInvoiceWithHttpInfo($marketplace_id, $invoice_id);

        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo.
     *
     * @param string $marketplace_id
     *                               The marketplace from which you want the invoice. (required)
     * @param string $invoice_id
     *                               The invoice identifier. (required)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoiceWithHttpInfo(
        string $marketplace_id,
        string $invoice_id
    ): array {
        $request = $this->getInvoiceRequest($marketplace_id, $invoice_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoiceRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoiceAsync.
     *
     * @param string $marketplace_id
     *                               The marketplace from which you want the invoice. (required)
     * @param string $invoice_id
     *                               The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoiceAsync(
        string $marketplace_id,
        string $invoice_id
    ): PromiseInterface {
        return $this->getInvoiceAsyncWithHttpInfo($marketplace_id, $invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoiceAsyncWithHttpInfo.
     *
     * @param string $marketplace_id
     *                               The marketplace from which you want the invoice. (required)
     * @param string $invoice_id
     *                               The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoiceAsyncWithHttpInfo(
        string $marketplace_id,
        string $invoice_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoiceResponse';
        $request = $this->getInvoiceRequest($marketplace_id, $invoice_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoiceRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoice'.
     *
     * @param string $marketplace_id
     *                               The marketplace from which you want the invoice. (required)
     * @param string $invoice_id
     *                               The invoice identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoiceRequest(
        string $marketplace_id,
        string $invoice_id
    ): Request {
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getInvoice'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if (null === $invoice_id || (is_array($invoice_id) && 0 === count($invoice_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling getInvoice'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $invoice_id) {
            $resourcePath = str_replace(
                '{invoiceId}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoices.
     *
     * @param string         $marketplace_id
     *                                                    The response includes only the invoices that match the specified marketplace. (required)
     * @param null|string    $transaction_identifier_name
     *                                                    The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param null|int       $page_size
     *                                                    The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param null|\DateTime $date_end
     *                                                    The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param null|string    $transaction_type
     *                                                    The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param null|string    $transaction_identifier_id
     *                                                    The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param null|\DateTime $date_start
     *                                                    The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param null|string    $series
     *                                                    Return invoices with the specified series number. (optional)
     * @param null|string    $next_token
     *                                                    The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string    $sort_order
     *                                                    Sort the invoices in the response in ascending or descending order. (optional)
     * @param null|string    $invoice_type
     *                                                    The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param null|string[]  $statuses
     *                                                    A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param null|string    $external_invoice_id
     *                                                    Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param null|string    $sort_by
     *                                                    The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoices(
        string $marketplace_id,
        ?string $transaction_identifier_name = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $transaction_type = null,
        ?string $transaction_identifier_id = null,
        ?\DateTime $date_start = null,
        ?string $series = null,
        ?string $next_token = null,
        ?string $sort_order = null,
        ?string $invoice_type = null,
        ?array $statuses = null,
        ?string $external_invoice_id = null,
        ?string $sort_by = null
    ): GetInvoicesResponse {
        list($response) = $this->getInvoicesWithHttpInfo($marketplace_id, $transaction_identifier_name, $page_size, $date_end, $transaction_type, $transaction_identifier_id, $date_start, $series, $next_token, $sort_order, $invoice_type, $statuses, $external_invoice_id, $sort_by);

        return $response;
    }

    /**
     * Operation getInvoicesWithHttpInfo.
     *
     * @param string         $marketplace_id
     *                                                    The response includes only the invoices that match the specified marketplace. (required)
     * @param null|string    $transaction_identifier_name
     *                                                    The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param null|int       $page_size
     *                                                    The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param null|\DateTime $date_end
     *                                                    The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param null|string    $transaction_type
     *                                                    The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param null|string    $transaction_identifier_id
     *                                                    The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param null|\DateTime $date_start
     *                                                    The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param null|string    $series
     *                                                    Return invoices with the specified series number. (optional)
     * @param null|string    $next_token
     *                                                    The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string    $sort_order
     *                                                    Sort the invoices in the response in ascending or descending order. (optional)
     * @param null|string    $invoice_type
     *                                                    The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param null|string[]  $statuses
     *                                                    A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param null|string    $external_invoice_id
     *                                                    Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param null|string    $sort_by
     *                                                    The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesWithHttpInfo(
        string $marketplace_id,
        ?string $transaction_identifier_name = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $transaction_type = null,
        ?string $transaction_identifier_id = null,
        ?\DateTime $date_start = null,
        ?string $series = null,
        ?string $next_token = null,
        ?string $sort_order = null,
        ?string $invoice_type = null,
        ?array $statuses = null,
        ?string $external_invoice_id = null,
        ?string $sort_by = null
    ): array {
        $request = $this->getInvoicesRequest($marketplace_id, $transaction_identifier_name, $page_size, $date_end, $transaction_type, $transaction_identifier_id, $date_start, $series, $next_token, $sort_order, $invoice_type, $statuses, $external_invoice_id, $sort_by);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoicesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoicesAsync.
     *
     * @param string         $marketplace_id
     *                                                    The response includes only the invoices that match the specified marketplace. (required)
     * @param null|string    $transaction_identifier_name
     *                                                    The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param null|int       $page_size
     *                                                    The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param null|\DateTime $date_end
     *                                                    The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param null|string    $transaction_type
     *                                                    The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param null|string    $transaction_identifier_id
     *                                                    The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param null|\DateTime $date_start
     *                                                    The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param null|string    $series
     *                                                    Return invoices with the specified series number. (optional)
     * @param null|string    $next_token
     *                                                    The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string    $sort_order
     *                                                    Sort the invoices in the response in ascending or descending order. (optional)
     * @param null|string    $invoice_type
     *                                                    The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param null|string[]  $statuses
     *                                                    A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param null|string    $external_invoice_id
     *                                                    Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param null|string    $sort_by
     *                                                    The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAsync(
        string $marketplace_id,
        ?string $transaction_identifier_name = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $transaction_type = null,
        ?string $transaction_identifier_id = null,
        ?\DateTime $date_start = null,
        ?string $series = null,
        ?string $next_token = null,
        ?string $sort_order = null,
        ?string $invoice_type = null,
        ?array $statuses = null,
        ?string $external_invoice_id = null,
        ?string $sort_by = null
    ): PromiseInterface {
        return $this->getInvoicesAsyncWithHttpInfo($marketplace_id, $transaction_identifier_name, $page_size, $date_end, $transaction_type, $transaction_identifier_id, $date_start, $series, $next_token, $sort_order, $invoice_type, $statuses, $external_invoice_id, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoicesAsyncWithHttpInfo.
     *
     * @param string         $marketplace_id
     *                                                    The response includes only the invoices that match the specified marketplace. (required)
     * @param null|string    $transaction_identifier_name
     *                                                    The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param null|int       $page_size
     *                                                    The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param null|\DateTime $date_end
     *                                                    The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param null|string    $transaction_type
     *                                                    The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param null|string    $transaction_identifier_id
     *                                                    The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param null|\DateTime $date_start
     *                                                    The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param null|string    $series
     *                                                    Return invoices with the specified series number. (optional)
     * @param null|string    $next_token
     *                                                    The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string    $sort_order
     *                                                    Sort the invoices in the response in ascending or descending order. (optional)
     * @param null|string    $invoice_type
     *                                                    The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param null|string[]  $statuses
     *                                                    A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param null|string    $external_invoice_id
     *                                                    Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param null|string    $sort_by
     *                                                    The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAsyncWithHttpInfo(
        string $marketplace_id,
        ?string $transaction_identifier_name = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $transaction_type = null,
        ?string $transaction_identifier_id = null,
        ?\DateTime $date_start = null,
        ?string $series = null,
        ?string $next_token = null,
        ?string $sort_order = null,
        ?string $invoice_type = null,
        ?array $statuses = null,
        ?string $external_invoice_id = null,
        ?string $sort_by = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoicesResponse';
        $request = $this->getInvoicesRequest($marketplace_id, $transaction_identifier_name, $page_size, $date_end, $transaction_type, $transaction_identifier_id, $date_start, $series, $next_token, $sort_order, $invoice_type, $statuses, $external_invoice_id, $sort_by);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoicesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoices'.
     *
     * @param string         $marketplace_id
     *                                                    The response includes only the invoices that match the specified marketplace. (required)
     * @param null|string    $transaction_identifier_name
     *                                                    The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options. (optional)
     * @param null|int       $page_size
     *                                                    The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200 (optional)
     * @param null|\DateTime $date_end
     *                                                    The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time. (optional)
     * @param null|string    $transaction_type
     *                                                    The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options. (optional)
     * @param null|string    $transaction_identifier_id
     *                                                    The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field. (optional)
     * @param null|\DateTime $date_start
     *                                                    The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request. (optional)
     * @param null|string    $series
     *                                                    Return invoices with the specified series number. (optional)
     * @param null|string    $next_token
     *                                                    The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|string    $sort_order
     *                                                    Sort the invoices in the response in ascending or descending order. (optional)
     * @param null|string    $invoice_type
     *                                                    The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options. (optional)
     * @param null|string[]  $statuses
     *                                                    A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1 (optional)
     * @param null|string    $external_invoice_id
     *                                                    Return invoices that match this external ID. This is typically the Government Invoice ID. (optional)
     * @param null|string    $sort_by
     *                                                    The attribute by which you want to sort the invoices in the response. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesRequest(
        string $marketplace_id,
        ?string $transaction_identifier_name = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $transaction_type = null,
        ?string $transaction_identifier_id = null,
        ?\DateTime $date_start = null,
        ?string $series = null,
        ?string $next_token = null,
        ?string $sort_order = null,
        ?string $invoice_type = null,
        ?array $statuses = null,
        ?string $external_invoice_id = null,
        ?string $sort_by = null
    ): Request {
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getInvoices'
            );
        }
        if (null !== $statuses && count($statuses) < 1) {
            throw new \InvalidArgumentException('invalid value for "$statuses" when calling InvoicesApi.getInvoices, number of items must be greater than or equal to 1.');
        }

        $resourcePath = '/tax/invoices/2024-06-19/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_identifier_name,
            'transactionIdentifierName', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_end,
            'dateEnd', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_type,
            'transactionType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_identifier_id,
            'transactionIdentifierId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_start,
            'dateStart', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $series,
            'series', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice_type,
            'invoiceType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_invoice_id,
            'externalInvoiceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesAttributes.
     *
     * @param string $marketplace_id
     *                               The marketplace identifier. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAttributes(
        string $marketplace_id
    ): GetInvoicesAttributesResponse {
        list($response) = $this->getInvoicesAttributesWithHttpInfo($marketplace_id);

        return $response;
    }

    /**
     * Operation getInvoicesAttributesWithHttpInfo.
     *
     * @param string $marketplace_id
     *                               The marketplace identifier. (required)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAttributesWithHttpInfo(
        string $marketplace_id
    ): array {
        $request = $this->getInvoicesAttributesRequest($marketplace_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoicesAttributesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoicesAttributesAsync.
     *
     * @param string $marketplace_id
     *                               The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAttributesAsync(
        string $marketplace_id
    ): PromiseInterface {
        return $this->getInvoicesAttributesAsyncWithHttpInfo($marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoicesAttributesAsyncWithHttpInfo.
     *
     * @param string $marketplace_id
     *                               The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAttributesAsyncWithHttpInfo(
        string $marketplace_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoicesAttributesResponse';
        $request = $this->getInvoicesAttributesRequest($marketplace_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoicesAttributesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoicesAttributes'.
     *
     * @param string $marketplace_id
     *                               The marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesAttributesRequest(
        string $marketplace_id
    ): Request {
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getInvoicesAttributes'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/attributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesDocument.
     *
     * @param string $invoices_document_id
     *                                     The export document identifier. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesDocument(
        string $invoices_document_id
    ): GetInvoicesDocumentResponse {
        list($response) = $this->getInvoicesDocumentWithHttpInfo($invoices_document_id);

        return $response;
    }

    /**
     * Operation getInvoicesDocumentWithHttpInfo.
     *
     * @param string $invoices_document_id
     *                                     The export document identifier. (required)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesDocumentWithHttpInfo(
        string $invoices_document_id
    ): array {
        $request = $this->getInvoicesDocumentRequest($invoices_document_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoicesDocumentRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoicesDocumentAsync.
     *
     * @param string $invoices_document_id
     *                                     The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesDocumentAsync(
        string $invoices_document_id
    ): PromiseInterface {
        return $this->getInvoicesDocumentAsyncWithHttpInfo($invoices_document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoicesDocumentAsyncWithHttpInfo.
     *
     * @param string $invoices_document_id
     *                                     The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesDocumentAsyncWithHttpInfo(
        string $invoices_document_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoicesDocumentResponse';
        $request = $this->getInvoicesDocumentRequest($invoices_document_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoicesDocumentRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoicesDocument'.
     *
     * @param string $invoices_document_id
     *                                     The export document identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesDocumentRequest(
        string $invoices_document_id
    ): Request {
        // verify the required parameter 'invoices_document_id' is set
        if (null === $invoices_document_id || (is_array($invoices_document_id) && 0 === count($invoices_document_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoices_document_id when calling getInvoicesDocument'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/documents/{invoicesDocumentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $invoices_document_id) {
            $resourcePath = str_replace(
                '{invoicesDocumentId}',
                ObjectSerializer::toPathValue($invoices_document_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesExport.
     *
     * @param string $export_id
     *                          The unique identifier for the export. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExport(
        string $export_id
    ): GetInvoicesExportResponse {
        list($response) = $this->getInvoicesExportWithHttpInfo($export_id);

        return $response;
    }

    /**
     * Operation getInvoicesExportWithHttpInfo.
     *
     * @param string $export_id
     *                          The unique identifier for the export. (required)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportWithHttpInfo(
        string $export_id
    ): array {
        $request = $this->getInvoicesExportRequest($export_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoicesExportRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoicesExportAsync.
     *
     * @param string $export_id
     *                          The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportAsync(
        string $export_id
    ): PromiseInterface {
        return $this->getInvoicesExportAsyncWithHttpInfo($export_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoicesExportAsyncWithHttpInfo.
     *
     * @param string $export_id
     *                          The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportAsyncWithHttpInfo(
        string $export_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportResponse';
        $request = $this->getInvoicesExportRequest($export_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoicesExportRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoicesExport'.
     *
     * @param string $export_id
     *                          The unique identifier for the export. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportRequest(
        string $export_id
    ): Request {
        // verify the required parameter 'export_id' is set
        if (null === $export_id || (is_array($export_id) && 0 === count($export_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_id when calling getInvoicesExport'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports/{exportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $export_id) {
            $resourcePath = str_replace(
                '{exportId}',
                ObjectSerializer::toPathValue($export_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoicesExports.
     *
     * @param string         $marketplace_id
     *                                       The returned exports match the specified marketplace. (required)
     * @param null|\DateTime $date_start
     *                                       The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param null|string    $next_token
     *                                       The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|int       $page_size
     *                                       The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param null|\DateTime $date_end
     *                                       The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param null|string    $status
     *                                       Return exports matching the status specified. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExports(
        string $marketplace_id,
        ?\DateTime $date_start = null,
        ?string $next_token = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $status = null
    ): GetInvoicesExportsResponse {
        list($response) = $this->getInvoicesExportsWithHttpInfo($marketplace_id, $date_start, $next_token, $page_size, $date_end, $status);

        return $response;
    }

    /**
     * Operation getInvoicesExportsWithHttpInfo.
     *
     * @param string         $marketplace_id
     *                                       The returned exports match the specified marketplace. (required)
     * @param null|\DateTime $date_start
     *                                       The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param null|string    $next_token
     *                                       The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|int       $page_size
     *                                       The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param null|\DateTime $date_end
     *                                       The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param null|string    $status
     *                                       Return exports matching the status specified. (optional)
     *
     * @return array of \SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportsWithHttpInfo(
        string $marketplace_id,
        ?\DateTime $date_start = null,
        ?string $next_token = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $status = null
    ): array {
        $request = $this->getInvoicesExportsRequest($marketplace_id, $date_start, $next_token, $page_size, $date_end, $status);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInvoicesExportsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\invoices\v2024_06_19\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInvoicesExportsAsync.
     *
     * @param string         $marketplace_id
     *                                       The returned exports match the specified marketplace. (required)
     * @param null|\DateTime $date_start
     *                                       The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param null|string    $next_token
     *                                       The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|int       $page_size
     *                                       The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param null|\DateTime $date_end
     *                                       The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param null|string    $status
     *                                       Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportsAsync(
        string $marketplace_id,
        ?\DateTime $date_start = null,
        ?string $next_token = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $status = null
    ): PromiseInterface {
        return $this->getInvoicesExportsAsyncWithHttpInfo($marketplace_id, $date_start, $next_token, $page_size, $date_end, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInvoicesExportsAsyncWithHttpInfo.
     *
     * @param string         $marketplace_id
     *                                       The returned exports match the specified marketplace. (required)
     * @param null|\DateTime $date_start
     *                                       The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param null|string    $next_token
     *                                       The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|int       $page_size
     *                                       The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param null|\DateTime $date_end
     *                                       The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param null|string    $status
     *                                       Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportsAsyncWithHttpInfo(
        string $marketplace_id,
        ?\DateTime $date_start = null,
        ?string $next_token = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $status = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\invoices\v2024_06_19\GetInvoicesExportsResponse';
        $request = $this->getInvoicesExportsRequest($marketplace_id, $date_start, $next_token, $page_size, $date_end, $status);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInvoicesExportsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInvoicesExports'.
     *
     * @param string         $marketplace_id
     *                                       The returned exports match the specified marketplace. (required)
     * @param null|\DateTime $date_start
     *                                       The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago. (optional)
     * @param null|string    $next_token
     *                                       The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param null|int       $page_size
     *                                       The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100 (optional)
     * @param null|\DateTime $date_end
     *                                       The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request. (optional)
     * @param null|string    $status
     *                                       Return exports matching the status specified. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInvoicesExportsRequest(
        string $marketplace_id,
        ?\DateTime $date_start = null,
        ?string $next_token = null,
        ?int $page_size = null,
        ?\DateTime $date_end = null,
        ?string $status = null
    ): Request {
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getInvoicesExports'
            );
        }

        $resourcePath = '/tax/invoices/2024-06-19/exports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_start,
            'dateStart', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_end,
            'dateEnd', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
