<?php
/**
 * VendorShippingApi
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\vendor\shipments\v1;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\ObjectSerializer;

/**
 * VendorShippingApi Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VendorShippingApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private Bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    public ?LimiterInterface $getShipmentDetailsRateLimiter;
    public ?LimiterInterface $getShipmentLabelsRateLimiter;
    public ?LimiterInterface $submitShipmentConfirmationsRateLimiter;
    public ?LimiterInterface $submitShipmentsRateLimiter;

    /**
     * @param Configuration   $config
     * @param RateLimitConfiguration|null $rateLimitConfig
     * @param ClientInterface|null $client
     * @param HeaderSelector|null $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?Bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("VendorShippingApi-getShipmentDetails"), $this->rateLimitStorage);
            $this->getShipmentDetailsRateLimiter = $factory->create("VendorShippingApi-getShipmentDetails");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("VendorShippingApi-getShipmentLabels"), $this->rateLimitStorage);
            $this->getShipmentLabelsRateLimiter = $factory->create("VendorShippingApi-getShipmentLabels");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("VendorShippingApi-submitShipmentConfirmations"), $this->rateLimitStorage);
            $this->submitShipmentConfirmationsRateLimiter = $factory->create("VendorShippingApi-submitShipmentConfirmations");
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions("VendorShippingApi-submitShipments"), $this->rateLimitStorage);
            $this->submitShipmentsRateLimiter = $factory->create("VendorShippingApi-submitShipments");
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getShipmentDetails
     *
     * GetShipmentDetails
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string|null $next_token
     *  Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param  \DateTime|null $created_after
     *  Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $created_before
     *  Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_before
     *  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_after
     *  Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_before
     *  Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_after
     *  Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_before
     *  Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_after
     *  Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_before
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_after
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_before
     *  Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_after
     *  Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_before
     *  Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_after
     *  Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_before
     *  Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_after
     *  Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  string|null $current_shipment_status
     *  Get Shipment Details by passing Current shipment status. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment Details by passing buyer Reference ID (optional)
     * @param  string|null $buyer_warehouse_code
     *  Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse
     */
    public function getShipmentDetails(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $created_after = null,
        ?\DateTime $created_before = null,
        ?\DateTime $shipment_confirmed_before = null,
        ?\DateTime $shipment_confirmed_after = null,
        ?\DateTime $package_label_created_before = null,
        ?\DateTime $package_label_created_after = null,
        ?\DateTime $shipped_before = null,
        ?\DateTime $shipped_after = null,
        ?\DateTime $estimated_delivery_before = null,
        ?\DateTime $estimated_delivery_after = null,
        ?\DateTime $shipment_delivery_before = null,
        ?\DateTime $shipment_delivery_after = null,
        ?\DateTime $requested_pick_up_before = null,
        ?\DateTime $requested_pick_up_after = null,
        ?\DateTime $scheduled_pick_up_before = null,
        ?\DateTime $scheduled_pick_up_after = null,
        ?string $current_shipment_status = null,
        ?string $vendor_shipment_identifier = null,
        ?string $buyer_reference_number = null,
        ?string $buyer_warehouse_code = null,
        ?string $seller_warehouse_code = null
    ): \SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse {
        list($response) = $this->getShipmentDetailsWithHttpInfo($limit, $sort_order, $next_token, $created_after, $created_before, $shipment_confirmed_before, $shipment_confirmed_after, $package_label_created_before, $package_label_created_after, $shipped_before, $shipped_after, $estimated_delivery_before, $estimated_delivery_after, $shipment_delivery_before, $shipment_delivery_after, $requested_pick_up_before, $requested_pick_up_after, $scheduled_pick_up_before, $scheduled_pick_up_after, $current_shipment_status, $vendor_shipment_identifier, $buyer_reference_number, $buyer_warehouse_code, $seller_warehouse_code);
        return $response;
    }

    /**
     * Operation getShipmentDetailsWithHttpInfo
     *
     * GetShipmentDetails
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string|null $next_token
     *  Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param  \DateTime|null $created_after
     *  Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $created_before
     *  Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_before
     *  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_after
     *  Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_before
     *  Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_after
     *  Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_before
     *  Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_after
     *  Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_before
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_after
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_before
     *  Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_after
     *  Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_before
     *  Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_after
     *  Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_before
     *  Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_after
     *  Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  string|null $current_shipment_status
     *  Get Shipment Details by passing Current shipment status. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment Details by passing buyer Reference ID (optional)
     * @param  string|null $buyer_warehouse_code
     *  Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentDetailsWithHttpInfo(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $created_after = null,
        ?\DateTime $created_before = null,
        ?\DateTime $shipment_confirmed_before = null,
        ?\DateTime $shipment_confirmed_after = null,
        ?\DateTime $package_label_created_before = null,
        ?\DateTime $package_label_created_after = null,
        ?\DateTime $shipped_before = null,
        ?\DateTime $shipped_after = null,
        ?\DateTime $estimated_delivery_before = null,
        ?\DateTime $estimated_delivery_after = null,
        ?\DateTime $shipment_delivery_before = null,
        ?\DateTime $shipment_delivery_after = null,
        ?\DateTime $requested_pick_up_before = null,
        ?\DateTime $requested_pick_up_after = null,
        ?\DateTime $scheduled_pick_up_before = null,
        ?\DateTime $scheduled_pick_up_after = null,
        ?string $current_shipment_status = null,
        ?string $vendor_shipment_identifier = null,
        ?string $buyer_reference_number = null,
        ?string $buyer_warehouse_code = null,
        ?string $seller_warehouse_code = null
    ): array {
        $request = $this->getShipmentDetailsRequest($limit, $sort_order, $next_token, $created_after, $created_before, $shipment_confirmed_before, $shipment_confirmed_after, $package_label_created_before, $package_label_created_after, $shipped_before, $shipped_after, $estimated_delivery_before, $estimated_delivery_after, $shipment_delivery_before, $shipment_delivery_after, $requested_pick_up_before, $requested_pick_up_after, $scheduled_pick_up_before, $scheduled_pick_up_after, $current_shipment_status, $vendor_shipment_identifier, $buyer_reference_number, $buyer_warehouse_code, $seller_warehouse_code);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getShipmentDetailsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getShipmentDetailsAsync
     *
     * GetShipmentDetails
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string|null $next_token
     *  Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param  \DateTime|null $created_after
     *  Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $created_before
     *  Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_before
     *  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_after
     *  Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_before
     *  Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_after
     *  Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_before
     *  Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_after
     *  Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_before
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_after
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_before
     *  Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_after
     *  Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_before
     *  Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_after
     *  Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_before
     *  Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_after
     *  Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  string|null $current_shipment_status
     *  Get Shipment Details by passing Current shipment status. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment Details by passing buyer Reference ID (optional)
     * @param  string|null $buyer_warehouse_code
     *  Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipmentDetailsAsync(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $created_after = null,
        ?\DateTime $created_before = null,
        ?\DateTime $shipment_confirmed_before = null,
        ?\DateTime $shipment_confirmed_after = null,
        ?\DateTime $package_label_created_before = null,
        ?\DateTime $package_label_created_after = null,
        ?\DateTime $shipped_before = null,
        ?\DateTime $shipped_after = null,
        ?\DateTime $estimated_delivery_before = null,
        ?\DateTime $estimated_delivery_after = null,
        ?\DateTime $shipment_delivery_before = null,
        ?\DateTime $shipment_delivery_after = null,
        ?\DateTime $requested_pick_up_before = null,
        ?\DateTime $requested_pick_up_after = null,
        ?\DateTime $scheduled_pick_up_before = null,
        ?\DateTime $scheduled_pick_up_after = null,
        ?string $current_shipment_status = null,
        ?string $vendor_shipment_identifier = null,
        ?string $buyer_reference_number = null,
        ?string $buyer_warehouse_code = null,
        ?string $seller_warehouse_code = null
    ): PromiseInterface {
        return $this->getShipmentDetailsAsyncWithHttpInfo($limit, $sort_order, $next_token, $created_after, $created_before, $shipment_confirmed_before, $shipment_confirmed_after, $package_label_created_before, $package_label_created_after, $shipped_before, $shipped_after, $estimated_delivery_before, $estimated_delivery_after, $shipment_delivery_before, $shipment_delivery_after, $requested_pick_up_before, $requested_pick_up_after, $scheduled_pick_up_before, $scheduled_pick_up_after, $current_shipment_status, $vendor_shipment_identifier, $buyer_reference_number, $buyer_warehouse_code, $seller_warehouse_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentDetailsAsyncWithHttpInfo
     *
     * GetShipmentDetails
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string|null $next_token
     *  Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param  \DateTime|null $created_after
     *  Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $created_before
     *  Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_before
     *  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_after
     *  Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_before
     *  Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_after
     *  Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_before
     *  Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_after
     *  Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_before
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_after
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_before
     *  Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_after
     *  Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_before
     *  Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_after
     *  Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_before
     *  Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_after
     *  Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  string|null $current_shipment_status
     *  Get Shipment Details by passing Current shipment status. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment Details by passing buyer Reference ID (optional)
     * @param  string|null $buyer_warehouse_code
     *  Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipmentDetailsAsyncWithHttpInfo(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $created_after = null,
        ?\DateTime $created_before = null,
        ?\DateTime $shipment_confirmed_before = null,
        ?\DateTime $shipment_confirmed_after = null,
        ?\DateTime $package_label_created_before = null,
        ?\DateTime $package_label_created_after = null,
        ?\DateTime $shipped_before = null,
        ?\DateTime $shipped_after = null,
        ?\DateTime $estimated_delivery_before = null,
        ?\DateTime $estimated_delivery_after = null,
        ?\DateTime $shipment_delivery_before = null,
        ?\DateTime $shipment_delivery_after = null,
        ?\DateTime $requested_pick_up_before = null,
        ?\DateTime $requested_pick_up_after = null,
        ?\DateTime $scheduled_pick_up_before = null,
        ?\DateTime $scheduled_pick_up_after = null,
        ?string $current_shipment_status = null,
        ?string $vendor_shipment_identifier = null,
        ?string $buyer_reference_number = null,
        ?string $buyer_warehouse_code = null,
        ?string $seller_warehouse_code = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\vendor\shipments\v1\GetShipmentDetailsResponse';
        $request = $this->getShipmentDetailsRequest($limit, $sort_order, $next_token, $created_after, $created_before, $shipment_confirmed_before, $shipment_confirmed_after, $package_label_created_before, $package_label_created_after, $shipped_before, $shipped_after, $estimated_delivery_before, $estimated_delivery_after, $shipment_delivery_before, $shipment_delivery_after, $requested_pick_up_before, $requested_pick_up_after, $scheduled_pick_up_before, $scheduled_pick_up_after, $current_shipment_status, $vendor_shipment_identifier, $buyer_reference_number, $buyer_warehouse_code, $seller_warehouse_code);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getShipmentDetailsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentDetails'
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort in ascending or descending order by purchase order creation date. (optional)
     * @param  string|null $next_token
     *  Used for pagination when there are more shipments than the specified result size limit. (optional)
     * @param  \DateTime|null $created_after
     *  Get Shipment Details that became available after this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $created_before
     *  Get Shipment Details that became available before this timestamp will be included in the result. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_before
     *  Get Shipment Details by passing Shipment confirmed create Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_confirmed_after
     *  Get Shipment Details by passing Shipment confirmed create Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_before
     *  Get Shipment Details by passing Package label create Date by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $package_label_created_after
     *  Get Shipment Details by passing Package label create Date After by buyer. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_before
     *  Get Shipment Details by passing Shipped Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipped_after
     *  Get Shipment Details by passing Shipped Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_before
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $estimated_delivery_after
     *  Get Shipment Details by passing Estimated Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_before
     *  Get Shipment Details by passing Shipment Delivery Date Before. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $shipment_delivery_after
     *  Get Shipment Details by passing Shipment Delivery Date After. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_before
     *  Get Shipment Details by passing Before Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $requested_pick_up_after
     *  Get Shipment Details by passing After Requested pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_before
     *  Get Shipment Details by passing Before scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  \DateTime|null $scheduled_pick_up_after
     *  Get Shipment Details by passing After Scheduled pickup date. Must be in &lt;a href&#x3D;&#39;https://developer-docs.amazon.com/sp-api/docs/iso-8601&#39;&gt;ISO 8601&lt;/a&gt; format. (optional)
     * @param  string|null $current_shipment_status
     *  Get Shipment Details by passing Current shipment status. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment Details by passing Vendor Shipment ID (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment Details by passing buyer Reference ID (optional)
     * @param  string|null $buyer_warehouse_code
     *  Get Shipping Details based on buyer warehouse code. This value should be same as &#39;shipToParty.partyId&#39; in the Shipment. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping Details based on vendor warehouse code. This value should be same as &#39;sellingParty.partyId&#39; in the Shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getShipmentDetailsRequest(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $created_after = null,
        ?\DateTime $created_before = null,
        ?\DateTime $shipment_confirmed_before = null,
        ?\DateTime $shipment_confirmed_after = null,
        ?\DateTime $package_label_created_before = null,
        ?\DateTime $package_label_created_after = null,
        ?\DateTime $shipped_before = null,
        ?\DateTime $shipped_after = null,
        ?\DateTime $estimated_delivery_before = null,
        ?\DateTime $estimated_delivery_after = null,
        ?\DateTime $shipment_delivery_before = null,
        ?\DateTime $shipment_delivery_after = null,
        ?\DateTime $requested_pick_up_before = null,
        ?\DateTime $requested_pick_up_after = null,
        ?\DateTime $scheduled_pick_up_before = null,
        ?\DateTime $scheduled_pick_up_after = null,
        ?string $current_shipment_status = null,
        ?string $vendor_shipment_identifier = null,
        ?string $buyer_reference_number = null,
        ?string $buyer_warehouse_code = null,
        ?string $seller_warehouse_code = null
    ): Request {
        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorShippingApi.getShipmentDetails, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorShippingApi.getShipmentDetails, must be bigger than or equal to 1.');
        }


        $resourcePath = '/vendor/shipping/v1/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_confirmed_before,
            'shipmentConfirmedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_confirmed_after,
            'shipmentConfirmedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package_label_created_before,
            'packageLabelCreatedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $package_label_created_after,
            'packageLabelCreatedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipped_before,
            'shippedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipped_after,
            'shippedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $estimated_delivery_before,
            'estimatedDeliveryBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $estimated_delivery_after,
            'estimatedDeliveryAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_delivery_before,
            'shipmentDeliveryBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $shipment_delivery_after,
            'shipmentDeliveryAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $requested_pick_up_before,
            'requestedPickUpBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $requested_pick_up_after,
            'requestedPickUpAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_pick_up_before,
            'scheduledPickUpBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_pick_up_after,
            'scheduledPickUpAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_shipment_status,
            'currentShipmentStatus', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vendor_shipment_identifier,
            'vendorShipmentIdentifier', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $buyer_reference_number,
            'buyerReferenceNumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $buyer_warehouse_code,
            'buyerWarehouseCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seller_warehouse_code,
            'sellerWarehouseCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentLabels
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort the list by shipment label creation date in ascending or descending order. (optional)
     * @param  string|null $next_token
     *  A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  \DateTime|null $label_created_after
     *  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  \DateTime|null $label_created_before
     *  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment labels by passing buyer reference number. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment labels by passing vendor shipment identifier. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping labels based on vendor warehouse code. This value must be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\vendor\shipments\v1\GetShipmentLabels
     */
    public function getShipmentLabels(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $label_created_after = null,
        ?\DateTime $label_created_before = null,
        ?string $buyer_reference_number = null,
        ?string $vendor_shipment_identifier = null,
        ?string $seller_warehouse_code = null
    ): \SpApi\Model\vendor\shipments\v1\GetShipmentLabels {
        list($response) = $this->getShipmentLabelsWithHttpInfo($limit, $sort_order, $next_token, $label_created_after, $label_created_before, $buyer_reference_number, $vendor_shipment_identifier, $seller_warehouse_code);
        return $response;
    }

    /**
     * Operation getShipmentLabelsWithHttpInfo
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort the list by shipment label creation date in ascending or descending order. (optional)
     * @param  string|null $next_token
     *  A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  \DateTime|null $label_created_after
     *  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  \DateTime|null $label_created_before
     *  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment labels by passing buyer reference number. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment labels by passing vendor shipment identifier. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping labels based on vendor warehouse code. This value must be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\vendor\shipments\v1\GetShipmentLabels, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentLabelsWithHttpInfo(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $label_created_after = null,
        ?\DateTime $label_created_before = null,
        ?string $buyer_reference_number = null,
        ?string $vendor_shipment_identifier = null,
        ?string $seller_warehouse_code = null
    ): array {
        $request = $this->getShipmentLabelsRequest($limit, $sort_order, $next_token, $label_created_after, $label_created_before, $buyer_reference_number, $vendor_shipment_identifier, $seller_warehouse_code);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->getShipmentLabelsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\vendor\shipments\v1\GetShipmentLabels' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\vendor\shipments\v1\GetShipmentLabels' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\vendor\shipments\v1\GetShipmentLabels', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\vendor\shipments\v1\GetShipmentLabels',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation getShipmentLabelsAsync
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort the list by shipment label creation date in ascending or descending order. (optional)
     * @param  string|null $next_token
     *  A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  \DateTime|null $label_created_after
     *  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  \DateTime|null $label_created_before
     *  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment labels by passing buyer reference number. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment labels by passing vendor shipment identifier. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping labels based on vendor warehouse code. This value must be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipmentLabelsAsync(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $label_created_after = null,
        ?\DateTime $label_created_before = null,
        ?string $buyer_reference_number = null,
        ?string $vendor_shipment_identifier = null,
        ?string $seller_warehouse_code = null
    ): PromiseInterface {
        return $this->getShipmentLabelsAsyncWithHttpInfo($limit, $sort_order, $next_token, $label_created_after, $label_created_before, $buyer_reference_number, $vendor_shipment_identifier, $seller_warehouse_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentLabelsAsyncWithHttpInfo
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort the list by shipment label creation date in ascending or descending order. (optional)
     * @param  string|null $next_token
     *  A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  \DateTime|null $label_created_after
     *  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  \DateTime|null $label_created_before
     *  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment labels by passing buyer reference number. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment labels by passing vendor shipment identifier. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping labels based on vendor warehouse code. This value must be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function getShipmentLabelsAsyncWithHttpInfo(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $label_created_after = null,
        ?\DateTime $label_created_before = null,
        ?string $buyer_reference_number = null,
        ?string $vendor_shipment_identifier = null,
        ?string $seller_warehouse_code = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\vendor\shipments\v1\GetShipmentLabels';
        $request = $this->getShipmentLabelsRequest($limit, $sort_order, $next_token, $label_created_after, $label_created_before, $buyer_reference_number, $vendor_shipment_identifier, $seller_warehouse_code);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getShipmentLabelsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentLabels'
     *
     * @param  int|null $limit
     *  The limit to the number of records returned. Default value is 50 records. (optional)
     * @param  string|null $sort_order
     *  Sort the list by shipment label creation date in ascending or descending order. (optional)
     * @param  string|null $next_token
     *  A token that is used to retrieve the next page of results. The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages. (optional)
     * @param  \DateTime|null $label_created_after
     *  Shipment labels created after this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  \DateTime|null $label_created_before
     *  Shipment labels created before this time will be included in the result. This field must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format. (optional)
     * @param  string|null $buyer_reference_number
     *  Get Shipment labels by passing buyer reference number. (optional)
     * @param  string|null $vendor_shipment_identifier
     *  Get Shipment labels by passing vendor shipment identifier. (optional)
     * @param  string|null $seller_warehouse_code
     *  Get Shipping labels based on vendor warehouse code. This value must be same as the &#x60;sellingParty.partyId&#x60; in the shipment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function getShipmentLabelsRequest(
        ?int $limit = null,
        ?string $sort_order = null,
        ?string $next_token = null,
        ?\DateTime $label_created_after = null,
        ?\DateTime $label_created_before = null,
        ?string $buyer_reference_number = null,
        ?string $vendor_shipment_identifier = null,
        ?string $seller_warehouse_code = null
    ): Request {
        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorShippingApi.getShipmentLabels, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling VendorShippingApi.getShipmentLabels, must be bigger than or equal to 1.');
        }


        $resourcePath = '/vendor/shipping/v1/transportLabels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label_created_after,
            'labelCreatedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label_created_before,
            'labelCreatedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $buyer_reference_number,
            'buyerReferenceNumber', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vendor_shipment_identifier,
            'vendorShipmentIdentifier', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seller_warehouse_code,
            'sellerWarehouseCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitShipmentConfirmations
     *
     * SubmitShipmentConfirmations
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
     *  A request to submit shipment confirmation. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse
     */
    public function submitShipmentConfirmations(
        \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
    ): \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse {
        list($response) = $this->submitShipmentConfirmationsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitShipmentConfirmationsWithHttpInfo
     *
     * SubmitShipmentConfirmations
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
     *  A request to submit shipment confirmation. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitShipmentConfirmationsWithHttpInfo(
        \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
    ): array {
        $request = $this->submitShipmentConfirmationsRequest($body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->submitShipmentConfirmationsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation submitShipmentConfirmationsAsync
     *
     * SubmitShipmentConfirmations
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
     *  A request to submit shipment confirmation. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitShipmentConfirmationsAsync(
        \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
    ): PromiseInterface {
        return $this->submitShipmentConfirmationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitShipmentConfirmationsAsyncWithHttpInfo
     *
     * SubmitShipmentConfirmations
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
     *  A request to submit shipment confirmation. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitShipmentConfirmationsAsyncWithHttpInfo(
        \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse';
        $request = $this->submitShipmentConfirmationsRequest($body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->submitShipmentConfirmationsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitShipmentConfirmations'
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
     *  A request to submit shipment confirmation. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function submitShipmentConfirmationsRequest(
        \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsRequest $body
    ): Request {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling submitShipmentConfirmations'
            );
        }

        $resourcePath = '/vendor/shipping/v1/shipmentConfirmations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitShipments
     *
     * SubmitShipments
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
     *  A request to submit shipment request. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse
     */
    public function submitShipments(
        \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
    ): \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse {
        list($response) = $this->submitShipmentsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitShipmentsWithHttpInfo
     *
     * SubmitShipments
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
     *  A request to submit shipment request. (required)
     *
     * @throws \SpApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitShipmentsWithHttpInfo(
        \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
    ): array {
        $request = $this->submitShipmentsRequest($body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                if ($this->rateLimiterEnabled) {
                    $this->submitShipmentsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
                if ('\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                    if ('\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse' !== 'string') {
                        $content = json_decode($content);
                    }
                }

                return [
                    ObjectSerializer::deserialize($content, '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders()
                ];
        } catch (ApiException $e) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            throw $e;
        }
    }

    /**
     * Operation submitShipmentsAsync
     *
     * SubmitShipments
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
     *  A request to submit shipment request. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitShipmentsAsync(
        \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
    ): PromiseInterface {
        return $this->submitShipmentsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitShipmentsAsyncWithHttpInfo
     *
     * SubmitShipments
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
     *  A request to submit shipment request. (required)
     *
     * @throws \InvalidArgumentException
     * @return PromiseInterface
     */
    public function submitShipmentsAsyncWithHttpInfo(
        \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\vendor\shipments\v1\SubmitShipmentConfirmationsResponse';
        $request = $this->submitShipmentsRequest($body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->submitShipmentsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitShipments'
     *
     * @param  \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
     *  A request to submit shipment request. (required)
     *
     * @throws \InvalidArgumentException
     * @return Request
     */
    public function submitShipmentsRequest(
        \SpApi\Model\vendor\shipments\v1\SubmitShipments $body
    ): Request {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling submitShipments'
            );
        }

        $resourcePath = '/vendor/shipping/v1/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json'
            ,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
