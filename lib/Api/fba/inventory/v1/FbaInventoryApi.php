<?php

/**
 * FbaInventoryApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for FBA Inventory.
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\fba\inventory\v1;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\fba\inventory\v1\AddInventoryRequest;
use SpApi\Model\fba\inventory\v1\AddInventoryResponse;
use SpApi\Model\fba\inventory\v1\CreateInventoryItemRequest;
use SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse;
use SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse;
use SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * FbaInventoryApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class FbaInventoryApi
{
    public ?LimiterInterface $addInventoryRateLimiter;
    public ?LimiterInterface $createInventoryItemRateLimiter;
    public ?LimiterInterface $deleteInventoryItemRateLimiter;
    public ?LimiterInterface $getInventorySummariesRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('FbaInventoryApi-addInventory'), $this->rateLimitStorage);
            $this->addInventoryRateLimiter = $factory->create('FbaInventoryApi-addInventory');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('FbaInventoryApi-createInventoryItem'), $this->rateLimitStorage);
            $this->createInventoryItemRateLimiter = $factory->create('FbaInventoryApi-createInventoryItem');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('FbaInventoryApi-deleteInventoryItem'), $this->rateLimitStorage);
            $this->deleteInventoryItemRateLimiter = $factory->create('FbaInventoryApi-deleteInventoryItem');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('FbaInventoryApi-getInventorySummaries'), $this->rateLimitStorage);
            $this->getInventorySummariesRateLimiter = $factory->create('FbaInventoryApi-getInventorySummaries');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addInventory.
     *
     * @param string              $x_amzn_idempotency_token
     *                                                        A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param AddInventoryRequest $add_inventory_request_body
     *                                                        List of items to add to Sandbox inventory. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function addInventory(
        string $x_amzn_idempotency_token,
        AddInventoryRequest $add_inventory_request_body
    ): AddInventoryResponse {
        list($response) = $this->addInventoryWithHttpInfo($x_amzn_idempotency_token, $add_inventory_request_body);

        return $response;
    }

    /**
     * Operation addInventoryWithHttpInfo.
     *
     * @param string              $x_amzn_idempotency_token
     *                                                        A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param AddInventoryRequest $add_inventory_request_body
     *                                                        List of items to add to Sandbox inventory. (required)
     *
     * @return array of \SpApi\Model\fba\inventory\v1\AddInventoryResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function addInventoryWithHttpInfo(
        string $x_amzn_idempotency_token,
        AddInventoryRequest $add_inventory_request_body
    ): array {
        $request = $this->addInventoryRequest($x_amzn_idempotency_token, $add_inventory_request_body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->addInventoryRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\fba\inventory\v1\AddInventoryResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\fba\inventory\v1\AddInventoryResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\fba\inventory\v1\AddInventoryResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\fba\inventory\v1\AddInventoryResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation addInventoryAsync.
     *
     * @param string              $x_amzn_idempotency_token
     *                                                        A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param AddInventoryRequest $add_inventory_request_body
     *                                                        List of items to add to Sandbox inventory. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addInventoryAsync(
        string $x_amzn_idempotency_token,
        AddInventoryRequest $add_inventory_request_body
    ): PromiseInterface {
        return $this->addInventoryAsyncWithHttpInfo($x_amzn_idempotency_token, $add_inventory_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation addInventoryAsyncWithHttpInfo.
     *
     * @param string              $x_amzn_idempotency_token
     *                                                        A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param AddInventoryRequest $add_inventory_request_body
     *                                                        List of items to add to Sandbox inventory. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addInventoryAsyncWithHttpInfo(
        string $x_amzn_idempotency_token,
        AddInventoryRequest $add_inventory_request_body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\fba\inventory\v1\AddInventoryResponse';
        $request = $this->addInventoryRequest($x_amzn_idempotency_token, $add_inventory_request_body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->addInventoryRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'addInventory'.
     *
     * @param string              $x_amzn_idempotency_token
     *                                                        A unique token/requestId provided with each call to ensure idempotency. (required)
     * @param AddInventoryRequest $add_inventory_request_body
     *                                                        List of items to add to Sandbox inventory. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addInventoryRequest(
        string $x_amzn_idempotency_token,
        AddInventoryRequest $add_inventory_request_body
    ): Request {
        // verify the required parameter 'x_amzn_idempotency_token' is set
        if (null === $x_amzn_idempotency_token || (is_array($x_amzn_idempotency_token) && 0 === count($x_amzn_idempotency_token))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_amzn_idempotency_token when calling addInventory'
            );
        }
        // verify the required parameter 'add_inventory_request_body' is set
        if (null === $add_inventory_request_body || (is_array($add_inventory_request_body) && 0 === count($add_inventory_request_body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_inventory_request_body when calling addInventory'
            );
        }

        $resourcePath = '/fba/inventory/v1/items/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if (null !== $x_amzn_idempotency_token) {
            $headerParams['x-amzn-idempotency-token'] = ObjectSerializer::toHeaderValue($x_amzn_idempotency_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($add_inventory_request_body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_inventory_request_body));
            } else {
                $httpBody = $add_inventory_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInventoryItem.
     *
     * @param CreateInventoryItemRequest $create_inventory_item_request_body
     *                                                                       CreateInventoryItem Request Body Parameter. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createInventoryItem(
        CreateInventoryItemRequest $create_inventory_item_request_body
    ): CreateInventoryItemResponse {
        list($response) = $this->createInventoryItemWithHttpInfo($create_inventory_item_request_body);

        return $response;
    }

    /**
     * Operation createInventoryItemWithHttpInfo.
     *
     * @param CreateInventoryItemRequest $create_inventory_item_request_body
     *                                                                       CreateInventoryItem Request Body Parameter. (required)
     *
     * @return array of \SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createInventoryItemWithHttpInfo(
        CreateInventoryItemRequest $create_inventory_item_request_body
    ): array {
        $request = $this->createInventoryItemRequest($create_inventory_item_request_body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createInventoryItemRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createInventoryItemAsync.
     *
     * @param CreateInventoryItemRequest $create_inventory_item_request_body
     *                                                                       CreateInventoryItem Request Body Parameter. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInventoryItemAsync(
        CreateInventoryItemRequest $create_inventory_item_request_body
    ): PromiseInterface {
        return $this->createInventoryItemAsyncWithHttpInfo($create_inventory_item_request_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createInventoryItemAsyncWithHttpInfo.
     *
     * @param CreateInventoryItemRequest $create_inventory_item_request_body
     *                                                                       CreateInventoryItem Request Body Parameter. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInventoryItemAsyncWithHttpInfo(
        CreateInventoryItemRequest $create_inventory_item_request_body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\fba\inventory\v1\CreateInventoryItemResponse';
        $request = $this->createInventoryItemRequest($create_inventory_item_request_body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createInventoryItemRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createInventoryItem'.
     *
     * @param CreateInventoryItemRequest $create_inventory_item_request_body
     *                                                                       CreateInventoryItem Request Body Parameter. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createInventoryItemRequest(
        CreateInventoryItemRequest $create_inventory_item_request_body
    ): Request {
        // verify the required parameter 'create_inventory_item_request_body' is set
        if (null === $create_inventory_item_request_body || (is_array($create_inventory_item_request_body) && 0 === count($create_inventory_item_request_body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_inventory_item_request_body when calling createInventoryItem'
            );
        }

        $resourcePath = '/fba/inventory/v1/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($create_inventory_item_request_body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_inventory_item_request_body));
            } else {
                $httpBody = $create_inventory_item_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInventoryItem.
     *
     * @param string $seller_sku
     *                               A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param string $marketplace_id
     *                               The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteInventoryItem(
        string $seller_sku,
        string $marketplace_id
    ): DeleteInventoryItemResponse {
        list($response) = $this->deleteInventoryItemWithHttpInfo($seller_sku, $marketplace_id);

        return $response;
    }

    /**
     * Operation deleteInventoryItemWithHttpInfo.
     *
     * @param string $seller_sku
     *                               A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param string $marketplace_id
     *                               The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     *
     * @return array of \SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteInventoryItemWithHttpInfo(
        string $seller_sku,
        string $marketplace_id
    ): array {
        $request = $this->deleteInventoryItemRequest($seller_sku, $marketplace_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->deleteInventoryItemRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation deleteInventoryItemAsync.
     *
     * @param string $seller_sku
     *                               A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param string $marketplace_id
     *                               The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteInventoryItemAsync(
        string $seller_sku,
        string $marketplace_id
    ): PromiseInterface {
        return $this->deleteInventoryItemAsyncWithHttpInfo($seller_sku, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation deleteInventoryItemAsyncWithHttpInfo.
     *
     * @param string $seller_sku
     *                               A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param string $marketplace_id
     *                               The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteInventoryItemAsyncWithHttpInfo(
        string $seller_sku,
        string $marketplace_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\fba\inventory\v1\DeleteInventoryItemResponse';
        $request = $this->deleteInventoryItemRequest($seller_sku, $marketplace_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->deleteInventoryItemRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'deleteInventoryItem'.
     *
     * @param string $seller_sku
     *                               A single seller SKU used for querying the specified seller SKU inventory summaries. (required)
     * @param string $marketplace_id
     *                               The marketplace ID for the marketplace for which the sellerSku is to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function deleteInventoryItemRequest(
        string $seller_sku,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'seller_sku' is set
        if (null === $seller_sku || (is_array($seller_sku) && 0 === count($seller_sku))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_sku when calling deleteInventoryItem'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling deleteInventoryItem'
            );
        }

        $resourcePath = '/fba/inventory/v1/items/{sellerSku}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $seller_sku) {
            $resourcePath = str_replace(
                '{sellerSku}',
                ObjectSerializer::toPathValue($seller_sku),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInventorySummaries.
     *
     * @param string         $granularity_type
     *                                         The granularity type for the inventory aggregation level. (required)
     * @param string         $granularity_id
     *                                         The granularity ID for the inventory aggregation level. (required)
     * @param string[]       $marketplace_ids
     *                                         The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param null|bool      $details
     *                                         true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param null|\DateTime $start_date_time
     *                                         A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)
     * @param null|string[]  $seller_skus
     *                                         A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)
     * @param null|string    $seller_sku
     *                                         A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param null|string    $next_token
     *                                         String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInventorySummaries(
        string $granularity_type,
        string $granularity_id,
        array $marketplace_ids,
        ?bool $details = false,
        ?\DateTime $start_date_time = null,
        ?array $seller_skus = null,
        ?string $seller_sku = null,
        ?string $next_token = null
    ): GetInventorySummariesResponse {
        list($response) = $this->getInventorySummariesWithHttpInfo($granularity_type, $granularity_id, $marketplace_ids, $details, $start_date_time, $seller_skus, $seller_sku, $next_token);

        return $response;
    }

    /**
     * Operation getInventorySummariesWithHttpInfo.
     *
     * @param string         $granularity_type
     *                                         The granularity type for the inventory aggregation level. (required)
     * @param string         $granularity_id
     *                                         The granularity ID for the inventory aggregation level. (required)
     * @param string[]       $marketplace_ids
     *                                         The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param null|bool      $details
     *                                         true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param null|\DateTime $start_date_time
     *                                         A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)
     * @param null|string[]  $seller_skus
     *                                         A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)
     * @param null|string    $seller_sku
     *                                         A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param null|string    $next_token
     *                                         String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)
     *
     * @return array of \SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getInventorySummariesWithHttpInfo(
        string $granularity_type,
        string $granularity_id,
        array $marketplace_ids,
        ?bool $details = false,
        ?\DateTime $start_date_time = null,
        ?array $seller_skus = null,
        ?string $seller_sku = null,
        ?string $next_token = null
    ): array {
        $request = $this->getInventorySummariesRequest($granularity_type, $granularity_id, $marketplace_ids, $details, $start_date_time, $seller_skus, $seller_sku, $next_token);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getInventorySummariesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getInventorySummariesAsync.
     *
     * @param string         $granularity_type
     *                                         The granularity type for the inventory aggregation level. (required)
     * @param string         $granularity_id
     *                                         The granularity ID for the inventory aggregation level. (required)
     * @param string[]       $marketplace_ids
     *                                         The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param null|bool      $details
     *                                         true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param null|\DateTime $start_date_time
     *                                         A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)
     * @param null|string[]  $seller_skus
     *                                         A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)
     * @param null|string    $seller_sku
     *                                         A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param null|string    $next_token
     *                                         String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInventorySummariesAsync(
        string $granularity_type,
        string $granularity_id,
        array $marketplace_ids,
        ?bool $details = false,
        ?\DateTime $start_date_time = null,
        ?array $seller_skus = null,
        ?string $seller_sku = null,
        ?string $next_token = null
    ): PromiseInterface {
        return $this->getInventorySummariesAsyncWithHttpInfo($granularity_type, $granularity_id, $marketplace_ids, $details, $start_date_time, $seller_skus, $seller_sku, $next_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getInventorySummariesAsyncWithHttpInfo.
     *
     * @param string         $granularity_type
     *                                         The granularity type for the inventory aggregation level. (required)
     * @param string         $granularity_id
     *                                         The granularity ID for the inventory aggregation level. (required)
     * @param string[]       $marketplace_ids
     *                                         The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param null|bool      $details
     *                                         true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param null|\DateTime $start_date_time
     *                                         A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)
     * @param null|string[]  $seller_skus
     *                                         A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)
     * @param null|string    $seller_sku
     *                                         A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param null|string    $next_token
     *                                         String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInventorySummariesAsyncWithHttpInfo(
        string $granularity_type,
        string $granularity_id,
        array $marketplace_ids,
        ?bool $details = false,
        ?\DateTime $start_date_time = null,
        ?array $seller_skus = null,
        ?string $seller_sku = null,
        ?string $next_token = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\fba\inventory\v1\GetInventorySummariesResponse';
        $request = $this->getInventorySummariesRequest($granularity_type, $granularity_id, $marketplace_ids, $details, $start_date_time, $seller_skus, $seller_sku, $next_token);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getInventorySummariesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getInventorySummaries'.
     *
     * @param string         $granularity_type
     *                                         The granularity type for the inventory aggregation level. (required)
     * @param string         $granularity_id
     *                                         The granularity ID for the inventory aggregation level. (required)
     * @param string[]       $marketplace_ids
     *                                         The marketplace ID for the marketplace for which to return inventory summaries. (required)
     * @param null|bool      $details
     *                                         true to return inventory summaries with additional summarized inventory details and quantities. Otherwise, returns inventory summaries only (default value). (optional, default to false)
     * @param null|\DateTime $start_date_time
     *                                         A start date and time in ISO8601 format. If specified, all inventory summaries that have changed since then are returned. You must specify a date and time that is no earlier than 18 months prior to the date and time when you call the API. Note: Changes in inboundWorkingQuantity, inboundShippedQuantity and inboundReceivingQuantity are not detected. (optional)
     * @param null|string[]  $seller_skus
     *                                         A list of seller SKUs for which to return inventory summaries. You may specify up to 50 SKUs. (optional)
     * @param null|string    $seller_sku
     *                                         A single seller SKU used for querying the specified seller SKU inventory summaries. (optional)
     * @param null|string    $next_token
     *                                         String token returned in the response of your previous request. The string token will expire 30 seconds after being created. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getInventorySummariesRequest(
        string $granularity_type,
        string $granularity_id,
        array $marketplace_ids,
        ?bool $details = false,
        ?\DateTime $start_date_time = null,
        ?array $seller_skus = null,
        ?string $seller_sku = null,
        ?string $next_token = null
    ): Request {
        // verify the required parameter 'granularity_type' is set
        if (null === $granularity_type || (is_array($granularity_type) && 0 === count($granularity_type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $granularity_type when calling getInventorySummaries'
            );
        }
        // verify the required parameter 'granularity_id' is set
        if (null === $granularity_id || (is_array($granularity_id) && 0 === count($granularity_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $granularity_id when calling getInventorySummaries'
            );
        }
        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getInventorySummaries'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling FbaInventoryApi.getInventorySummaries, number of items must be less than or equal to 1.');
        }

        if (null !== $seller_skus && count($seller_skus) > 50) {
            throw new \InvalidArgumentException('invalid value for "$seller_skus" when calling FbaInventoryApi.getInventorySummaries, number of items must be less than or equal to 50.');
        }

        $resourcePath = '/fba/inventory/v1/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $details,
            'details', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $granularity_type,
            'granularityType', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $granularity_id,
            'granularityId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date_time,
            'startDateTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seller_skus,
            'sellerSkus', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seller_sku,
            'sellerSku', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_token,
            'nextToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
