<?php

/**
 * ServiceApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Services.
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\services\v1;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\services\v1\AddAppointmentRequest;
use SpApi\Model\services\v1\AssignAppointmentResourcesRequest;
use SpApi\Model\services\v1\AssignAppointmentResourcesResponse;
use SpApi\Model\services\v1\CancelReservationResponse;
use SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse;
use SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse;
use SpApi\Model\services\v1\CreateReservationRequest;
use SpApi\Model\services\v1\CreateReservationResponse;
use SpApi\Model\services\v1\CreateServiceDocumentUploadDestination;
use SpApi\Model\services\v1\FixedSlotCapacity;
use SpApi\Model\services\v1\FixedSlotCapacityQuery;
use SpApi\Model\services\v1\GetAppointmentSlotsResponse;
use SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse;
use SpApi\Model\services\v1\GetServiceJobsResponse;
use SpApi\Model\services\v1\RangeSlotCapacity;
use SpApi\Model\services\v1\RangeSlotCapacityQuery;
use SpApi\Model\services\v1\RescheduleAppointmentRequest;
use SpApi\Model\services\v1\ServiceUploadDocument;
use SpApi\Model\services\v1\SetAppointmentFulfillmentDataRequest;
use SpApi\Model\services\v1\SetAppointmentResponse;
use SpApi\Model\services\v1\UpdateReservationRequest;
use SpApi\Model\services\v1\UpdateReservationResponse;
use SpApi\Model\services\v1\UpdateScheduleRequest;
use SpApi\Model\services\v1\UpdateScheduleResponse;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * ServiceApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class ServiceApi
{
    public ?LimiterInterface $addAppointmentForServiceJobByServiceJobIdRateLimiter;
    public ?LimiterInterface $assignAppointmentResourcesRateLimiter;
    public ?LimiterInterface $cancelReservationRateLimiter;
    public ?LimiterInterface $cancelServiceJobByServiceJobIdRateLimiter;
    public ?LimiterInterface $completeServiceJobByServiceJobIdRateLimiter;
    public ?LimiterInterface $createReservationRateLimiter;
    public ?LimiterInterface $createServiceDocumentUploadDestinationRateLimiter;
    public ?LimiterInterface $getAppointmentSlotsRateLimiter;
    public ?LimiterInterface $getAppointmmentSlotsByJobIdRateLimiter;
    public ?LimiterInterface $getFixedSlotCapacityRateLimiter;
    public ?LimiterInterface $getRangeSlotCapacityRateLimiter;
    public ?LimiterInterface $getServiceJobByServiceJobIdRateLimiter;
    public ?LimiterInterface $getServiceJobsRateLimiter;
    public ?LimiterInterface $rescheduleAppointmentForServiceJobByServiceJobIdRateLimiter;
    public ?LimiterInterface $setAppointmentFulfillmentDataRateLimiter;
    public ?LimiterInterface $updateReservationRateLimiter;
    public ?LimiterInterface $updateScheduleRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-addAppointmentForServiceJobByServiceJobId'), $this->rateLimitStorage);
            $this->addAppointmentForServiceJobByServiceJobIdRateLimiter = $factory->create('ServiceApi-addAppointmentForServiceJobByServiceJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-assignAppointmentResources'), $this->rateLimitStorage);
            $this->assignAppointmentResourcesRateLimiter = $factory->create('ServiceApi-assignAppointmentResources');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-cancelReservation'), $this->rateLimitStorage);
            $this->cancelReservationRateLimiter = $factory->create('ServiceApi-cancelReservation');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-cancelServiceJobByServiceJobId'), $this->rateLimitStorage);
            $this->cancelServiceJobByServiceJobIdRateLimiter = $factory->create('ServiceApi-cancelServiceJobByServiceJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-completeServiceJobByServiceJobId'), $this->rateLimitStorage);
            $this->completeServiceJobByServiceJobIdRateLimiter = $factory->create('ServiceApi-completeServiceJobByServiceJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-createReservation'), $this->rateLimitStorage);
            $this->createReservationRateLimiter = $factory->create('ServiceApi-createReservation');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-createServiceDocumentUploadDestination'), $this->rateLimitStorage);
            $this->createServiceDocumentUploadDestinationRateLimiter = $factory->create('ServiceApi-createServiceDocumentUploadDestination');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getAppointmentSlots'), $this->rateLimitStorage);
            $this->getAppointmentSlotsRateLimiter = $factory->create('ServiceApi-getAppointmentSlots');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getAppointmmentSlotsByJobId'), $this->rateLimitStorage);
            $this->getAppointmmentSlotsByJobIdRateLimiter = $factory->create('ServiceApi-getAppointmmentSlotsByJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getFixedSlotCapacity'), $this->rateLimitStorage);
            $this->getFixedSlotCapacityRateLimiter = $factory->create('ServiceApi-getFixedSlotCapacity');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getRangeSlotCapacity'), $this->rateLimitStorage);
            $this->getRangeSlotCapacityRateLimiter = $factory->create('ServiceApi-getRangeSlotCapacity');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getServiceJobByServiceJobId'), $this->rateLimitStorage);
            $this->getServiceJobByServiceJobIdRateLimiter = $factory->create('ServiceApi-getServiceJobByServiceJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-getServiceJobs'), $this->rateLimitStorage);
            $this->getServiceJobsRateLimiter = $factory->create('ServiceApi-getServiceJobs');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-rescheduleAppointmentForServiceJobByServiceJobId'), $this->rateLimitStorage);
            $this->rescheduleAppointmentForServiceJobByServiceJobIdRateLimiter = $factory->create('ServiceApi-rescheduleAppointmentForServiceJobByServiceJobId');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-setAppointmentFulfillmentData'), $this->rateLimitStorage);
            $this->setAppointmentFulfillmentDataRateLimiter = $factory->create('ServiceApi-setAppointmentFulfillmentData');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-updateReservation'), $this->rateLimitStorage);
            $this->updateReservationRateLimiter = $factory->create('ServiceApi-updateReservation');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('ServiceApi-updateSchedule'), $this->rateLimitStorage);
            $this->updateScheduleRateLimiter = $factory->create('ServiceApi-updateSchedule');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation addAppointmentForServiceJobByServiceJobId.
     *
     * @param string                $service_job_id
     *                                              An Amazon defined service job identifier. (required)
     * @param AddAppointmentRequest $body
     *                                              Add appointment operation input details. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function addAppointmentForServiceJobByServiceJobId(
        string $service_job_id,
        AddAppointmentRequest $body
    ): SetAppointmentResponse {
        list($response) = $this->addAppointmentForServiceJobByServiceJobIdWithHttpInfo($service_job_id, $body);

        return $response;
    }

    /**
     * Operation addAppointmentForServiceJobByServiceJobIdWithHttpInfo.
     *
     * @param string                $service_job_id
     *                                              An Amazon defined service job identifier. (required)
     * @param AddAppointmentRequest $body
     *                                              Add appointment operation input details. (required)
     *
     * @return array of \SpApi\Model\services\v1\SetAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function addAppointmentForServiceJobByServiceJobIdWithHttpInfo(
        string $service_job_id,
        AddAppointmentRequest $body
    ): array {
        $request = $this->addAppointmentForServiceJobByServiceJobIdRequest($service_job_id, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->addAppointmentForServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\SetAppointmentResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\SetAppointmentResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\SetAppointmentResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\SetAppointmentResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation addAppointmentForServiceJobByServiceJobIdAsync.
     *
     * @param string                $service_job_id
     *                                              An Amazon defined service job identifier. (required)
     * @param AddAppointmentRequest $body
     *                                              Add appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addAppointmentForServiceJobByServiceJobIdAsync(
        string $service_job_id,
        AddAppointmentRequest $body
    ): PromiseInterface {
        return $this->addAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo($service_job_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation addAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo.
     *
     * @param string                $service_job_id
     *                                              An Amazon defined service job identifier. (required)
     * @param AddAppointmentRequest $body
     *                                              Add appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(
        string $service_job_id,
        AddAppointmentRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\SetAppointmentResponse';
        $request = $this->addAppointmentForServiceJobByServiceJobIdRequest($service_job_id, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->addAppointmentForServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'addAppointmentForServiceJobByServiceJobId'.
     *
     * @param string                $service_job_id
     *                                              An Amazon defined service job identifier. (required)
     * @param AddAppointmentRequest $body
     *                                              Add appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function addAppointmentForServiceJobByServiceJobIdRequest(
        string $service_job_id,
        AddAppointmentRequest $body
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling addAppointmentForServiceJobByServiceJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.addAppointmentForServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.addAppointmentForServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addAppointmentForServiceJobByServiceJobId'
            );
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/appointments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignAppointmentResources.
     *
     * @param string                            $service_job_id
     *                                                          An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                            $appointment_id
     *                                                          An Amazon-defined identifier of active service job appointment. (required)
     * @param AssignAppointmentResourcesRequest $body
     *                                                          body (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function assignAppointmentResources(
        string $service_job_id,
        string $appointment_id,
        AssignAppointmentResourcesRequest $body
    ): AssignAppointmentResourcesResponse {
        list($response) = $this->assignAppointmentResourcesWithHttpInfo($service_job_id, $appointment_id, $body);

        return $response;
    }

    /**
     * Operation assignAppointmentResourcesWithHttpInfo.
     *
     * @param string                            $service_job_id
     *                                                          An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                            $appointment_id
     *                                                          An Amazon-defined identifier of active service job appointment. (required)
     * @param AssignAppointmentResourcesRequest $body
     *                                                          (required)
     *
     * @return array of \SpApi\Model\services\v1\AssignAppointmentResourcesResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function assignAppointmentResourcesWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        AssignAppointmentResourcesRequest $body
    ): array {
        $request = $this->assignAppointmentResourcesRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->assignAppointmentResourcesRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\AssignAppointmentResourcesResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\AssignAppointmentResourcesResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\AssignAppointmentResourcesResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\AssignAppointmentResourcesResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation assignAppointmentResourcesAsync.
     *
     * @param string                            $service_job_id
     *                                                          An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                            $appointment_id
     *                                                          An Amazon-defined identifier of active service job appointment. (required)
     * @param AssignAppointmentResourcesRequest $body
     *                                                          (required)
     *
     * @throws \InvalidArgumentException
     */
    public function assignAppointmentResourcesAsync(
        string $service_job_id,
        string $appointment_id,
        AssignAppointmentResourcesRequest $body
    ): PromiseInterface {
        return $this->assignAppointmentResourcesAsyncWithHttpInfo($service_job_id, $appointment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation assignAppointmentResourcesAsyncWithHttpInfo.
     *
     * @param string                            $service_job_id
     *                                                          An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                            $appointment_id
     *                                                          An Amazon-defined identifier of active service job appointment. (required)
     * @param AssignAppointmentResourcesRequest $body
     *                                                          (required)
     *
     * @throws \InvalidArgumentException
     */
    public function assignAppointmentResourcesAsyncWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        AssignAppointmentResourcesRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\AssignAppointmentResourcesResponse';
        $request = $this->assignAppointmentResourcesRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->assignAppointmentResourcesRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'assignAppointmentResources'.
     *
     * @param string                            $service_job_id
     *                                                          An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                            $appointment_id
     *                                                          An Amazon-defined identifier of active service job appointment. (required)
     * @param AssignAppointmentResourcesRequest $body
     *                                                          (required)
     *
     * @throws \InvalidArgumentException
     */
    public function assignAppointmentResourcesRequest(
        string $service_job_id,
        string $appointment_id,
        AssignAppointmentResourcesRequest $body
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling assignAppointmentResources'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.assignAppointmentResources, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.assignAppointmentResources, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'appointment_id' is set
        if (null === $appointment_id || (is_array($appointment_id) && 0 === count($appointment_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appointment_id when calling assignAppointmentResources'
            );
        }
        if (strlen($appointment_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.assignAppointmentResources, must be smaller than or equal to 100.');
        }
        if (strlen($appointment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.assignAppointmentResources, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling assignAppointmentResources'
            );
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $appointment_id) {
            $resourcePath = str_replace(
                '{appointmentId}',
                ObjectSerializer::toPathValue($appointment_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelReservation.
     *
     * @param string   $reservation_id
     *                                  Reservation Identifier (required)
     * @param string[] $marketplace_ids
     *                                  An identifier for the marketplace in which the resource operates. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function cancelReservation(
        string $reservation_id,
        array $marketplace_ids
    ): CancelReservationResponse {
        list($response) = $this->cancelReservationWithHttpInfo($reservation_id, $marketplace_ids);

        return $response;
    }

    /**
     * Operation cancelReservationWithHttpInfo.
     *
     * @param string   $reservation_id
     *                                  Reservation Identifier (required)
     * @param string[] $marketplace_ids
     *                                  An identifier for the marketplace in which the resource operates. (required)
     *
     * @return array of \SpApi\Model\services\v1\CancelReservationResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function cancelReservationWithHttpInfo(
        string $reservation_id,
        array $marketplace_ids
    ): array {
        $request = $this->cancelReservationRequest($reservation_id, $marketplace_ids);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->cancelReservationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\CancelReservationResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\CancelReservationResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\CancelReservationResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\CancelReservationResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation cancelReservationAsync.
     *
     * @param string   $reservation_id
     *                                  Reservation Identifier (required)
     * @param string[] $marketplace_ids
     *                                  An identifier for the marketplace in which the resource operates. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelReservationAsync(
        string $reservation_id,
        array $marketplace_ids
    ): PromiseInterface {
        return $this->cancelReservationAsyncWithHttpInfo($reservation_id, $marketplace_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation cancelReservationAsyncWithHttpInfo.
     *
     * @param string   $reservation_id
     *                                  Reservation Identifier (required)
     * @param string[] $marketplace_ids
     *                                  An identifier for the marketplace in which the resource operates. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelReservationAsyncWithHttpInfo(
        string $reservation_id,
        array $marketplace_ids
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\CancelReservationResponse';
        $request = $this->cancelReservationRequest($reservation_id, $marketplace_ids);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->cancelReservationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'cancelReservation'.
     *
     * @param string   $reservation_id
     *                                  Reservation Identifier (required)
     * @param string[] $marketplace_ids
     *                                  An identifier for the marketplace in which the resource operates. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelReservationRequest(
        string $reservation_id,
        array $marketplace_ids
    ): Request {
        // verify the required parameter 'reservation_id' is set
        if (null === $reservation_id || (is_array($reservation_id) && 0 === count($reservation_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling cancelReservation'
            );
        }
        if (strlen($reservation_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$reservation_id" when calling ServiceApi.cancelReservation, must be smaller than or equal to 100.');
        }
        if (strlen($reservation_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$reservation_id" when calling ServiceApi.cancelReservation, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling cancelReservation'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.cancelReservation, number of items must be less than or equal to 1.');
        }

        $resourcePath = '/service/v1/reservation/{reservationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $reservation_id) {
            $resourcePath = str_replace(
                '{reservationId}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelServiceJobByServiceJobId.
     *
     * @param string $service_job_id
     *                                         An Amazon defined service job identifier. (required)
     * @param string $cancellation_reason_code
     *                                         A cancel reason code that specifies the reason for cancelling a service job. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function cancelServiceJobByServiceJobId(
        string $service_job_id,
        string $cancellation_reason_code
    ): CancelServiceJobByServiceJobIdResponse {
        list($response) = $this->cancelServiceJobByServiceJobIdWithHttpInfo($service_job_id, $cancellation_reason_code);

        return $response;
    }

    /**
     * Operation cancelServiceJobByServiceJobIdWithHttpInfo.
     *
     * @param string $service_job_id
     *                                         An Amazon defined service job identifier. (required)
     * @param string $cancellation_reason_code
     *                                         A cancel reason code that specifies the reason for cancelling a service job. (required)
     *
     * @return array of \SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function cancelServiceJobByServiceJobIdWithHttpInfo(
        string $service_job_id,
        string $cancellation_reason_code
    ): array {
        $request = $this->cancelServiceJobByServiceJobIdRequest($service_job_id, $cancellation_reason_code);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->cancelServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation cancelServiceJobByServiceJobIdAsync.
     *
     * @param string $service_job_id
     *                                         An Amazon defined service job identifier. (required)
     * @param string $cancellation_reason_code
     *                                         A cancel reason code that specifies the reason for cancelling a service job. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelServiceJobByServiceJobIdAsync(
        string $service_job_id,
        string $cancellation_reason_code
    ): PromiseInterface {
        return $this->cancelServiceJobByServiceJobIdAsyncWithHttpInfo($service_job_id, $cancellation_reason_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation cancelServiceJobByServiceJobIdAsyncWithHttpInfo.
     *
     * @param string $service_job_id
     *                                         An Amazon defined service job identifier. (required)
     * @param string $cancellation_reason_code
     *                                         A cancel reason code that specifies the reason for cancelling a service job. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelServiceJobByServiceJobIdAsyncWithHttpInfo(
        string $service_job_id,
        string $cancellation_reason_code
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\CancelServiceJobByServiceJobIdResponse';
        $request = $this->cancelServiceJobByServiceJobIdRequest($service_job_id, $cancellation_reason_code);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->cancelServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'cancelServiceJobByServiceJobId'.
     *
     * @param string $service_job_id
     *                                         An Amazon defined service job identifier. (required)
     * @param string $cancellation_reason_code
     *                                         A cancel reason code that specifies the reason for cancelling a service job. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function cancelServiceJobByServiceJobIdRequest(
        string $service_job_id,
        string $cancellation_reason_code
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling cancelServiceJobByServiceJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.cancelServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.cancelServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'cancellation_reason_code' is set
        if (null === $cancellation_reason_code || (is_array($cancellation_reason_code) && 0 === count($cancellation_reason_code))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancellation_reason_code when calling cancelServiceJobByServiceJobId'
            );
        }
        if (strlen($cancellation_reason_code) > 100) {
            throw new \InvalidArgumentException('invalid length for "$cancellation_reason_code" when calling ServiceApi.cancelServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($cancellation_reason_code) < 1) {
            throw new \InvalidArgumentException('invalid length for "$cancellation_reason_code" when calling ServiceApi.cancelServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }
        if (!preg_match('/^[A-Z0-9_]*$/', $cancellation_reason_code)) {
            throw new \InvalidArgumentException('invalid value for "cancellation_reason_code" when calling ServiceApi.cancelServiceJobByServiceJobId, must conform to the pattern /^[A-Z0-9_]*$/.');
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/cancellations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cancellation_reason_code,
            'cancellationReasonCode', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completeServiceJobByServiceJobId.
     *
     * @param string $service_job_id
     *                               An Amazon defined service job identifier. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function completeServiceJobByServiceJobId(
        string $service_job_id
    ): CompleteServiceJobByServiceJobIdResponse {
        list($response) = $this->completeServiceJobByServiceJobIdWithHttpInfo($service_job_id);

        return $response;
    }

    /**
     * Operation completeServiceJobByServiceJobIdWithHttpInfo.
     *
     * @param string $service_job_id
     *                               An Amazon defined service job identifier. (required)
     *
     * @return array of \SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function completeServiceJobByServiceJobIdWithHttpInfo(
        string $service_job_id
    ): array {
        $request = $this->completeServiceJobByServiceJobIdRequest($service_job_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->completeServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation completeServiceJobByServiceJobIdAsync.
     *
     * @param string $service_job_id
     *                               An Amazon defined service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function completeServiceJobByServiceJobIdAsync(
        string $service_job_id
    ): PromiseInterface {
        return $this->completeServiceJobByServiceJobIdAsyncWithHttpInfo($service_job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation completeServiceJobByServiceJobIdAsyncWithHttpInfo.
     *
     * @param string $service_job_id
     *                               An Amazon defined service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function completeServiceJobByServiceJobIdAsyncWithHttpInfo(
        string $service_job_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\CompleteServiceJobByServiceJobIdResponse';
        $request = $this->completeServiceJobByServiceJobIdRequest($service_job_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->completeServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'completeServiceJobByServiceJobId'.
     *
     * @param string $service_job_id
     *                               An Amazon defined service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function completeServiceJobByServiceJobIdRequest(
        string $service_job_id
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling completeServiceJobByServiceJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.completeServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.completeServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/completions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReservation.
     *
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param CreateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createReservation(
        array $marketplace_ids,
        CreateReservationRequest $body
    ): CreateReservationResponse {
        list($response) = $this->createReservationWithHttpInfo($marketplace_ids, $body);

        return $response;
    }

    /**
     * Operation createReservationWithHttpInfo.
     *
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param CreateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @return array of \SpApi\Model\services\v1\CreateReservationResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createReservationWithHttpInfo(
        array $marketplace_ids,
        CreateReservationRequest $body
    ): array {
        $request = $this->createReservationRequest($marketplace_ids, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createReservationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\CreateReservationResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\CreateReservationResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\CreateReservationResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\CreateReservationResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createReservationAsync.
     *
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param CreateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createReservationAsync(
        array $marketplace_ids,
        CreateReservationRequest $body
    ): PromiseInterface {
        return $this->createReservationAsyncWithHttpInfo($marketplace_ids, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createReservationAsyncWithHttpInfo.
     *
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param CreateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createReservationAsyncWithHttpInfo(
        array $marketplace_ids,
        CreateReservationRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\CreateReservationResponse';
        $request = $this->createReservationRequest($marketplace_ids, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createReservationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createReservation'.
     *
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param CreateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createReservationRequest(
        array $marketplace_ids,
        CreateReservationRequest $body
    ): Request {
        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling createReservation'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.createReservation, number of items must be less than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createReservation'
            );
        }

        $resourcePath = '/service/v1/reservation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createServiceDocumentUploadDestination.
     *
     * @param ServiceUploadDocument $body
     *                                    Upload document operation input details. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createServiceDocumentUploadDestination(
        ServiceUploadDocument $body
    ): CreateServiceDocumentUploadDestination {
        list($response) = $this->createServiceDocumentUploadDestinationWithHttpInfo($body);

        return $response;
    }

    /**
     * Operation createServiceDocumentUploadDestinationWithHttpInfo.
     *
     * @param ServiceUploadDocument $body
     *                                    Upload document operation input details. (required)
     *
     * @return array of \SpApi\Model\services\v1\CreateServiceDocumentUploadDestination, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function createServiceDocumentUploadDestinationWithHttpInfo(
        ServiceUploadDocument $body
    ): array {
        $request = $this->createServiceDocumentUploadDestinationRequest($body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->createServiceDocumentUploadDestinationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\CreateServiceDocumentUploadDestination' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\CreateServiceDocumentUploadDestination' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\CreateServiceDocumentUploadDestination', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\CreateServiceDocumentUploadDestination',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation createServiceDocumentUploadDestinationAsync.
     *
     * @param ServiceUploadDocument $body
     *                                    Upload document operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createServiceDocumentUploadDestinationAsync(
        ServiceUploadDocument $body
    ): PromiseInterface {
        return $this->createServiceDocumentUploadDestinationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation createServiceDocumentUploadDestinationAsyncWithHttpInfo.
     *
     * @param ServiceUploadDocument $body
     *                                    Upload document operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createServiceDocumentUploadDestinationAsyncWithHttpInfo(
        ServiceUploadDocument $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\CreateServiceDocumentUploadDestination';
        $request = $this->createServiceDocumentUploadDestinationRequest($body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->createServiceDocumentUploadDestinationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'createServiceDocumentUploadDestination'.
     *
     * @param ServiceUploadDocument $body
     *                                    Upload document operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function createServiceDocumentUploadDestinationRequest(
        ServiceUploadDocument $body
    ): Request {
        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createServiceDocumentUploadDestination'
            );
        }

        $resourcePath = '/service/v1/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppointmentSlots.
     *
     * @param string      $asin
     *                                     ASIN associated with the service. (required)
     * @param string      $store_id
     *                                     Store identifier defining the region scope to retrive appointment slots. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace for which appointment slots are queried (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getAppointmentSlots(
        string $asin,
        string $store_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): GetAppointmentSlotsResponse {
        list($response) = $this->getAppointmentSlotsWithHttpInfo($asin, $store_id, $marketplace_ids, $start_time, $end_time);

        return $response;
    }

    /**
     * Operation getAppointmentSlotsWithHttpInfo.
     *
     * @param string      $asin
     *                                     ASIN associated with the service. (required)
     * @param string      $store_id
     *                                     Store identifier defining the region scope to retrive appointment slots. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace for which appointment slots are queried (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @return array of \SpApi\Model\services\v1\GetAppointmentSlotsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getAppointmentSlotsWithHttpInfo(
        string $asin,
        string $store_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): array {
        $request = $this->getAppointmentSlotsRequest($asin, $store_id, $marketplace_ids, $start_time, $end_time);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getAppointmentSlotsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\GetAppointmentSlotsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\GetAppointmentSlotsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\GetAppointmentSlotsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\GetAppointmentSlotsResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getAppointmentSlotsAsync.
     *
     * @param string      $asin
     *                                     ASIN associated with the service. (required)
     * @param string      $store_id
     *                                     Store identifier defining the region scope to retrive appointment slots. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace for which appointment slots are queried (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmentSlotsAsync(
        string $asin,
        string $store_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): PromiseInterface {
        return $this->getAppointmentSlotsAsyncWithHttpInfo($asin, $store_id, $marketplace_ids, $start_time, $end_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getAppointmentSlotsAsyncWithHttpInfo.
     *
     * @param string      $asin
     *                                     ASIN associated with the service. (required)
     * @param string      $store_id
     *                                     Store identifier defining the region scope to retrive appointment slots. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace for which appointment slots are queried (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmentSlotsAsyncWithHttpInfo(
        string $asin,
        string $store_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\GetAppointmentSlotsResponse';
        $request = $this->getAppointmentSlotsRequest($asin, $store_id, $marketplace_ids, $start_time, $end_time);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getAppointmentSlotsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getAppointmentSlots'.
     *
     * @param string      $asin
     *                                     ASIN associated with the service. (required)
     * @param string      $store_id
     *                                     Store identifier defining the region scope to retrive appointment slots. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace for which appointment slots are queried (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmentSlotsRequest(
        string $asin,
        string $store_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): Request {
        // verify the required parameter 'asin' is set
        if (null === $asin || (is_array($asin) && 0 === count($asin))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling getAppointmentSlots'
            );
        }
        // verify the required parameter 'store_id' is set
        if (null === $store_id || (is_array($store_id) && 0 === count($store_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getAppointmentSlots'
            );
        }
        if (strlen($store_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$store_id" when calling ServiceApi.getAppointmentSlots, must be smaller than or equal to 100.');
        }
        if (strlen($store_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$store_id" when calling ServiceApi.getAppointmentSlots, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getAppointmentSlots'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.getAppointmentSlots, number of items must be less than or equal to 1.');
        }

        $resourcePath = '/service/v1/appointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asin,
            'asin', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_id,
            'storeId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppointmmentSlotsByJobId.
     *
     * @param string      $service_job_id
     *                                     A service job identifier to retrive appointment slots for associated service. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace in which the resource operates. (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getAppointmmentSlotsByJobId(
        string $service_job_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): GetAppointmentSlotsResponse {
        list($response) = $this->getAppointmmentSlotsByJobIdWithHttpInfo($service_job_id, $marketplace_ids, $start_time, $end_time);

        return $response;
    }

    /**
     * Operation getAppointmmentSlotsByJobIdWithHttpInfo.
     *
     * @param string      $service_job_id
     *                                     A service job identifier to retrive appointment slots for associated service. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace in which the resource operates. (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @return array of \SpApi\Model\services\v1\GetAppointmentSlotsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getAppointmmentSlotsByJobIdWithHttpInfo(
        string $service_job_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): array {
        $request = $this->getAppointmmentSlotsByJobIdRequest($service_job_id, $marketplace_ids, $start_time, $end_time);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getAppointmmentSlotsByJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\GetAppointmentSlotsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\GetAppointmentSlotsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\GetAppointmentSlotsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\GetAppointmentSlotsResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getAppointmmentSlotsByJobIdAsync.
     *
     * @param string      $service_job_id
     *                                     A service job identifier to retrive appointment slots for associated service. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace in which the resource operates. (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmmentSlotsByJobIdAsync(
        string $service_job_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): PromiseInterface {
        return $this->getAppointmmentSlotsByJobIdAsyncWithHttpInfo($service_job_id, $marketplace_ids, $start_time, $end_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getAppointmmentSlotsByJobIdAsyncWithHttpInfo.
     *
     * @param string      $service_job_id
     *                                     A service job identifier to retrive appointment slots for associated service. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace in which the resource operates. (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmmentSlotsByJobIdAsyncWithHttpInfo(
        string $service_job_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\GetAppointmentSlotsResponse';
        $request = $this->getAppointmmentSlotsByJobIdRequest($service_job_id, $marketplace_ids, $start_time, $end_time);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getAppointmmentSlotsByJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getAppointmmentSlotsByJobId'.
     *
     * @param string      $service_job_id
     *                                     A service job identifier to retrive appointment slots for associated service. (required)
     * @param string[]    $marketplace_ids
     *                                     An identifier for the marketplace in which the resource operates. (required)
     * @param null|string $start_time
     *                                     A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
     * @param null|string $end_time
     *                                     A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getAppointmmentSlotsByJobIdRequest(
        string $service_job_id,
        array $marketplace_ids,
        ?string $start_time = null,
        ?string $end_time = null
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling getAppointmmentSlotsByJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.getAppointmmentSlotsByJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.getAppointmmentSlotsByJobId, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getAppointmmentSlotsByJobId'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.getAppointmmentSlotsByJobId, number of items must be less than or equal to 1.');
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/appointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFixedSlotCapacity.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param FixedSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getFixedSlotCapacity(
        string $resource_id,
        array $marketplace_ids,
        FixedSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): FixedSlotCapacity {
        list($response) = $this->getFixedSlotCapacityWithHttpInfo($resource_id, $marketplace_ids, $body, $next_page_token);

        return $response;
    }

    /**
     * Operation getFixedSlotCapacityWithHttpInfo.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param FixedSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @return array of \SpApi\Model\services\v1\FixedSlotCapacity, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getFixedSlotCapacityWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        FixedSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): array {
        $request = $this->getFixedSlotCapacityRequest($resource_id, $marketplace_ids, $body, $next_page_token);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getFixedSlotCapacityRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\FixedSlotCapacity' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\FixedSlotCapacity' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\FixedSlotCapacity', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\FixedSlotCapacityErrors',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getFixedSlotCapacityAsync.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param FixedSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getFixedSlotCapacityAsync(
        string $resource_id,
        array $marketplace_ids,
        FixedSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): PromiseInterface {
        return $this->getFixedSlotCapacityAsyncWithHttpInfo($resource_id, $marketplace_ids, $body, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getFixedSlotCapacityAsyncWithHttpInfo.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param FixedSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getFixedSlotCapacityAsyncWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        FixedSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\FixedSlotCapacity';
        $request = $this->getFixedSlotCapacityRequest($resource_id, $marketplace_ids, $body, $next_page_token);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getFixedSlotCapacityRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getFixedSlotCapacity'.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param FixedSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getFixedSlotCapacityRequest(
        string $resource_id,
        array $marketplace_ids,
        FixedSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): Request {
        // verify the required parameter 'resource_id' is set
        if (null === $resource_id || (is_array($resource_id) && 0 === count($resource_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_id when calling getFixedSlotCapacity'
            );
        }
        if (strlen($resource_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.getFixedSlotCapacity, must be smaller than or equal to 100.');
        }
        if (strlen($resource_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.getFixedSlotCapacity, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getFixedSlotCapacity'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.getFixedSlotCapacity, number of items must be less than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getFixedSlotCapacity'
            );
        }

        $resourcePath = '/service/v1/serviceResources/{resourceId}/capacity/fixed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_page_token,
            'nextPageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $resource_id) {
            $resourcePath = str_replace(
                '{resourceId}',
                ObjectSerializer::toPathValue($resource_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRangeSlotCapacity.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param RangeSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getRangeSlotCapacity(
        string $resource_id,
        array $marketplace_ids,
        RangeSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): RangeSlotCapacity {
        list($response) = $this->getRangeSlotCapacityWithHttpInfo($resource_id, $marketplace_ids, $body, $next_page_token);

        return $response;
    }

    /**
     * Operation getRangeSlotCapacityWithHttpInfo.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param RangeSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @return array of \SpApi\Model\services\v1\RangeSlotCapacity, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getRangeSlotCapacityWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        RangeSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): array {
        $request = $this->getRangeSlotCapacityRequest($resource_id, $marketplace_ids, $body, $next_page_token);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getRangeSlotCapacityRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\RangeSlotCapacity' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\RangeSlotCapacity' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\RangeSlotCapacity', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\RangeSlotCapacityErrors',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getRangeSlotCapacityAsync.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param RangeSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getRangeSlotCapacityAsync(
        string $resource_id,
        array $marketplace_ids,
        RangeSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): PromiseInterface {
        return $this->getRangeSlotCapacityAsyncWithHttpInfo($resource_id, $marketplace_ids, $body, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getRangeSlotCapacityAsyncWithHttpInfo.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param RangeSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getRangeSlotCapacityAsyncWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        RangeSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\RangeSlotCapacity';
        $request = $this->getRangeSlotCapacityRequest($resource_id, $marketplace_ids, $body, $next_page_token);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getRangeSlotCapacityRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getRangeSlotCapacity'.
     *
     * @param string                 $resource_id
     *                                                Resource Identifier. (required)
     * @param string[]               $marketplace_ids
     *                                                An identifier for the marketplace in which the resource operates. (required)
     * @param RangeSlotCapacityQuery $body
     *                                                Request body. (required)
     * @param null|string            $next_page_token
     *                                                Next page token returned in the response of your previous request. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getRangeSlotCapacityRequest(
        string $resource_id,
        array $marketplace_ids,
        RangeSlotCapacityQuery $body,
        ?string $next_page_token = null
    ): Request {
        // verify the required parameter 'resource_id' is set
        if (null === $resource_id || (is_array($resource_id) && 0 === count($resource_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_id when calling getRangeSlotCapacity'
            );
        }
        if (strlen($resource_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.getRangeSlotCapacity, must be smaller than or equal to 100.');
        }
        if (strlen($resource_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.getRangeSlotCapacity, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getRangeSlotCapacity'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.getRangeSlotCapacity, number of items must be less than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getRangeSlotCapacity'
            );
        }

        $resourcePath = '/service/v1/serviceResources/{resourceId}/capacity/range';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $next_page_token,
            'nextPageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $resource_id) {
            $resourcePath = str_replace(
                '{resourceId}',
                ObjectSerializer::toPathValue($resource_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getServiceJobByServiceJobId.
     *
     * @param string $service_job_id
     *                               A service job identifier. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getServiceJobByServiceJobId(
        string $service_job_id
    ): GetServiceJobByServiceJobIdResponse {
        list($response) = $this->getServiceJobByServiceJobIdWithHttpInfo($service_job_id);

        return $response;
    }

    /**
     * Operation getServiceJobByServiceJobIdWithHttpInfo.
     *
     * @param string $service_job_id
     *                               A service job identifier. (required)
     *
     * @return array of \SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getServiceJobByServiceJobIdWithHttpInfo(
        string $service_job_id
    ): array {
        $request = $this->getServiceJobByServiceJobIdRequest($service_job_id);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getServiceJobByServiceJobIdAsync.
     *
     * @param string $service_job_id
     *                               A service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobByServiceJobIdAsync(
        string $service_job_id
    ): PromiseInterface {
        return $this->getServiceJobByServiceJobIdAsyncWithHttpInfo($service_job_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getServiceJobByServiceJobIdAsyncWithHttpInfo.
     *
     * @param string $service_job_id
     *                               A service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobByServiceJobIdAsyncWithHttpInfo(
        string $service_job_id
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\GetServiceJobByServiceJobIdResponse';
        $request = $this->getServiceJobByServiceJobIdRequest($service_job_id);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getServiceJobByServiceJobId'.
     *
     * @param string $service_job_id
     *                               A service job identifier. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobByServiceJobIdRequest(
        string $service_job_id
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling getServiceJobByServiceJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.getServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.getServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getServiceJobs.
     *
     * @param string[]      $marketplace_ids
     *                                           Used to select jobs that were placed in the specified marketplaces. (required)
     * @param null|string[] $service_order_ids
     *                                           List of service order ids for the query you want to perform.Max values supported 20. (optional)
     * @param null|string[] $service_job_status
     *                                           A list of one or more job status by which to filter the list of jobs. (optional)
     * @param null|string   $page_token
     *                                           String returned in the response of your previous request. (optional)
     * @param null|int      $page_size
     *                                           A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
     * @param null|string   $sort_field
     *                                           Sort fields on which you want to sort the output. (optional)
     * @param null|string   $sort_order
     *                                           Sort order for the query you want to perform. (optional)
     * @param null|string   $created_after
     *                                           A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $created_before
     *                                           A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $last_updated_after
     *                                           A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $last_updated_before
     *                                           A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $schedule_start_date
     *                                           A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string   $schedule_end_date
     *                                           A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string[] $asins
     *                                           List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
     * @param null|string[] $required_skills
     *                                           A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
     * @param null|string[] $store_ids
     *                                           List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getServiceJobs(
        array $marketplace_ids,
        ?array $service_order_ids = null,
        ?array $service_job_status = null,
        ?string $page_token = null,
        ?int $page_size = 20,
        ?string $sort_field = null,
        ?string $sort_order = null,
        ?string $created_after = null,
        ?string $created_before = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?string $schedule_start_date = null,
        ?string $schedule_end_date = null,
        ?array $asins = null,
        ?array $required_skills = null,
        ?array $store_ids = null
    ): GetServiceJobsResponse {
        list($response) = $this->getServiceJobsWithHttpInfo($marketplace_ids, $service_order_ids, $service_job_status, $page_token, $page_size, $sort_field, $sort_order, $created_after, $created_before, $last_updated_after, $last_updated_before, $schedule_start_date, $schedule_end_date, $asins, $required_skills, $store_ids);

        return $response;
    }

    /**
     * Operation getServiceJobsWithHttpInfo.
     *
     * @param string[]      $marketplace_ids
     *                                           Used to select jobs that were placed in the specified marketplaces. (required)
     * @param null|string[] $service_order_ids
     *                                           List of service order ids for the query you want to perform.Max values supported 20. (optional)
     * @param null|string[] $service_job_status
     *                                           A list of one or more job status by which to filter the list of jobs. (optional)
     * @param null|string   $page_token
     *                                           String returned in the response of your previous request. (optional)
     * @param null|int      $page_size
     *                                           A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
     * @param null|string   $sort_field
     *                                           Sort fields on which you want to sort the output. (optional)
     * @param null|string   $sort_order
     *                                           Sort order for the query you want to perform. (optional)
     * @param null|string   $created_after
     *                                           A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $created_before
     *                                           A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $last_updated_after
     *                                           A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $last_updated_before
     *                                           A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $schedule_start_date
     *                                           A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string   $schedule_end_date
     *                                           A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string[] $asins
     *                                           List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
     * @param null|string[] $required_skills
     *                                           A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
     * @param null|string[] $store_ids
     *                                           List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     *
     * @return array of \SpApi\Model\services\v1\GetServiceJobsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getServiceJobsWithHttpInfo(
        array $marketplace_ids,
        ?array $service_order_ids = null,
        ?array $service_job_status = null,
        ?string $page_token = null,
        ?int $page_size = 20,
        ?string $sort_field = null,
        ?string $sort_order = null,
        ?string $created_after = null,
        ?string $created_before = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?string $schedule_start_date = null,
        ?string $schedule_end_date = null,
        ?array $asins = null,
        ?array $required_skills = null,
        ?array $store_ids = null
    ): array {
        $request = $this->getServiceJobsRequest($marketplace_ids, $service_order_ids, $service_job_status, $page_token, $page_size, $sort_field, $sort_order, $created_after, $created_before, $last_updated_after, $last_updated_before, $schedule_start_date, $schedule_end_date, $asins, $required_skills, $store_ids);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getServiceJobsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\GetServiceJobsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\GetServiceJobsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\GetServiceJobsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\GetServiceJobsResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getServiceJobsAsync.
     *
     * @param string[]      $marketplace_ids
     *                                           Used to select jobs that were placed in the specified marketplaces. (required)
     * @param null|string[] $service_order_ids
     *                                           List of service order ids for the query you want to perform.Max values supported 20. (optional)
     * @param null|string[] $service_job_status
     *                                           A list of one or more job status by which to filter the list of jobs. (optional)
     * @param null|string   $page_token
     *                                           String returned in the response of your previous request. (optional)
     * @param null|int      $page_size
     *                                           A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
     * @param null|string   $sort_field
     *                                           Sort fields on which you want to sort the output. (optional)
     * @param null|string   $sort_order
     *                                           Sort order for the query you want to perform. (optional)
     * @param null|string   $created_after
     *                                           A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $created_before
     *                                           A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $last_updated_after
     *                                           A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $last_updated_before
     *                                           A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $schedule_start_date
     *                                           A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string   $schedule_end_date
     *                                           A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string[] $asins
     *                                           List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
     * @param null|string[] $required_skills
     *                                           A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
     * @param null|string[] $store_ids
     *                                           List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobsAsync(
        array $marketplace_ids,
        ?array $service_order_ids = null,
        ?array $service_job_status = null,
        ?string $page_token = null,
        ?int $page_size = 20,
        ?string $sort_field = null,
        ?string $sort_order = null,
        ?string $created_after = null,
        ?string $created_before = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?string $schedule_start_date = null,
        ?string $schedule_end_date = null,
        ?array $asins = null,
        ?array $required_skills = null,
        ?array $store_ids = null
    ): PromiseInterface {
        return $this->getServiceJobsAsyncWithHttpInfo($marketplace_ids, $service_order_ids, $service_job_status, $page_token, $page_size, $sort_field, $sort_order, $created_after, $created_before, $last_updated_after, $last_updated_before, $schedule_start_date, $schedule_end_date, $asins, $required_skills, $store_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getServiceJobsAsyncWithHttpInfo.
     *
     * @param string[]      $marketplace_ids
     *                                           Used to select jobs that were placed in the specified marketplaces. (required)
     * @param null|string[] $service_order_ids
     *                                           List of service order ids for the query you want to perform.Max values supported 20. (optional)
     * @param null|string[] $service_job_status
     *                                           A list of one or more job status by which to filter the list of jobs. (optional)
     * @param null|string   $page_token
     *                                           String returned in the response of your previous request. (optional)
     * @param null|int      $page_size
     *                                           A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
     * @param null|string   $sort_field
     *                                           Sort fields on which you want to sort the output. (optional)
     * @param null|string   $sort_order
     *                                           Sort order for the query you want to perform. (optional)
     * @param null|string   $created_after
     *                                           A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $created_before
     *                                           A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $last_updated_after
     *                                           A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $last_updated_before
     *                                           A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $schedule_start_date
     *                                           A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string   $schedule_end_date
     *                                           A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string[] $asins
     *                                           List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
     * @param null|string[] $required_skills
     *                                           A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
     * @param null|string[] $store_ids
     *                                           List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobsAsyncWithHttpInfo(
        array $marketplace_ids,
        ?array $service_order_ids = null,
        ?array $service_job_status = null,
        ?string $page_token = null,
        ?int $page_size = 20,
        ?string $sort_field = null,
        ?string $sort_order = null,
        ?string $created_after = null,
        ?string $created_before = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?string $schedule_start_date = null,
        ?string $schedule_end_date = null,
        ?array $asins = null,
        ?array $required_skills = null,
        ?array $store_ids = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\GetServiceJobsResponse';
        $request = $this->getServiceJobsRequest($marketplace_ids, $service_order_ids, $service_job_status, $page_token, $page_size, $sort_field, $sort_order, $created_after, $created_before, $last_updated_after, $last_updated_before, $schedule_start_date, $schedule_end_date, $asins, $required_skills, $store_ids);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->getServiceJobsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getServiceJobs'.
     *
     * @param string[]      $marketplace_ids
     *                                           Used to select jobs that were placed in the specified marketplaces. (required)
     * @param null|string[] $service_order_ids
     *                                           List of service order ids for the query you want to perform.Max values supported 20. (optional)
     * @param null|string[] $service_job_status
     *                                           A list of one or more job status by which to filter the list of jobs. (optional)
     * @param null|string   $page_token
     *                                           String returned in the response of your previous request. (optional)
     * @param null|int      $page_size
     *                                           A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
     * @param null|string   $sort_field
     *                                           Sort fields on which you want to sort the output. (optional)
     * @param null|string   $sort_order
     *                                           Sort order for the query you want to perform. (optional)
     * @param null|string   $created_after
     *                                           A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $created_before
     *                                           A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $last_updated_after
     *                                           A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
     * @param null|string   $last_updated_before
     *                                           A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
     * @param null|string   $schedule_start_date
     *                                           A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string   $schedule_end_date
     *                                           A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
     * @param null|string[] $asins
     *                                           List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
     * @param null|string[] $required_skills
     *                                           A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
     * @param null|string[] $store_ids
     *                                           List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
     *
     * @throws \InvalidArgumentException
     */
    public function getServiceJobsRequest(
        array $marketplace_ids,
        ?array $service_order_ids = null,
        ?array $service_job_status = null,
        ?string $page_token = null,
        ?int $page_size = 20,
        ?string $sort_field = null,
        ?string $sort_order = null,
        ?string $created_after = null,
        ?string $created_before = null,
        ?string $last_updated_after = null,
        ?string $last_updated_before = null,
        ?string $schedule_start_date = null,
        ?string $schedule_end_date = null,
        ?array $asins = null,
        ?array $required_skills = null,
        ?array $store_ids = null
    ): Request {
        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling getServiceJobs'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.getServiceJobs, number of items must be less than or equal to 1.');
        }

        if (null !== $service_order_ids && count($service_order_ids) > 20) {
            throw new \InvalidArgumentException('invalid value for "$service_order_ids" when calling ServiceApi.getServiceJobs, number of items must be less than or equal to 20.');
        }
        if (null !== $service_order_ids && count($service_order_ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$service_order_ids" when calling ServiceApi.getServiceJobs, number of items must be greater than or equal to 1.');
        }

        if (null !== $page_size && $page_size > 20) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ServiceApi.getServiceJobs, must be smaller than or equal to 20.');
        }
        if (null !== $page_size && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ServiceApi.getServiceJobs, must be bigger than or equal to 1.');
        }

        if (null !== $asins && count($asins) > 20) {
            throw new \InvalidArgumentException('invalid value for "$asins" when calling ServiceApi.getServiceJobs, number of items must be less than or equal to 20.');
        }
        if (null !== $asins && count($asins) < 1) {
            throw new \InvalidArgumentException('invalid value for "$asins" when calling ServiceApi.getServiceJobs, number of items must be greater than or equal to 1.');
        }

        if (null !== $required_skills && count($required_skills) > 20) {
            throw new \InvalidArgumentException('invalid value for "$required_skills" when calling ServiceApi.getServiceJobs, number of items must be less than or equal to 20.');
        }
        if (null !== $required_skills && count($required_skills) < 1) {
            throw new \InvalidArgumentException('invalid value for "$required_skills" when calling ServiceApi.getServiceJobs, number of items must be greater than or equal to 1.');
        }

        if (null !== $store_ids && count($store_ids) > 50) {
            throw new \InvalidArgumentException('invalid value for "$store_ids" when calling ServiceApi.getServiceJobs, number of items must be less than or equal to 50.');
        }
        if (null !== $store_ids && count($store_ids) < 1) {
            throw new \InvalidArgumentException('invalid value for "$store_ids" when calling ServiceApi.getServiceJobs, number of items must be greater than or equal to 1.');
        }

        $resourcePath = '/service/v1/serviceJobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_order_ids,
            'serviceOrderIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_job_status,
            'serviceJobStatus', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_after,
            'createdAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_before,
            'createdBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_after,
            'lastUpdatedAfter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_updated_before,
            'lastUpdatedBefore', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schedule_start_date,
            'scheduleStartDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schedule_end_date,
            'scheduleEndDate', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $asins,
            'asins', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $required_skills,
            'requiredSkills', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $store_ids,
            'storeIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false, // required
            $this->config
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rescheduleAppointmentForServiceJobByServiceJobId.
     *
     * @param string                       $service_job_id
     *                                                     An Amazon defined service job identifier. (required)
     * @param string                       $appointment_id
     *                                                     An existing appointment identifier for the Service Job. (required)
     * @param RescheduleAppointmentRequest $body
     *                                                     Reschedule appointment operation input details. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function rescheduleAppointmentForServiceJobByServiceJobId(
        string $service_job_id,
        string $appointment_id,
        RescheduleAppointmentRequest $body
    ): SetAppointmentResponse {
        list($response) = $this->rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo($service_job_id, $appointment_id, $body);

        return $response;
    }

    /**
     * Operation rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo.
     *
     * @param string                       $service_job_id
     *                                                     An Amazon defined service job identifier. (required)
     * @param string                       $appointment_id
     *                                                     An existing appointment identifier for the Service Job. (required)
     * @param RescheduleAppointmentRequest $body
     *                                                     Reschedule appointment operation input details. (required)
     *
     * @return array of \SpApi\Model\services\v1\SetAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function rescheduleAppointmentForServiceJobByServiceJobIdWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        RescheduleAppointmentRequest $body
    ): array {
        $request = $this->rescheduleAppointmentForServiceJobByServiceJobIdRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->rescheduleAppointmentForServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\SetAppointmentResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\SetAppointmentResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\SetAppointmentResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\SetAppointmentResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation rescheduleAppointmentForServiceJobByServiceJobIdAsync.
     *
     * @param string                       $service_job_id
     *                                                     An Amazon defined service job identifier. (required)
     * @param string                       $appointment_id
     *                                                     An existing appointment identifier for the Service Job. (required)
     * @param RescheduleAppointmentRequest $body
     *                                                     Reschedule appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function rescheduleAppointmentForServiceJobByServiceJobIdAsync(
        string $service_job_id,
        string $appointment_id,
        RescheduleAppointmentRequest $body
    ): PromiseInterface {
        return $this->rescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo($service_job_id, $appointment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation rescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo.
     *
     * @param string                       $service_job_id
     *                                                     An Amazon defined service job identifier. (required)
     * @param string                       $appointment_id
     *                                                     An existing appointment identifier for the Service Job. (required)
     * @param RescheduleAppointmentRequest $body
     *                                                     Reschedule appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function rescheduleAppointmentForServiceJobByServiceJobIdAsyncWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        RescheduleAppointmentRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\SetAppointmentResponse';
        $request = $this->rescheduleAppointmentForServiceJobByServiceJobIdRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->rescheduleAppointmentForServiceJobByServiceJobIdRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'rescheduleAppointmentForServiceJobByServiceJobId'.
     *
     * @param string                       $service_job_id
     *                                                     An Amazon defined service job identifier. (required)
     * @param string                       $appointment_id
     *                                                     An existing appointment identifier for the Service Job. (required)
     * @param RescheduleAppointmentRequest $body
     *                                                     Reschedule appointment operation input details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function rescheduleAppointmentForServiceJobByServiceJobIdRequest(
        string $service_job_id,
        string $appointment_id,
        RescheduleAppointmentRequest $body
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling rescheduleAppointmentForServiceJobByServiceJobId'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.rescheduleAppointmentForServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.rescheduleAppointmentForServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'appointment_id' is set
        if (null === $appointment_id || (is_array($appointment_id) && 0 === count($appointment_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appointment_id when calling rescheduleAppointmentForServiceJobByServiceJobId'
            );
        }
        if (strlen($appointment_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.rescheduleAppointmentForServiceJobByServiceJobId, must be smaller than or equal to 100.');
        }
        if (strlen($appointment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.rescheduleAppointmentForServiceJobByServiceJobId, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling rescheduleAppointmentForServiceJobByServiceJobId'
            );
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $appointment_id) {
            $resourcePath = str_replace(
                '{appointmentId}',
                ObjectSerializer::toPathValue($appointment_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setAppointmentFulfillmentData.
     *
     * @param string                               $service_job_id
     *                                                             An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                               $appointment_id
     *                                                             An Amazon-defined identifier of active service job appointment. (required)
     * @param SetAppointmentFulfillmentDataRequest $body
     *                                                             Appointment fulfillment data collection details. (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function setAppointmentFulfillmentData(
        string $service_job_id,
        string $appointment_id,
        SetAppointmentFulfillmentDataRequest $body
    ): string {
        list($response) = $this->setAppointmentFulfillmentDataWithHttpInfo($service_job_id, $appointment_id, $body);

        return $response;
    }

    /**
     * Operation setAppointmentFulfillmentDataWithHttpInfo.
     *
     * @param string                               $service_job_id
     *                                                             An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                               $appointment_id
     *                                                             An Amazon-defined identifier of active service job appointment. (required)
     * @param SetAppointmentFulfillmentDataRequest $body
     *                                                             Appointment fulfillment data collection details. (required)
     *
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function setAppointmentFulfillmentDataWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        SetAppointmentFulfillmentDataRequest $body
    ): array {
        $request = $this->setAppointmentFulfillmentDataRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->setAppointmentFulfillmentDataRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('string' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, 'string', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\Error[]',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation setAppointmentFulfillmentDataAsync.
     *
     * @param string                               $service_job_id
     *                                                             An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                               $appointment_id
     *                                                             An Amazon-defined identifier of active service job appointment. (required)
     * @param SetAppointmentFulfillmentDataRequest $body
     *                                                             Appointment fulfillment data collection details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function setAppointmentFulfillmentDataAsync(
        string $service_job_id,
        string $appointment_id,
        SetAppointmentFulfillmentDataRequest $body
    ): PromiseInterface {
        return $this->setAppointmentFulfillmentDataAsyncWithHttpInfo($service_job_id, $appointment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation setAppointmentFulfillmentDataAsyncWithHttpInfo.
     *
     * @param string                               $service_job_id
     *                                                             An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                               $appointment_id
     *                                                             An Amazon-defined identifier of active service job appointment. (required)
     * @param SetAppointmentFulfillmentDataRequest $body
     *                                                             Appointment fulfillment data collection details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function setAppointmentFulfillmentDataAsyncWithHttpInfo(
        string $service_job_id,
        string $appointment_id,
        SetAppointmentFulfillmentDataRequest $body
    ): PromiseInterface {
        $returnType = 'string';
        $request = $this->setAppointmentFulfillmentDataRequest($service_job_id, $appointment_id, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->setAppointmentFulfillmentDataRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'setAppointmentFulfillmentData'.
     *
     * @param string                               $service_job_id
     *                                                             An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
     * @param string                               $appointment_id
     *                                                             An Amazon-defined identifier of active service job appointment. (required)
     * @param SetAppointmentFulfillmentDataRequest $body
     *                                                             Appointment fulfillment data collection details. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function setAppointmentFulfillmentDataRequest(
        string $service_job_id,
        string $appointment_id,
        SetAppointmentFulfillmentDataRequest $body
    ): Request {
        // verify the required parameter 'service_job_id' is set
        if (null === $service_job_id || (is_array($service_job_id) && 0 === count($service_job_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_job_id when calling setAppointmentFulfillmentData'
            );
        }
        if (strlen($service_job_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.setAppointmentFulfillmentData, must be smaller than or equal to 100.');
        }
        if (strlen($service_job_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$service_job_id" when calling ServiceApi.setAppointmentFulfillmentData, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'appointment_id' is set
        if (null === $appointment_id || (is_array($appointment_id) && 0 === count($appointment_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $appointment_id when calling setAppointmentFulfillmentData'
            );
        }
        if (strlen($appointment_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.setAppointmentFulfillmentData, must be smaller than or equal to 100.');
        }
        if (strlen($appointment_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$appointment_id" when calling ServiceApi.setAppointmentFulfillmentData, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setAppointmentFulfillmentData'
            );
        }

        $resourcePath = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $service_job_id) {
            $resourcePath = str_replace(
                '{serviceJobId}',
                ObjectSerializer::toPathValue($service_job_id),
                $resourcePath
            );
        }
        // path params
        if (null !== $appointment_id) {
            $resourcePath = str_replace(
                '{appointmentId}',
                ObjectSerializer::toPathValue($appointment_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateReservation.
     *
     * @param string                   $reservation_id
     *                                                  Reservation Identifier (required)
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateReservation(
        string $reservation_id,
        array $marketplace_ids,
        UpdateReservationRequest $body
    ): UpdateReservationResponse {
        list($response) = $this->updateReservationWithHttpInfo($reservation_id, $marketplace_ids, $body);

        return $response;
    }

    /**
     * Operation updateReservationWithHttpInfo.
     *
     * @param string                   $reservation_id
     *                                                  Reservation Identifier (required)
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @return array of \SpApi\Model\services\v1\UpdateReservationResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateReservationWithHttpInfo(
        string $reservation_id,
        array $marketplace_ids,
        UpdateReservationRequest $body
    ): array {
        $request = $this->updateReservationRequest($reservation_id, $marketplace_ids, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->updateReservationRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\UpdateReservationResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\UpdateReservationResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\UpdateReservationResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\UpdateReservationResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation updateReservationAsync.
     *
     * @param string                   $reservation_id
     *                                                  Reservation Identifier (required)
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateReservationAsync(
        string $reservation_id,
        array $marketplace_ids,
        UpdateReservationRequest $body
    ): PromiseInterface {
        return $this->updateReservationAsyncWithHttpInfo($reservation_id, $marketplace_ids, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation updateReservationAsyncWithHttpInfo.
     *
     * @param string                   $reservation_id
     *                                                  Reservation Identifier (required)
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateReservationAsyncWithHttpInfo(
        string $reservation_id,
        array $marketplace_ids,
        UpdateReservationRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\UpdateReservationResponse';
        $request = $this->updateReservationRequest($reservation_id, $marketplace_ids, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->updateReservationRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'updateReservation'.
     *
     * @param string                   $reservation_id
     *                                                  Reservation Identifier (required)
     * @param string[]                 $marketplace_ids
     *                                                  An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateReservationRequest $body
     *                                                  Reservation details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateReservationRequest(
        string $reservation_id,
        array $marketplace_ids,
        UpdateReservationRequest $body
    ): Request {
        // verify the required parameter 'reservation_id' is set
        if (null === $reservation_id || (is_array($reservation_id) && 0 === count($reservation_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_id when calling updateReservation'
            );
        }
        if (strlen($reservation_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$reservation_id" when calling ServiceApi.updateReservation, must be smaller than or equal to 100.');
        }
        if (strlen($reservation_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$reservation_id" when calling ServiceApi.updateReservation, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling updateReservation'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.updateReservation, number of items must be less than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateReservation'
            );
        }

        $resourcePath = '/service/v1/reservation/{reservationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $reservation_id) {
            $resourcePath = str_replace(
                '{reservationId}',
                ObjectSerializer::toPathValue($reservation_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSchedule.
     *
     * @param string                $resource_id
     *                                               Resource (store) Identifier (required)
     * @param string[]              $marketplace_ids
     *                                               An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateScheduleRequest $body
     *                                               Schedule details (required)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateSchedule(
        string $resource_id,
        array $marketplace_ids,
        UpdateScheduleRequest $body
    ): UpdateScheduleResponse {
        list($response) = $this->updateScheduleWithHttpInfo($resource_id, $marketplace_ids, $body);

        return $response;
    }

    /**
     * Operation updateScheduleWithHttpInfo.
     *
     * @param string                $resource_id
     *                                               Resource (store) Identifier (required)
     * @param string[]              $marketplace_ids
     *                                               An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateScheduleRequest $body
     *                                               Schedule details (required)
     *
     * @return array of \SpApi\Model\services\v1\UpdateScheduleResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateScheduleWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        UpdateScheduleRequest $body
    ): array {
        $request = $this->updateScheduleRequest($resource_id, $marketplace_ids, $body);
        $request = $this->config->sign($request);

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->updateScheduleRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\services\v1\UpdateScheduleResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\services\v1\UpdateScheduleResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\services\v1\UpdateScheduleResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\services\v1\UpdateScheduleResponse',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation updateScheduleAsync.
     *
     * @param string                $resource_id
     *                                               Resource (store) Identifier (required)
     * @param string[]              $marketplace_ids
     *                                               An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateScheduleRequest $body
     *                                               Schedule details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateScheduleAsync(
        string $resource_id,
        array $marketplace_ids,
        UpdateScheduleRequest $body
    ): PromiseInterface {
        return $this->updateScheduleAsyncWithHttpInfo($resource_id, $marketplace_ids, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation updateScheduleAsyncWithHttpInfo.
     *
     * @param string                $resource_id
     *                                               Resource (store) Identifier (required)
     * @param string[]              $marketplace_ids
     *                                               An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateScheduleRequest $body
     *                                               Schedule details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateScheduleAsyncWithHttpInfo(
        string $resource_id,
        array $marketplace_ids,
        UpdateScheduleRequest $body
    ): PromiseInterface {
        $returnType = '\SpApi\Model\services\v1\UpdateScheduleResponse';
        $request = $this->updateScheduleRequest($resource_id, $marketplace_ids, $body);
        $request = $this->config->sign($request);
        if ($this->rateLimiterEnabled) {
            $this->updateScheduleRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'updateSchedule'.
     *
     * @param string                $resource_id
     *                                               Resource (store) Identifier (required)
     * @param string[]              $marketplace_ids
     *                                               An identifier for the marketplace in which the resource operates. (required)
     * @param UpdateScheduleRequest $body
     *                                               Schedule details (required)
     *
     * @throws \InvalidArgumentException
     */
    public function updateScheduleRequest(
        string $resource_id,
        array $marketplace_ids,
        UpdateScheduleRequest $body
    ): Request {
        // verify the required parameter 'resource_id' is set
        if (null === $resource_id || (is_array($resource_id) && 0 === count($resource_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_id when calling updateSchedule'
            );
        }
        if (strlen($resource_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.updateSchedule, must be smaller than or equal to 100.');
        }
        if (strlen($resource_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$resource_id" when calling ServiceApi.updateSchedule, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_ids' is set
        if (null === $marketplace_ids || (is_array($marketplace_ids) && 0 === count($marketplace_ids))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_ids when calling updateSchedule'
            );
        }
        if (count($marketplace_ids) > 1) {
            throw new \InvalidArgumentException('invalid value for "$marketplace_ids" when calling ServiceApi.updateSchedule, number of items must be less than or equal to 1.');
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateSchedule'
            );
        }

        $resourcePath = '/service/v1/serviceResources/{resourceId}/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_ids,
            'marketplaceIds', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $resource_id) {
            $resourcePath = str_replace(
                '{resourceId}',
                ObjectSerializer::toPathValue($resource_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            'application/json',
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
