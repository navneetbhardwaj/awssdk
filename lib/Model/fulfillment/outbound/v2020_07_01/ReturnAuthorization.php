<?php

/**
 * ReturnAuthorization.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner APIs for Fulfillment Outbound.
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\fulfillment\outbound\v2020_07_01;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * ReturnAuthorization Class Doc Comment.
 *
 * @category Class
 *
 * @description Return authorization information for items accepted for return.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ReturnAuthorization implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ReturnAuthorization';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'return_authorization_id' => 'string',
        'fulfillment_center_id' => 'string',
        'return_to_address' => '\SpApi\Model\fulfillment\outbound\v2020_07_01\Address',
        'amazon_rma_id' => 'string',
        'rma_page_url' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'return_authorization_id' => null,
        'fulfillment_center_id' => null,
        'return_to_address' => null,
        'amazon_rma_id' => null,
        'rma_page_url' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'return_authorization_id' => false,
        'fulfillment_center_id' => false,
        'return_to_address' => false,
        'amazon_rma_id' => false,
        'rma_page_url' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'return_authorization_id' => 'returnAuthorizationId',
        'fulfillment_center_id' => 'fulfillmentCenterId',
        'return_to_address' => 'returnToAddress',
        'amazon_rma_id' => 'amazonRmaId',
        'rma_page_url' => 'rmaPageURL',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'return_authorization_id' => 'setReturnAuthorizationId',
        'fulfillment_center_id' => 'setFulfillmentCenterId',
        'return_to_address' => 'setReturnToAddress',
        'amazon_rma_id' => 'setAmazonRmaId',
        'rma_page_url' => 'setRmaPageUrl',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'return_authorization_id' => 'getReturnAuthorizationId',
        'fulfillment_center_id' => 'getFulfillmentCenterId',
        'return_to_address' => 'getReturnToAddress',
        'amazon_rma_id' => 'getAmazonRmaId',
        'rma_page_url' => 'getRmaPageUrl',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('return_authorization_id', $data ?? [], null);
        $this->setIfExists('fulfillment_center_id', $data ?? [], null);
        $this->setIfExists('return_to_address', $data ?? [], null);
        $this->setIfExists('amazon_rma_id', $data ?? [], null);
        $this->setIfExists('rma_page_url', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['return_authorization_id']) {
            $invalidProperties[] = "'return_authorization_id' can't be null";
        }
        if (null === $this->container['fulfillment_center_id']) {
            $invalidProperties[] = "'fulfillment_center_id' can't be null";
        }
        if (null === $this->container['return_to_address']) {
            $invalidProperties[] = "'return_to_address' can't be null";
        }
        if (null === $this->container['amazon_rma_id']) {
            $invalidProperties[] = "'amazon_rma_id' can't be null";
        }
        if (null === $this->container['rma_page_url']) {
            $invalidProperties[] = "'rma_page_url' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets return_authorization_id.
     */
    public function getReturnAuthorizationId(): string
    {
        return $this->container['return_authorization_id'];
    }

    /**
     * Sets return_authorization_id.
     *
     * @param string $return_authorization_id An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
     */
    public function setReturnAuthorizationId(string $return_authorization_id): self
    {
        if (is_null($return_authorization_id)) {
            throw new \InvalidArgumentException('non-nullable return_authorization_id cannot be null');
        }
        $this->container['return_authorization_id'] = $return_authorization_id;

        return $this;
    }

    /**
     * Gets fulfillment_center_id.
     */
    public function getFulfillmentCenterId(): string
    {
        return $this->container['fulfillment_center_id'];
    }

    /**
     * Sets fulfillment_center_id.
     *
     * @param string $fulfillment_center_id an identifier for the Amazon fulfillment center that the return items should be sent to
     */
    public function setFulfillmentCenterId(string $fulfillment_center_id): self
    {
        if (is_null($fulfillment_center_id)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_center_id cannot be null');
        }
        $this->container['fulfillment_center_id'] = $fulfillment_center_id;

        return $this;
    }

    /**
     * Gets return_to_address.
     */
    public function getReturnToAddress(): Address
    {
        return $this->container['return_to_address'];
    }

    /**
     * Sets return_to_address.
     *
     * @param Address $return_to_address return_to_address
     */
    public function setReturnToAddress(Address $return_to_address): self
    {
        if (is_null($return_to_address)) {
            throw new \InvalidArgumentException('non-nullable return_to_address cannot be null');
        }
        $this->container['return_to_address'] = $return_to_address;

        return $this;
    }

    /**
     * Gets amazon_rma_id.
     */
    public function getAmazonRmaId(): string
    {
        return $this->container['amazon_rma_id'];
    }

    /**
     * Sets amazon_rma_id.
     *
     * @param string $amazon_rma_id the return merchandise authorization (RMA) that Amazon needs to process the return
     */
    public function setAmazonRmaId(string $amazon_rma_id): self
    {
        if (is_null($amazon_rma_id)) {
            throw new \InvalidArgumentException('non-nullable amazon_rma_id cannot be null');
        }
        $this->container['amazon_rma_id'] = $amazon_rma_id;

        return $this;
    }

    /**
     * Gets rma_page_url.
     */
    public function getRmaPageUrl(): string
    {
        return $this->container['rma_page_url'];
    }

    /**
     * Sets rma_page_url.
     *
     * @param string $rma_page_url A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
     */
    public function setRmaPageUrl(string $rma_page_url): self
    {
        if (is_null($rma_page_url)) {
            throw new \InvalidArgumentException('non-nullable rma_page_url cannot be null');
        }
        $this->container['rma_page_url'] = $rma_page_url;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
