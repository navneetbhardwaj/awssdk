<?php

/**
 * BoxUpdateInput.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\fulfillment\inbound\v2024_03_20;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * BoxUpdateInput Class Doc Comment.
 *
 * @category Class
 *
 * @description Input information for updating a box
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class BoxUpdateInput implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'BoxUpdateInput';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'content_information_source' => '\SpApi\Model\fulfillment\inbound\v2024_03_20\BoxContentInformationSource',
        'dimensions' => '\SpApi\Model\fulfillment\inbound\v2024_03_20\Dimensions',
        'items' => '\SpApi\Model\fulfillment\inbound\v2024_03_20\ItemInput[]',
        'package_id' => 'string',
        'quantity' => 'int',
        'weight' => '\SpApi\Model\fulfillment\inbound\v2024_03_20\Weight'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'content_information_source' => null,
        'dimensions' => null,
        'items' => null,
        'package_id' => null,
        'quantity' => null,
        'weight' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'content_information_source' => false,
        'dimensions' => false,
        'items' => true,
        'package_id' => true,
        'quantity' => false,
        'weight' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'content_information_source' => 'contentInformationSource',
        'dimensions' => 'dimensions',
        'items' => 'items',
        'package_id' => 'packageId',
        'quantity' => 'quantity',
        'weight' => 'weight',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'content_information_source' => 'setContentInformationSource',
        'dimensions' => 'setDimensions',
        'items' => 'setItems',
        'package_id' => 'setPackageId',
        'quantity' => 'setQuantity',
        'weight' => 'setWeight',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'content_information_source' => 'getContentInformationSource',
        'dimensions' => 'getDimensions',
        'items' => 'getItems',
        'package_id' => 'getPackageId',
        'quantity' => 'getQuantity',
        'weight' => 'getWeight',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('content_information_source', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('package_id', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['content_information_source']) {
            $invalidProperties[] = "'content_information_source' can't be null";
        }
        if (null === $this->container['dimensions']) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if (!is_null($this->container['package_id']) && (mb_strlen($this->container['package_id']) > 38)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be smaller than or equal to 38.";
        }

        if (!is_null($this->container['package_id']) && (mb_strlen($this->container['package_id']) < 38)) {
            $invalidProperties[] = "invalid value for 'package_id', the character length must be bigger than or equal to 38.";
        }

        if (!is_null($this->container['package_id']) && !preg_match('/^[a-zA-Z0-9-]*$/', $this->container['package_id'])) {
            $invalidProperties[] = "invalid value for 'package_id', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if (null === $this->container['quantity']) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['quantity'] > 10000) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 10000.";
        }

        if ($this->container['quantity'] < 1) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if (null === $this->container['weight']) {
            $invalidProperties[] = "'weight' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets content_information_source.
     */
    public function getContentInformationSource(): string
    {
        return $this->container['content_information_source'];
    }

    /**
     * Sets content_information_source.
     *
     * @param string $content_information_source content_information_source
     */
    public function setContentInformationSource(string $content_information_source): self
    {
        if (is_null($content_information_source)) {
            throw new \InvalidArgumentException('non-nullable content_information_source cannot be null');
        }
        $this->container['content_information_source'] = $content_information_source;

        return $this;
    }

    /**
     * Gets dimensions.
     */
    public function getDimensions(): Dimensions
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions.
     *
     * @param Dimensions $dimensions dimensions
     */
    public function setDimensions(Dimensions $dimensions): self
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets items.
     */
    public function getItems(): ?array
    {
        return $this->container['items'];
    }

    /**
     * Sets items.
     *
     * @param null|array $items The items and their quantity in the box. This must be empty if the box `contentInformationSource` is `BARCODE_2D` or `MANUAL_PROCESS`.
     */
    public function setItems(?array $items): self
    {
        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets package_id.
     */
    public function getPackageId(): ?string
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id.
     *
     * @param null|string $package_id Primary key to uniquely identify a Box Package. PackageId must be provided if the intent is to update an existing box. Adding a new box will not require providing this value. Any existing PackageIds not provided will be treated as to-be-removed
     */
    public function setPackageId(?string $package_id): self
    {
        if (is_null($package_id)) {
            array_push($this->openAPINullablesSetToNull, 'package_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('package_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($package_id) && (mb_strlen($package_id) > 38)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling BoxUpdateInput., must be smaller than or equal to 38.');
        }
        if (!is_null($package_id) && (mb_strlen($package_id) < 38)) {
            throw new \InvalidArgumentException('invalid length for $package_id when calling BoxUpdateInput., must be bigger than or equal to 38.');
        }
        if (!is_null($package_id) && (!preg_match('/^[a-zA-Z0-9-]*$/', ObjectSerializer::toString($package_id)))) {
            throw new \InvalidArgumentException('invalid value for $package_id when calling BoxUpdateInput., must conform to the pattern /^[a-zA-Z0-9-]*$/.');
        }

        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets quantity.
     */
    public function getQuantity(): int
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity.
     *
     * @param int $quantity the number of containers where all other properties like weight or dimensions are identical
     */
    public function setQuantity(int $quantity): self
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        if ($quantity > 10000) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling BoxUpdateInput., must be smaller than or equal to 10000.');
        }
        if ($quantity < 1) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling BoxUpdateInput., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets weight.
     */
    public function getWeight(): Weight
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight.
     *
     * @param Weight $weight weight
     */
    public function setWeight(Weight $weight): self
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
