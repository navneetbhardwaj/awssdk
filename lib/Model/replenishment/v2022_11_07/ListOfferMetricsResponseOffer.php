<?php

/**
 * ListOfferMetricsResponseOffer.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Replenishment.
 *
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\replenishment\v2022_11_07;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * ListOfferMetricsResponseOffer Class Doc Comment.
 *
 * @category Class
 *
 * @description An object which contains offer metrics.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class ListOfferMetricsResponseOffer implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ListOfferMetricsResponseOffer';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'asin' => 'string',
        'not_delivered_due_to_oos' => 'float',
        'total_subscriptions_revenue' => 'float',
        'shipped_subscription_units' => 'float',
        'active_subscriptions' => 'float',
        'revenue_penetration' => 'float',
        'lost_revenue_due_to_oos' => 'float',
        'coupons_revenue_penetration' => 'float',
        'share_of_coupon_subscriptions' => 'float',
        'next30_day_total_subscriptions_revenue' => 'float',
        'next60_day_total_subscriptions_revenue' => 'float',
        'next90_day_total_subscriptions_revenue' => 'float',
        'next30_day_shipped_subscription_units' => 'float',
        'next60_day_shipped_subscription_units' => 'float',
        'next90_day_shipped_subscription_units' => 'float',
        'time_interval' => '\SpApi\Model\replenishment\v2022_11_07\TimeInterval',
        'currency_code' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'asin' => null,
        'not_delivered_due_to_oos' => 'double',
        'total_subscriptions_revenue' => 'double',
        'shipped_subscription_units' => 'int64',
        'active_subscriptions' => 'int64',
        'revenue_penetration' => 'double',
        'lost_revenue_due_to_oos' => 'double',
        'coupons_revenue_penetration' => 'double',
        'share_of_coupon_subscriptions' => 'double',
        'next30_day_total_subscriptions_revenue' => 'double',
        'next60_day_total_subscriptions_revenue' => 'double',
        'next90_day_total_subscriptions_revenue' => 'double',
        'next30_day_shipped_subscription_units' => 'int64',
        'next60_day_shipped_subscription_units' => 'int64',
        'next90_day_shipped_subscription_units' => 'int64',
        'time_interval' => null,
        'currency_code' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'asin' => true,
        'not_delivered_due_to_oos' => true,
        'total_subscriptions_revenue' => true,
        'shipped_subscription_units' => true,
        'active_subscriptions' => true,
        'revenue_penetration' => true,
        'lost_revenue_due_to_oos' => true,
        'coupons_revenue_penetration' => true,
        'share_of_coupon_subscriptions' => true,
        'next30_day_total_subscriptions_revenue' => true,
        'next60_day_total_subscriptions_revenue' => true,
        'next90_day_total_subscriptions_revenue' => true,
        'next30_day_shipped_subscription_units' => true,
        'next60_day_shipped_subscription_units' => true,
        'next90_day_shipped_subscription_units' => true,
        'time_interval' => true,
        'currency_code' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'asin' => 'asin',
        'not_delivered_due_to_oos' => 'notDeliveredDueToOOS',
        'total_subscriptions_revenue' => 'totalSubscriptionsRevenue',
        'shipped_subscription_units' => 'shippedSubscriptionUnits',
        'active_subscriptions' => 'activeSubscriptions',
        'revenue_penetration' => 'revenuePenetration',
        'lost_revenue_due_to_oos' => 'lostRevenueDueToOOS',
        'coupons_revenue_penetration' => 'couponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'shareOfCouponSubscriptions',
        'next30_day_total_subscriptions_revenue' => 'next30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'next60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'next90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'next30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'next60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'next90DayShippedSubscriptionUnits',
        'time_interval' => 'timeInterval',
        'currency_code' => 'currencyCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'asin' => 'setAsin',
        'not_delivered_due_to_oos' => 'setNotDeliveredDueToOos',
        'total_subscriptions_revenue' => 'setTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'setShippedSubscriptionUnits',
        'active_subscriptions' => 'setActiveSubscriptions',
        'revenue_penetration' => 'setRevenuePenetration',
        'lost_revenue_due_to_oos' => 'setLostRevenueDueToOos',
        'coupons_revenue_penetration' => 'setCouponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'setShareOfCouponSubscriptions',
        'next30_day_total_subscriptions_revenue' => 'setNext30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'setNext60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'setNext90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'setNext30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'setNext60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'setNext90DayShippedSubscriptionUnits',
        'time_interval' => 'setTimeInterval',
        'currency_code' => 'setCurrencyCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'asin' => 'getAsin',
        'not_delivered_due_to_oos' => 'getNotDeliveredDueToOos',
        'total_subscriptions_revenue' => 'getTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'getShippedSubscriptionUnits',
        'active_subscriptions' => 'getActiveSubscriptions',
        'revenue_penetration' => 'getRevenuePenetration',
        'lost_revenue_due_to_oos' => 'getLostRevenueDueToOos',
        'coupons_revenue_penetration' => 'getCouponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'getShareOfCouponSubscriptions',
        'next30_day_total_subscriptions_revenue' => 'getNext30DayTotalSubscriptionsRevenue',
        'next60_day_total_subscriptions_revenue' => 'getNext60DayTotalSubscriptionsRevenue',
        'next90_day_total_subscriptions_revenue' => 'getNext90DayTotalSubscriptionsRevenue',
        'next30_day_shipped_subscription_units' => 'getNext30DayShippedSubscriptionUnits',
        'next60_day_shipped_subscription_units' => 'getNext60DayShippedSubscriptionUnits',
        'next90_day_shipped_subscription_units' => 'getNext90DayShippedSubscriptionUnits',
        'time_interval' => 'getTimeInterval',
        'currency_code' => 'getCurrencyCode',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('asin', $data ?? [], null);
        $this->setIfExists('not_delivered_due_to_oos', $data ?? [], null);
        $this->setIfExists('total_subscriptions_revenue', $data ?? [], null);
        $this->setIfExists('shipped_subscription_units', $data ?? [], null);
        $this->setIfExists('active_subscriptions', $data ?? [], null);
        $this->setIfExists('revenue_penetration', $data ?? [], null);
        $this->setIfExists('lost_revenue_due_to_oos', $data ?? [], null);
        $this->setIfExists('coupons_revenue_penetration', $data ?? [], null);
        $this->setIfExists('share_of_coupon_subscriptions', $data ?? [], null);
        $this->setIfExists('next30_day_total_subscriptions_revenue', $data ?? [], null);
        $this->setIfExists('next60_day_total_subscriptions_revenue', $data ?? [], null);
        $this->setIfExists('next90_day_total_subscriptions_revenue', $data ?? [], null);
        $this->setIfExists('next30_day_shipped_subscription_units', $data ?? [], null);
        $this->setIfExists('next60_day_shipped_subscription_units', $data ?? [], null);
        $this->setIfExists('next90_day_shipped_subscription_units', $data ?? [], null);
        $this->setIfExists('time_interval', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['not_delivered_due_to_oos']) && ($this->container['not_delivered_due_to_oos'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'not_delivered_due_to_oos', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['not_delivered_due_to_oos']) && ($this->container['not_delivered_due_to_oos'] < 0)) {
            $invalidProperties[] = "invalid value for 'not_delivered_due_to_oos', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['total_subscriptions_revenue']) && ($this->container['total_subscriptions_revenue'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_subscriptions_revenue', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipped_subscription_units']) && ($this->container['shipped_subscription_units'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipped_subscription_units', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['active_subscriptions']) && ($this->container['active_subscriptions'] < 0)) {
            $invalidProperties[] = "invalid value for 'active_subscriptions', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['revenue_penetration']) && ($this->container['revenue_penetration'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'revenue_penetration', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['revenue_penetration']) && ($this->container['revenue_penetration'] < 0)) {
            $invalidProperties[] = "invalid value for 'revenue_penetration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lost_revenue_due_to_oos']) && ($this->container['lost_revenue_due_to_oos'] < 0)) {
            $invalidProperties[] = "invalid value for 'lost_revenue_due_to_oos', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['coupons_revenue_penetration']) && ($this->container['coupons_revenue_penetration'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'coupons_revenue_penetration', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['coupons_revenue_penetration']) && ($this->container['coupons_revenue_penetration'] < 0)) {
            $invalidProperties[] = "invalid value for 'coupons_revenue_penetration', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['share_of_coupon_subscriptions']) && ($this->container['share_of_coupon_subscriptions'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'share_of_coupon_subscriptions', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['share_of_coupon_subscriptions']) && ($this->container['share_of_coupon_subscriptions'] < 0)) {
            $invalidProperties[] = "invalid value for 'share_of_coupon_subscriptions', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next30_day_total_subscriptions_revenue']) && ($this->container['next30_day_total_subscriptions_revenue'] < 0)) {
            $invalidProperties[] = "invalid value for 'next30_day_total_subscriptions_revenue', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next60_day_total_subscriptions_revenue']) && ($this->container['next60_day_total_subscriptions_revenue'] < 0)) {
            $invalidProperties[] = "invalid value for 'next60_day_total_subscriptions_revenue', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next90_day_total_subscriptions_revenue']) && ($this->container['next90_day_total_subscriptions_revenue'] < 0)) {
            $invalidProperties[] = "invalid value for 'next90_day_total_subscriptions_revenue', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next30_day_shipped_subscription_units']) && ($this->container['next30_day_shipped_subscription_units'] < 0)) {
            $invalidProperties[] = "invalid value for 'next30_day_shipped_subscription_units', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next60_day_shipped_subscription_units']) && ($this->container['next60_day_shipped_subscription_units'] < 0)) {
            $invalidProperties[] = "invalid value for 'next60_day_shipped_subscription_units', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['next90_day_shipped_subscription_units']) && ($this->container['next90_day_shipped_subscription_units'] < 0)) {
            $invalidProperties[] = "invalid value for 'next90_day_shipped_subscription_units', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets asin.
     */
    public function getAsin(): ?string
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin.
     *
     * @param null|string $asin the Amazon Standard Identification Number (ASIN)
     */
    public function setAsin(?string $asin): self
    {
        if (is_null($asin)) {
            array_push($this->openAPINullablesSetToNull, 'asin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asin', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets not_delivered_due_to_oos.
     */
    public function getNotDeliveredDueToOos(): ?float
    {
        return $this->container['not_delivered_due_to_oos'];
    }

    /**
     * Sets not_delivered_due_to_oos.
     *
     * @param null|float $not_delivered_due_to_oos The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable to PERFORMANCE timePeriodType.
     */
    public function setNotDeliveredDueToOos(?float $not_delivered_due_to_oos): self
    {
        if (is_null($not_delivered_due_to_oos)) {
            array_push($this->openAPINullablesSetToNull, 'not_delivered_due_to_oos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('not_delivered_due_to_oos', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($not_delivered_due_to_oos) && ($not_delivered_due_to_oos > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $not_delivered_due_to_oos when calling ListOfferMetricsResponseOffer., must be smaller than or equal to 1E+2.');
        }
        if (!is_null($not_delivered_due_to_oos) && ($not_delivered_due_to_oos < 0)) {
            throw new \InvalidArgumentException('invalid value for $not_delivered_due_to_oos when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['not_delivered_due_to_oos'] = $not_delivered_due_to_oos;

        return $this;
    }

    /**
     * Gets total_subscriptions_revenue.
     */
    public function getTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['total_subscriptions_revenue'];
    }

    /**
     * Sets total_subscriptions_revenue.
     *
     * @param null|float $total_subscriptions_revenue The revenue generated from subscriptions over a period of time. Applicable to PERFORMANCE timePeriodType.
     */
    public function setTotalSubscriptionsRevenue(?float $total_subscriptions_revenue): self
    {
        if (is_null($total_subscriptions_revenue)) {
            array_push($this->openAPINullablesSetToNull, 'total_subscriptions_revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_subscriptions_revenue', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($total_subscriptions_revenue) && ($total_subscriptions_revenue < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_subscriptions_revenue when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['total_subscriptions_revenue'] = $total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets shipped_subscription_units.
     */
    public function getShippedSubscriptionUnits(): ?float
    {
        return $this->container['shipped_subscription_units'];
    }

    /**
     * Sets shipped_subscription_units.
     *
     * @param null|float $shipped_subscription_units The number of units shipped to the subscribers over a period of time. Applicable to PERFORMANCE timePeriodType.
     */
    public function setShippedSubscriptionUnits(?float $shipped_subscription_units): self
    {
        if (is_null($shipped_subscription_units)) {
            array_push($this->openAPINullablesSetToNull, 'shipped_subscription_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipped_subscription_units', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($shipped_subscription_units) && ($shipped_subscription_units < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipped_subscription_units when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['shipped_subscription_units'] = $shipped_subscription_units;

        return $this;
    }

    /**
     * Gets active_subscriptions.
     */
    public function getActiveSubscriptions(): ?float
    {
        return $this->container['active_subscriptions'];
    }

    /**
     * Sets active_subscriptions.
     *
     * @param null|float $active_subscriptions The number of active subscriptions present at the end of the period. Applicable to PERFORMANCE timePeriodType.
     */
    public function setActiveSubscriptions(?float $active_subscriptions): self
    {
        if (is_null($active_subscriptions)) {
            array_push($this->openAPINullablesSetToNull, 'active_subscriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_subscriptions', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($active_subscriptions) && ($active_subscriptions < 0)) {
            throw new \InvalidArgumentException('invalid value for $active_subscriptions when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['active_subscriptions'] = $active_subscriptions;

        return $this;
    }

    /**
     * Gets revenue_penetration.
     */
    public function getRevenuePenetration(): ?float
    {
        return $this->container['revenue_penetration'];
    }

    /**
     * Sets revenue_penetration.
     *
     * @param null|float $revenue_penetration The percentage of total program revenue out of total product revenue. Applicable to PERFORMANCE timePeriodType.
     */
    public function setRevenuePenetration(?float $revenue_penetration): self
    {
        if (is_null($revenue_penetration)) {
            array_push($this->openAPINullablesSetToNull, 'revenue_penetration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revenue_penetration', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($revenue_penetration) && ($revenue_penetration > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $revenue_penetration when calling ListOfferMetricsResponseOffer., must be smaller than or equal to 1E+2.');
        }
        if (!is_null($revenue_penetration) && ($revenue_penetration < 0)) {
            throw new \InvalidArgumentException('invalid value for $revenue_penetration when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['revenue_penetration'] = $revenue_penetration;

        return $this;
    }

    /**
     * Gets lost_revenue_due_to_oos.
     */
    public function getLostRevenueDueToOos(): ?float
    {
        return $this->container['lost_revenue_due_to_oos'];
    }

    /**
     * Sets lost_revenue_due_to_oos.
     *
     * @param null|float $lost_revenue_due_to_oos The revenue that would have been generated had there not been out of stock. Applicable to PERFORMANCE timePeriodType.
     */
    public function setLostRevenueDueToOos(?float $lost_revenue_due_to_oos): self
    {
        if (is_null($lost_revenue_due_to_oos)) {
            array_push($this->openAPINullablesSetToNull, 'lost_revenue_due_to_oos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lost_revenue_due_to_oos', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($lost_revenue_due_to_oos) && ($lost_revenue_due_to_oos < 0)) {
            throw new \InvalidArgumentException('invalid value for $lost_revenue_due_to_oos when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['lost_revenue_due_to_oos'] = $lost_revenue_due_to_oos;

        return $this;
    }

    /**
     * Gets coupons_revenue_penetration.
     */
    public function getCouponsRevenuePenetration(): ?float
    {
        return $this->container['coupons_revenue_penetration'];
    }

    /**
     * Sets coupons_revenue_penetration.
     *
     * @param null|float $coupons_revenue_penetration The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable to PERFORMANCE timePeriodType.
     */
    public function setCouponsRevenuePenetration(?float $coupons_revenue_penetration): self
    {
        if (is_null($coupons_revenue_penetration)) {
            array_push($this->openAPINullablesSetToNull, 'coupons_revenue_penetration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coupons_revenue_penetration', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($coupons_revenue_penetration) && ($coupons_revenue_penetration > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $coupons_revenue_penetration when calling ListOfferMetricsResponseOffer., must be smaller than or equal to 1E+2.');
        }
        if (!is_null($coupons_revenue_penetration) && ($coupons_revenue_penetration < 0)) {
            throw new \InvalidArgumentException('invalid value for $coupons_revenue_penetration when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['coupons_revenue_penetration'] = $coupons_revenue_penetration;

        return $this;
    }

    /**
     * Gets share_of_coupon_subscriptions.
     */
    public function getShareOfCouponSubscriptions(): ?float
    {
        return $this->container['share_of_coupon_subscriptions'];
    }

    /**
     * Sets share_of_coupon_subscriptions.
     *
     * @param null|float $share_of_coupon_subscriptions The percentage of new subscriptions acquired through coupons. Applicable to PERFORMANCE timePeriodType.
     */
    public function setShareOfCouponSubscriptions(?float $share_of_coupon_subscriptions): self
    {
        if (is_null($share_of_coupon_subscriptions)) {
            array_push($this->openAPINullablesSetToNull, 'share_of_coupon_subscriptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('share_of_coupon_subscriptions', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($share_of_coupon_subscriptions) && ($share_of_coupon_subscriptions > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $share_of_coupon_subscriptions when calling ListOfferMetricsResponseOffer., must be smaller than or equal to 1E+2.');
        }
        if (!is_null($share_of_coupon_subscriptions) && ($share_of_coupon_subscriptions < 0)) {
            throw new \InvalidArgumentException('invalid value for $share_of_coupon_subscriptions when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['share_of_coupon_subscriptions'] = $share_of_coupon_subscriptions;

        return $this;
    }

    /**
     * Gets next30_day_total_subscriptions_revenue.
     */
    public function getNext30DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next30_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next30_day_total_subscriptions_revenue.
     *
     * @param null|float $next30_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 30 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext30DayTotalSubscriptionsRevenue(?float $next30_day_total_subscriptions_revenue): self
    {
        if (is_null($next30_day_total_subscriptions_revenue)) {
            array_push($this->openAPINullablesSetToNull, 'next30_day_total_subscriptions_revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next30_day_total_subscriptions_revenue', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next30_day_total_subscriptions_revenue) && ($next30_day_total_subscriptions_revenue < 0)) {
            throw new \InvalidArgumentException('invalid value for $next30_day_total_subscriptions_revenue when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next30_day_total_subscriptions_revenue'] = $next30_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next60_day_total_subscriptions_revenue.
     */
    public function getNext60DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next60_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next60_day_total_subscriptions_revenue.
     *
     * @param null|float $next60_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 60 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext60DayTotalSubscriptionsRevenue(?float $next60_day_total_subscriptions_revenue): self
    {
        if (is_null($next60_day_total_subscriptions_revenue)) {
            array_push($this->openAPINullablesSetToNull, 'next60_day_total_subscriptions_revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next60_day_total_subscriptions_revenue', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next60_day_total_subscriptions_revenue) && ($next60_day_total_subscriptions_revenue < 0)) {
            throw new \InvalidArgumentException('invalid value for $next60_day_total_subscriptions_revenue when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next60_day_total_subscriptions_revenue'] = $next60_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next90_day_total_subscriptions_revenue.
     */
    public function getNext90DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next90_day_total_subscriptions_revenue'];
    }

    /**
     * Sets next90_day_total_subscriptions_revenue.
     *
     * @param null|float $next90_day_total_subscriptions_revenue The forecasted total subscription revenue for the next 90 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext90DayTotalSubscriptionsRevenue(?float $next90_day_total_subscriptions_revenue): self
    {
        if (is_null($next90_day_total_subscriptions_revenue)) {
            array_push($this->openAPINullablesSetToNull, 'next90_day_total_subscriptions_revenue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next90_day_total_subscriptions_revenue', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next90_day_total_subscriptions_revenue) && ($next90_day_total_subscriptions_revenue < 0)) {
            throw new \InvalidArgumentException('invalid value for $next90_day_total_subscriptions_revenue when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next90_day_total_subscriptions_revenue'] = $next90_day_total_subscriptions_revenue;

        return $this;
    }

    /**
     * Gets next30_day_shipped_subscription_units.
     */
    public function getNext30DayShippedSubscriptionUnits(): ?float
    {
        return $this->container['next30_day_shipped_subscription_units'];
    }

    /**
     * Sets next30_day_shipped_subscription_units.
     *
     * @param null|float $next30_day_shipped_subscription_units The forecasted shipped subscription units for the next 30 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext30DayShippedSubscriptionUnits(?float $next30_day_shipped_subscription_units): self
    {
        if (is_null($next30_day_shipped_subscription_units)) {
            array_push($this->openAPINullablesSetToNull, 'next30_day_shipped_subscription_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next30_day_shipped_subscription_units', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next30_day_shipped_subscription_units) && ($next30_day_shipped_subscription_units < 0)) {
            throw new \InvalidArgumentException('invalid value for $next30_day_shipped_subscription_units when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next30_day_shipped_subscription_units'] = $next30_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets next60_day_shipped_subscription_units.
     */
    public function getNext60DayShippedSubscriptionUnits(): ?float
    {
        return $this->container['next60_day_shipped_subscription_units'];
    }

    /**
     * Sets next60_day_shipped_subscription_units.
     *
     * @param null|float $next60_day_shipped_subscription_units The forecasted shipped subscription units for the next 60 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext60DayShippedSubscriptionUnits(?float $next60_day_shipped_subscription_units): self
    {
        if (is_null($next60_day_shipped_subscription_units)) {
            array_push($this->openAPINullablesSetToNull, 'next60_day_shipped_subscription_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next60_day_shipped_subscription_units', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next60_day_shipped_subscription_units) && ($next60_day_shipped_subscription_units < 0)) {
            throw new \InvalidArgumentException('invalid value for $next60_day_shipped_subscription_units when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next60_day_shipped_subscription_units'] = $next60_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets next90_day_shipped_subscription_units.
     */
    public function getNext90DayShippedSubscriptionUnits(): ?float
    {
        return $this->container['next90_day_shipped_subscription_units'];
    }

    /**
     * Sets next90_day_shipped_subscription_units.
     *
     * @param null|float $next90_day_shipped_subscription_units The forecasted shipped subscription units for the next 90 days. Applicable to FORECAST timePeriodType.
     */
    public function setNext90DayShippedSubscriptionUnits(?float $next90_day_shipped_subscription_units): self
    {
        if (is_null($next90_day_shipped_subscription_units)) {
            array_push($this->openAPINullablesSetToNull, 'next90_day_shipped_subscription_units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next90_day_shipped_subscription_units', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($next90_day_shipped_subscription_units) && ($next90_day_shipped_subscription_units < 0)) {
            throw new \InvalidArgumentException('invalid value for $next90_day_shipped_subscription_units when calling ListOfferMetricsResponseOffer., must be bigger than or equal to 0.');
        }

        $this->container['next90_day_shipped_subscription_units'] = $next90_day_shipped_subscription_units;

        return $this;
    }

    /**
     * Gets time_interval.
     */
    public function getTimeInterval(): ?TimeInterval
    {
        return $this->container['time_interval'];
    }

    /**
     * Sets time_interval.
     *
     * @param null|TimeInterval $time_interval time_interval
     */
    public function setTimeInterval(?TimeInterval $time_interval): self
    {
        if (is_null($time_interval)) {
            array_push($this->openAPINullablesSetToNull, 'time_interval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_interval', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_interval'] = $time_interval;

        return $this;
    }

    /**
     * Gets currency_code.
     */
    public function getCurrencyCode(): ?string
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code.
     *
     * @param null|string $currency_code the currency code in ISO 4217 format
     */
    public function setCurrencyCode(?string $currency_code): self
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
