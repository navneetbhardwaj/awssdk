<?php
/**
 * OrderAcknowledgementItem
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vendor\orders\v1;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * OrderAcknowledgementItem Class Doc Comment
 *
 * @category Class
 * @description Details of the item being acknowledged.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderAcknowledgementItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderAcknowledgementItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'item_sequence_number' => 'string',
             'amazon_product_identifier' => 'string',
             'vendor_product_identifier' => 'string',
             'ordered_quantity' => '\SpApi\Model\vendor\orders\v1\ItemQuantity',
             'net_cost' => '\SpApi\Model\vendor\orders\v1\Money',
             'list_price' => '\SpApi\Model\vendor\orders\v1\Money',
             'discount_multiplier' => 'string',
             'item_acknowledgements' => '\SpApi\Model\vendor\orders\v1\OrderItemAcknowledgement[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'item_sequence_number' => null,
            'amazon_product_identifier' => null,
            'vendor_product_identifier' => null,
            'ordered_quantity' => null,
            'net_cost' => null,
            'list_price' => null,
            'discount_multiplier' => null,
            'item_acknowledgements' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_sequence_number' => true,
        'amazon_product_identifier' => true,
        'vendor_product_identifier' => true,
        'ordered_quantity' => false,
        'net_cost' => true,
        'list_price' => true,
        'discount_multiplier' => true,
        'item_acknowledgements' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'item_sequence_number' => 'itemSequenceNumber',
                'amazon_product_identifier' => 'amazonProductIdentifier',
                'vendor_product_identifier' => 'vendorProductIdentifier',
                'ordered_quantity' => 'orderedQuantity',
                'net_cost' => 'netCost',
                'list_price' => 'listPrice',
                'discount_multiplier' => 'discountMultiplier',
                'item_acknowledgements' => 'itemAcknowledgements'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'item_sequence_number' => 'setItemSequenceNumber',
        'amazon_product_identifier' => 'setAmazonProductIdentifier',
        'vendor_product_identifier' => 'setVendorProductIdentifier',
        'ordered_quantity' => 'setOrderedQuantity',
        'net_cost' => 'setNetCost',
        'list_price' => 'setListPrice',
        'discount_multiplier' => 'setDiscountMultiplier',
        'item_acknowledgements' => 'setItemAcknowledgements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'item_sequence_number' => 'getItemSequenceNumber',
        'amazon_product_identifier' => 'getAmazonProductIdentifier',
        'vendor_product_identifier' => 'getVendorProductIdentifier',
        'ordered_quantity' => 'getOrderedQuantity',
        'net_cost' => 'getNetCost',
        'list_price' => 'getListPrice',
        'discount_multiplier' => 'getDiscountMultiplier',
        'item_acknowledgements' => 'getItemAcknowledgements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('item_sequence_number', $data ?? [], null);
        $this->setIfExists('amazon_product_identifier', $data ?? [], null);
        $this->setIfExists('vendor_product_identifier', $data ?? [], null);
        $this->setIfExists('ordered_quantity', $data ?? [], null);
        $this->setIfExists('net_cost', $data ?? [], null);
        $this->setIfExists('list_price', $data ?? [], null);
        $this->setIfExists('discount_multiplier', $data ?? [], null);
        $this->setIfExists('item_acknowledgements', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['ordered_quantity'] === null) {
            $invalidProperties[] = "'ordered_quantity' can't be null";
        }
        if ($this->container['item_acknowledgements'] === null) {
            $invalidProperties[] = "'item_acknowledgements' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_sequence_number
     *
     * @return string|null
     */
    public function getItemSequenceNumber(): ?string
    {
        return $this->container['item_sequence_number'];
    }

    /**
     * Sets item_sequence_number
     *
     * @param string|null $item_sequence_number Line item sequence number for the item.
     *
     * @return self
     */
    public function setItemSequenceNumber(?string $item_sequence_number): self
    {
        if (is_null($item_sequence_number)) {
            array_push($this->openAPINullablesSetToNull, 'item_sequence_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_sequence_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_sequence_number'] = $item_sequence_number;

        return $this;
    }

    /**
     * Gets amazon_product_identifier
     *
     * @return string|null
     */
    public function getAmazonProductIdentifier(): ?string
    {
        return $this->container['amazon_product_identifier'];
    }

    /**
     * Sets amazon_product_identifier
     *
     * @param string|null $amazon_product_identifier Amazon Standard Identification Number (ASIN) of an item.
     *
     * @return self
     */
    public function setAmazonProductIdentifier(?string $amazon_product_identifier): self
    {
        if (is_null($amazon_product_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'amazon_product_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amazon_product_identifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amazon_product_identifier'] = $amazon_product_identifier;

        return $this;
    }

    /**
     * Gets vendor_product_identifier
     *
     * @return string|null
     */
    public function getVendorProductIdentifier(): ?string
    {
        return $this->container['vendor_product_identifier'];
    }

    /**
     * Sets vendor_product_identifier
     *
     * @param string|null $vendor_product_identifier The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
     *
     * @return self
     */
    public function setVendorProductIdentifier(?string $vendor_product_identifier): self
    {
        if (is_null($vendor_product_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_product_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_product_identifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_product_identifier'] = $vendor_product_identifier;

        return $this;
    }

    /**
     * Gets ordered_quantity
     *
     * @return \SpApi\Model\vendor\orders\v1\ItemQuantity
     */
    public function getOrderedQuantity(): \SpApi\Model\vendor\orders\v1\ItemQuantity
    {
        return $this->container['ordered_quantity'];
    }

    /**
     * Sets ordered_quantity
     *
     * @param \SpApi\Model\vendor\orders\v1\ItemQuantity $ordered_quantity ordered_quantity
     *
     * @return self
     */
    public function setOrderedQuantity(\SpApi\Model\vendor\orders\v1\ItemQuantity $ordered_quantity): self
    {
        if (is_null($ordered_quantity)) {
            throw new \InvalidArgumentException('non-nullable ordered_quantity cannot be null');
        }
        $this->container['ordered_quantity'] = $ordered_quantity;

        return $this;
    }

    /**
     * Gets net_cost
     *
     * @return \SpApi\Model\vendor\orders\v1\Money|null
     */
    public function getNetCost(): ?\SpApi\Model\vendor\orders\v1\Money
    {
        return $this->container['net_cost'];
    }

    /**
     * Sets net_cost
     *
     * @param \SpApi\Model\vendor\orders\v1\Money|null $net_cost net_cost
     *
     * @return self
     */
    public function setNetCost(?\SpApi\Model\vendor\orders\v1\Money $net_cost): self
    {
        if (is_null($net_cost)) {
            array_push($this->openAPINullablesSetToNull, 'net_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_cost', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_cost'] = $net_cost;

        return $this;
    }

    /**
     * Gets list_price
     *
     * @return \SpApi\Model\vendor\orders\v1\Money|null
     */
    public function getListPrice(): ?\SpApi\Model\vendor\orders\v1\Money
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param \SpApi\Model\vendor\orders\v1\Money|null $list_price list_price
     *
     * @return self
     */
    public function setListPrice(?\SpApi\Model\vendor\orders\v1\Money $list_price): self
    {
        if (is_null($list_price)) {
            array_push($this->openAPINullablesSetToNull, 'list_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list_price', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets discount_multiplier
     *
     * @return string|null
     */
    public function getDiscountMultiplier(): ?string
    {
        return $this->container['discount_multiplier'];
    }

    /**
     * Sets discount_multiplier
     *
     * @param string|null $discount_multiplier The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.
     *
     * @return self
     */
    public function setDiscountMultiplier(?string $discount_multiplier): self
    {
        if (is_null($discount_multiplier)) {
            array_push($this->openAPINullablesSetToNull, 'discount_multiplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_multiplier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_multiplier'] = $discount_multiplier;

        return $this;
    }

    /**
     * Gets item_acknowledgements
     *
     * @return array
     */
    public function getItemAcknowledgements(): array
    {
        return $this->container['item_acknowledgements'];
    }

    /**
     * Sets item_acknowledgements
     *
     * @param array $item_acknowledgements This is used to indicate acknowledged quantity.
     *
     * @return self
     */
    public function setItemAcknowledgements(array $item_acknowledgements): self
    {
        if (is_null($item_acknowledgements)) {
            throw new \InvalidArgumentException('non-nullable item_acknowledgements cannot be null');
        }
        $this->container['item_acknowledgements'] = $item_acknowledgements;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


