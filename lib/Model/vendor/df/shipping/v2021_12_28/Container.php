<?php
/**
 * Container
 *
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\vendor\df\shipping\v2021_12_28;

use
ArrayAccess;
use SpApi\ObjectSerializer;
use SpApi\Model\ModelInterface;

/**
 * Container Class Doc Comment
 *
 * @category Class
 * @description A container used for shipping and packing items.
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Container implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Container';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
             'container_type' => 'string',
             'container_identifier' => 'string',
             'tracking_number' => 'string',
             'manifest_id' => 'string',
             'manifest_date' => 'string',
             'ship_method' => 'string',
             'scac_code' => 'string',
             'carrier' => 'string',
             'container_sequence_number' => 'int',
             'dimensions' => '\SpApi\Model\vendor\df\shipping\v2021_12_28\Dimensions',
             'weight' => '\SpApi\Model\vendor\df\shipping\v2021_12_28\Weight',
             'packed_items' => '\SpApi\Model\vendor\df\shipping\v2021_12_28\PackedItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
            'container_type' => null,
            'container_identifier' => null,
            'tracking_number' => null,
            'manifest_id' => null,
            'manifest_date' => null,
            'ship_method' => null,
            'scac_code' => null,
            'carrier' => null,
            'container_sequence_number' => null,
            'dimensions' => null,
            'weight' => null,
            'packed_items' => null    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'container_type' => false,
        'container_identifier' => false,
        'tracking_number' => true,
        'manifest_id' => true,
        'manifest_date' => true,
        'ship_method' => true,
        'scac_code' => true,
        'carrier' => true,
        'container_sequence_number' => true,
        'dimensions' => true,
        'weight' => false,
        'packed_items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'container_type' => 'containerType',
                'container_identifier' => 'containerIdentifier',
                'tracking_number' => 'trackingNumber',
                'manifest_id' => 'manifestId',
                'manifest_date' => 'manifestDate',
                'ship_method' => 'shipMethod',
                'scac_code' => 'scacCode',
                'carrier' => 'carrier',
                'container_sequence_number' => 'containerSequenceNumber',
                'dimensions' => 'dimensions',
                'weight' => 'weight',
                'packed_items' => 'packedItems'
        
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'container_type' => 'setContainerType',
        'container_identifier' => 'setContainerIdentifier',
        'tracking_number' => 'setTrackingNumber',
        'manifest_id' => 'setManifestId',
        'manifest_date' => 'setManifestDate',
        'ship_method' => 'setShipMethod',
        'scac_code' => 'setScacCode',
        'carrier' => 'setCarrier',
        'container_sequence_number' => 'setContainerSequenceNumber',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'packed_items' => 'setPackedItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'container_type' => 'getContainerType',
        'container_identifier' => 'getContainerIdentifier',
        'tracking_number' => 'getTrackingNumber',
        'manifest_id' => 'getManifestId',
        'manifest_date' => 'getManifestDate',
        'ship_method' => 'getShipMethod',
        'scac_code' => 'getScacCode',
        'carrier' => 'getCarrier',
        'container_sequence_number' => 'getContainerSequenceNumber',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'packed_items' => 'getPackedItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CONTAINER_TYPE_CARTON = 'Carton';
    public const CONTAINER_TYPE_PALLET = 'Pallet';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContainerTypeAllowableValues(): array
    {
        return [
            self::CONTAINER_TYPE_CARTON,
            self::CONTAINER_TYPE_PALLET,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('container_type', $data ?? [], null);
        $this->setIfExists('container_identifier', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('manifest_id', $data ?? [], null);
        $this->setIfExists('manifest_date', $data ?? [], null);
        $this->setIfExists('ship_method', $data ?? [], null);
        $this->setIfExists('scac_code', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('container_sequence_number', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('packed_items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['container_type'] === null) {
            $invalidProperties[] = "'container_type' can't be null";
        }
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!is_null($this->container['container_type']) && !in_array($this->container['container_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'container_type', must be one of '%s'",
                $this->container['container_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['container_identifier'] === null) {
            $invalidProperties[] = "'container_identifier' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['packed_items'] === null) {
            $invalidProperties[] = "'packed_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets container_type
     *
     * @return string
     */
    public function getContainerType(): string
    {
        return $this->container['container_type'];
    }

    /**
     * Sets container_type
     *
     * @param string $container_type The type of container.
     *
     * @return self
     */
    public function setContainerType(string $container_type): self
    {
        if (is_null($container_type)) {
            throw new \InvalidArgumentException('non-nullable container_type cannot be null');
        }
        $allowedValues = $this->getContainerTypeAllowableValues();
        if (!in_array($container_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'container_type', must be one of '%s'",
                    $container_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['container_type'] = $container_type;

        return $this;
    }

    /**
     * Gets container_identifier
     *
     * @return string
     */
    public function getContainerIdentifier(): string
    {
        return $this->container['container_identifier'];
    }

    /**
     * Sets container_identifier
     *
     * @param string $container_identifier The container identifier.
     *
     * @return self
     */
    public function setContainerIdentifier(string $container_identifier): self
    {
        if (is_null($container_identifier)) {
            throw new \InvalidArgumentException('non-nullable container_identifier cannot be null');
        }
        $this->container['container_identifier'] = $container_identifier;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber(): ?string
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number The tracking number.
     *
     * @return self
     */
    public function setTrackingNumber(?string $tracking_number): self
    {
        if (is_null($tracking_number)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets manifest_id
     *
     * @return string|null
     */
    public function getManifestId(): ?string
    {
        return $this->container['manifest_id'];
    }

    /**
     * Sets manifest_id
     *
     * @param string|null $manifest_id The manifest identifier.
     *
     * @return self
     */
    public function setManifestId(?string $manifest_id): self
    {
        if (is_null($manifest_id)) {
            array_push($this->openAPINullablesSetToNull, 'manifest_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manifest_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manifest_id'] = $manifest_id;

        return $this;
    }

    /**
     * Gets manifest_date
     *
     * @return string|null
     */
    public function getManifestDate(): ?string
    {
        return $this->container['manifest_date'];
    }

    /**
     * Sets manifest_date
     *
     * @param string|null $manifest_date The date of the manifest.
     *
     * @return self
     */
    public function setManifestDate(?string $manifest_date): self
    {
        if (is_null($manifest_date)) {
            array_push($this->openAPINullablesSetToNull, 'manifest_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manifest_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manifest_date'] = $manifest_date;

        return $this;
    }

    /**
     * Gets ship_method
     *
     * @return string|null
     */
    public function getShipMethod(): ?string
    {
        return $this->container['ship_method'];
    }

    /**
     * Sets ship_method
     *
     * @param string|null $ship_method The shipment method. This property is required when calling the `submitShipmentConfirmations` operation, and optional otherwise.
     *
     * @return self
     */
    public function setShipMethod(?string $ship_method): self
    {
        if (is_null($ship_method)) {
            array_push($this->openAPINullablesSetToNull, 'ship_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ship_method', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ship_method'] = $ship_method;

        return $this;
    }

    /**
     * Gets scac_code
     *
     * @return string|null
     */
    public function getScacCode(): ?string
    {
        return $this->container['scac_code'];
    }

    /**
     * Sets scac_code
     *
     * @param string|null $scac_code SCAC code required for NA VOC vendors only.
     *
     * @return self
     */
    public function setScacCode(?string $scac_code): self
    {
        if (is_null($scac_code)) {
            array_push($this->openAPINullablesSetToNull, 'scac_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scac_code', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scac_code'] = $scac_code;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier(): ?string
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Carrier required for EU VOC vendors only.
     *
     * @return self
     */
    public function setCarrier(?string $carrier): self
    {
        if (is_null($carrier)) {
            array_push($this->openAPINullablesSetToNull, 'carrier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets container_sequence_number
     *
     * @return int|null
     */
    public function getContainerSequenceNumber(): ?int
    {
        return $this->container['container_sequence_number'];
    }

    /**
     * Sets container_sequence_number
     *
     * @param int|null $container_sequence_number An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     *
     * @return self
     */
    public function setContainerSequenceNumber(?int $container_sequence_number): self
    {
        if (is_null($container_sequence_number)) {
            array_push($this->openAPINullablesSetToNull, 'container_sequence_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('container_sequence_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['container_sequence_number'] = $container_sequence_number;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \SpApi\Model\vendor\df\shipping\v2021_12_28\Dimensions|null
     */
    public function getDimensions(): ?\SpApi\Model\vendor\df\shipping\v2021_12_28\Dimensions
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \SpApi\Model\vendor\df\shipping\v2021_12_28\Dimensions|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions(?\SpApi\Model\vendor\df\shipping\v2021_12_28\Dimensions $dimensions): self
    {
        if (is_null($dimensions)) {
            array_push($this->openAPINullablesSetToNull, 'dimensions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dimensions', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \SpApi\Model\vendor\df\shipping\v2021_12_28\Weight
     */
    public function getWeight(): \SpApi\Model\vendor\df\shipping\v2021_12_28\Weight
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \SpApi\Model\vendor\df\shipping\v2021_12_28\Weight $weight weight
     *
     * @return self
     */
    public function setWeight(\SpApi\Model\vendor\df\shipping\v2021_12_28\Weight $weight): self
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets packed_items
     *
     * @return array
     */
    public function getPackedItems(): array
    {
        return $this->container['packed_items'];
    }

    /**
     * Sets packed_items
     *
     * @param array $packed_items A list of packed items.
     *
     * @return self
     */
    public function setPackedItems(array $packed_items): self
    {
        if (is_null($packed_items)) {
            throw new \InvalidArgumentException('non-nullable packed_items cannot be null');
        }
        $this->container['packed_items'] = $packed_items;

        return $this;
    }


    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


