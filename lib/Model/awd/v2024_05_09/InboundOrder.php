<?php

/**
 * InboundOrder.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Warehousing and Distribution.
 *
 * The Selling Partner API for Amazon Warehousing and Distribution (AWD) provides programmatic access to information about AWD shipments and inventory.
 *
 * The version of the OpenAPI document: 2024-05-09
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\awd\v2024_05_09;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * InboundOrder Class Doc Comment.
 *
 * @category Class
 *
 * @description Represents an AWD inbound order.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class InboundOrder implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'InboundOrder';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'created_at' => '\DateTime',
        'destination_details' => '\SpApi\Model\awd\v2024_05_09\DestinationDetails',
        'external_reference_id' => 'string',
        'order_id' => 'string',
        'order_status' => '\SpApi\Model\awd\v2024_05_09\InboundStatus',
        'origin_address' => '\SpApi\Model\awd\v2024_05_09\Address',
        'packages_to_inbound' => '\SpApi\Model\awd\v2024_05_09\DistributionPackageQuantity[]',
        'preferences' => '\SpApi\Model\awd\v2024_05_09\InboundPreferences',
        'updated_at' => '\DateTime'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'created_at' => 'date-time',
        'destination_details' => null,
        'external_reference_id' => null,
        'order_id' => null,
        'order_status' => null,
        'origin_address' => null,
        'packages_to_inbound' => null,
        'preferences' => null,
        'updated_at' => 'date-time'];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'created_at' => false,
        'destination_details' => true,
        'external_reference_id' => true,
        'order_id' => false,
        'order_status' => false,
        'origin_address' => false,
        'packages_to_inbound' => false,
        'preferences' => true,
        'updated_at' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'created_at' => 'createdAt',
        'destination_details' => 'destinationDetails',
        'external_reference_id' => 'externalReferenceId',
        'order_id' => 'orderId',
        'order_status' => 'orderStatus',
        'origin_address' => 'originAddress',
        'packages_to_inbound' => 'packagesToInbound',
        'preferences' => 'preferences',
        'updated_at' => 'updatedAt',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'created_at' => 'setCreatedAt',
        'destination_details' => 'setDestinationDetails',
        'external_reference_id' => 'setExternalReferenceId',
        'order_id' => 'setOrderId',
        'order_status' => 'setOrderStatus',
        'origin_address' => 'setOriginAddress',
        'packages_to_inbound' => 'setPackagesToInbound',
        'preferences' => 'setPreferences',
        'updated_at' => 'setUpdatedAt',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'created_at' => 'getCreatedAt',
        'destination_details' => 'getDestinationDetails',
        'external_reference_id' => 'getExternalReferenceId',
        'order_id' => 'getOrderId',
        'order_status' => 'getOrderStatus',
        'origin_address' => 'getOriginAddress',
        'packages_to_inbound' => 'getPackagesToInbound',
        'preferences' => 'getPreferences',
        'updated_at' => 'getUpdatedAt',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('destination_details', $data ?? [], null);
        $this->setIfExists('external_reference_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('origin_address', $data ?? [], null);
        $this->setIfExists('packages_to_inbound', $data ?? [], null);
        $this->setIfExists('preferences', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['created_at']) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if (null === $this->container['order_id']) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if (null === $this->container['order_status']) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        if (null === $this->container['origin_address']) {
            $invalidProperties[] = "'origin_address' can't be null";
        }
        if (null === $this->container['packages_to_inbound']) {
            $invalidProperties[] = "'packages_to_inbound' can't be null";
        }
        if (count($this->container['packages_to_inbound']) < 1) {
            $invalidProperties[] = "invalid value for 'packages_to_inbound', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets created_at.
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at.
     *
     * @param \DateTime $created_at date when this order was created
     */
    public function setCreatedAt(\DateTime $created_at): self
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets destination_details.
     */
    public function getDestinationDetails(): ?DestinationDetails
    {
        return $this->container['destination_details'];
    }

    /**
     * Sets destination_details.
     *
     * @param null|DestinationDetails $destination_details destination_details
     */
    public function setDestinationDetails(?DestinationDetails $destination_details): self
    {
        if (is_null($destination_details)) {
            array_push($this->openAPINullablesSetToNull, 'destination_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_details', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_details'] = $destination_details;

        return $this;
    }

    /**
     * Gets external_reference_id.
     */
    public function getExternalReferenceId(): ?string
    {
        return $this->container['external_reference_id'];
    }

    /**
     * Sets external_reference_id.
     *
     * @param null|string $external_reference_id reference ID that can be used to correlate the order with partner resources
     */
    public function setExternalReferenceId(?string $external_reference_id): self
    {
        if (is_null($external_reference_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_reference_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_reference_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_reference_id'] = $external_reference_id;

        return $this;
    }

    /**
     * Gets order_id.
     */
    public function getOrderId(): string
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id.
     *
     * @param string $order_id inbound order ID
     */
    public function setOrderId(string $order_id): self
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_status.
     */
    public function getOrderStatus(): string
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status.
     *
     * @param string $order_status order_status
     */
    public function setOrderStatus(string $order_status): self
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets origin_address.
     */
    public function getOriginAddress(): Address
    {
        return $this->container['origin_address'];
    }

    /**
     * Sets origin_address.
     *
     * @param Address $origin_address origin_address
     */
    public function setOriginAddress(Address $origin_address): self
    {
        if (is_null($origin_address)) {
            throw new \InvalidArgumentException('non-nullable origin_address cannot be null');
        }
        $this->container['origin_address'] = $origin_address;

        return $this;
    }

    /**
     * Gets packages_to_inbound.
     */
    public function getPackagesToInbound(): array
    {
        return $this->container['packages_to_inbound'];
    }

    /**
     * Sets packages_to_inbound.
     *
     * @param array $packages_to_inbound list of packages to be inbounded
     */
    public function setPackagesToInbound(array $packages_to_inbound): self
    {
        if (is_null($packages_to_inbound)) {
            throw new \InvalidArgumentException('non-nullable packages_to_inbound cannot be null');
        }

        if (count($packages_to_inbound) < 1) {
            throw new \InvalidArgumentException('invalid length for $packages_to_inbound when calling InboundOrder., number of items must be greater than or equal to 1.');
        }
        $this->container['packages_to_inbound'] = $packages_to_inbound;

        return $this;
    }

    /**
     * Gets preferences.
     */
    public function getPreferences(): ?InboundPreferences
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences.
     *
     * @param null|InboundPreferences $preferences preferences
     */
    public function setPreferences(?InboundPreferences $preferences): self
    {
        if (is_null($preferences)) {
            array_push($this->openAPINullablesSetToNull, 'preferences');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferences', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets updated_at.
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at.
     *
     * @param null|\DateTime $updated_at date when this order was last updated
     */
    public function setUpdatedAt(?\DateTime $updated_at): self
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
