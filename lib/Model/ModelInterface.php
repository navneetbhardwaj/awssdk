<?php

/**
 * ModelInterface.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API.
 *
 * The Selling Partner API enables developers to programmatically retrieve information from various domains.
 * These APIs provide tools for building fast, flexible, and custom applications,
 * as well as demand-based decision support systems.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model;

/**
 * Interface abstracting model access.
 *
 * @author  OpenAPI Generator team
 */
interface ModelInterface
{
    /**
     * The original name of the model.
     */
    public function getModelName(): string;

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array;

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array;

    /**
     * Array of attributes where the key is the local name, and the value is the original name.
     */
    public static function attributeMap(): array;

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array;

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array;

    /**
     * Show all the invalid properties with reasons.
     */
    public function listInvalidProperties(): array;

    /**
     * Validate all the properties in the model
     * return true if all passed.
     */
    public function valid(): bool;

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool;

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool;
}
