<?php

/**
 * SupplySource.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources.
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\supplySources\v2020_07_01;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * SupplySource Class Doc Comment.
 *
 * @category Class
 *
 * @description The supply source details, including configurations and capabilities.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class SupplySource implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'SupplySource';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'supply_source_id' => 'string',
        'supply_source_code' => 'string',
        'alias' => 'string',
        'status' => '\SpApi\Model\supplySources\v2020_07_01\SupplySourceStatusReadOnly',
        'address' => '\SpApi\Model\supplySources\v2020_07_01\Address',
        'configuration' => '\SpApi\Model\supplySources\v2020_07_01\SupplySourceConfiguration',
        'capabilities' => '\SpApi\Model\supplySources\v2020_07_01\SupplySourceCapabilities',
        'created_at' => 'string',
        'updated_at' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'supply_source_id' => null,
        'supply_source_code' => null,
        'alias' => null,
        'status' => null,
        'address' => null,
        'configuration' => null,
        'capabilities' => null,
        'created_at' => null,
        'updated_at' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'supply_source_id' => true,
        'supply_source_code' => true,
        'alias' => true,
        'status' => true,
        'address' => true,
        'configuration' => true,
        'capabilities' => true,
        'created_at' => true,
        'updated_at' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'supply_source_id' => 'supplySourceId',
        'supply_source_code' => 'supplySourceCode',
        'alias' => 'alias',
        'status' => 'status',
        'address' => 'address',
        'configuration' => 'configuration',
        'capabilities' => 'capabilities',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'supply_source_id' => 'setSupplySourceId',
        'supply_source_code' => 'setSupplySourceCode',
        'alias' => 'setAlias',
        'status' => 'setStatus',
        'address' => 'setAddress',
        'configuration' => 'setConfiguration',
        'capabilities' => 'setCapabilities',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'supply_source_id' => 'getSupplySourceId',
        'supply_source_code' => 'getSupplySourceCode',
        'alias' => 'getAlias',
        'status' => 'getStatus',
        'address' => 'getAddress',
        'configuration' => 'getConfiguration',
        'capabilities' => 'getCapabilities',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('supply_source_id', $data ?? [], null);
        $this->setIfExists('supply_source_code', $data ?? [], null);
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('capabilities', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets supply_source_id.
     */
    public function getSupplySourceId(): ?string
    {
        return $this->container['supply_source_id'];
    }

    /**
     * Sets supply_source_id.
     *
     * @param null|string $supply_source_id an Amazon generated unique supply source ID
     */
    public function setSupplySourceId(?string $supply_source_id): self
    {
        if (is_null($supply_source_id)) {
            array_push($this->openAPINullablesSetToNull, 'supply_source_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supply_source_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supply_source_id'] = $supply_source_id;

        return $this;
    }

    /**
     * Gets supply_source_code.
     */
    public function getSupplySourceCode(): ?string
    {
        return $this->container['supply_source_code'];
    }

    /**
     * Sets supply_source_code.
     *
     * @param null|string $supply_source_code the seller-provided unique supply source code
     */
    public function setSupplySourceCode(?string $supply_source_code): self
    {
        if (is_null($supply_source_code)) {
            array_push($this->openAPINullablesSetToNull, 'supply_source_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supply_source_code', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supply_source_code'] = $supply_source_code;

        return $this;
    }

    /**
     * Gets alias.
     */
    public function getAlias(): ?string
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias.
     *
     * @param null|string $alias The custom alias for this supply source
     */
    public function setAlias(?string $alias): self
    {
        if (is_null($alias)) {
            array_push($this->openAPINullablesSetToNull, 'alias');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alias', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status status
     */
    public function setStatus(?string $status): self
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets address.
     */
    public function getAddress(): ?Address
    {
        return $this->container['address'];
    }

    /**
     * Sets address.
     *
     * @param null|Address $address address
     */
    public function setAddress(?Address $address): self
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets configuration.
     */
    public function getConfiguration(): ?SupplySourceConfiguration
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration.
     *
     * @param null|SupplySourceConfiguration $configuration configuration
     */
    public function setConfiguration(?SupplySourceConfiguration $configuration): self
    {
        if (is_null($configuration)) {
            array_push($this->openAPINullablesSetToNull, 'configuration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('configuration', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets capabilities.
     */
    public function getCapabilities(): ?SupplySourceCapabilities
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities.
     *
     * @param null|SupplySourceCapabilities $capabilities capabilities
     */
    public function setCapabilities(?SupplySourceCapabilities $capabilities): self
    {
        if (is_null($capabilities)) {
            array_push($this->openAPINullablesSetToNull, 'capabilities');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('capabilities', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets created_at.
     */
    public function getCreatedAt(): ?string
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at.
     *
     * @param null|string $created_at a date and time in the rfc3339 format
     */
    public function setCreatedAt(?string $created_at): self
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at.
     */
    public function getUpdatedAt(): ?string
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at.
     *
     * @param null|string $updated_at a date and time in the rfc3339 format
     */
    public function setUpdatedAt(?string $updated_at): self
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
