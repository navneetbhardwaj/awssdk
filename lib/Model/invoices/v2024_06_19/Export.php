<?php

/**
 * Export.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\invoices\v2024_06_19;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * Export Class Doc Comment.
 *
 * @category Class
 *
 * @description Detailed information about the export.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Export implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Export';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'error_message' => 'string',
        'export_id' => 'string',
        'generate_export_finished_at' => '\DateTime',
        'generate_export_started_at' => '\DateTime',
        'invoices_document_ids' => 'string[]',
        'status' => '\SpApi\Model\invoices\v2024_06_19\ExportStatus'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'error_message' => null,
        'export_id' => null,
        'generate_export_finished_at' => 'date-time',
        'generate_export_started_at' => 'date-time',
        'invoices_document_ids' => null,
        'status' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'error_message' => true,
        'export_id' => true,
        'generate_export_finished_at' => true,
        'generate_export_started_at' => true,
        'invoices_document_ids' => true,
        'status' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'error_message' => 'errorMessage',
        'export_id' => 'exportId',
        'generate_export_finished_at' => 'generateExportFinishedAt',
        'generate_export_started_at' => 'generateExportStartedAt',
        'invoices_document_ids' => 'invoicesDocumentIds',
        'status' => 'status',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'error_message' => 'setErrorMessage',
        'export_id' => 'setExportId',
        'generate_export_finished_at' => 'setGenerateExportFinishedAt',
        'generate_export_started_at' => 'setGenerateExportStartedAt',
        'invoices_document_ids' => 'setInvoicesDocumentIds',
        'status' => 'setStatus',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'error_message' => 'getErrorMessage',
        'export_id' => 'getExportId',
        'generate_export_finished_at' => 'getGenerateExportFinishedAt',
        'generate_export_started_at' => 'getGenerateExportStartedAt',
        'invoices_document_ids' => 'getInvoicesDocumentIds',
        'status' => 'getStatus',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('export_id', $data ?? [], null);
        $this->setIfExists('generate_export_finished_at', $data ?? [], null);
        $this->setIfExists('generate_export_started_at', $data ?? [], null);
        $this->setIfExists('invoices_document_ids', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets error_message.
     */
    public function getErrorMessage(): ?string
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message.
     *
     * @param null|string $error_message when the export generation fails, this attribute contains a description of the error
     */
    public function setErrorMessage(?string $error_message): self
    {
        if (is_null($error_message)) {
            array_push($this->openAPINullablesSetToNull, 'error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_message', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets export_id.
     */
    public function getExportId(): ?string
    {
        return $this->container['export_id'];
    }

    /**
     * Sets export_id.
     *
     * @param null|string $export_id the export identifier
     */
    public function setExportId(?string $export_id): self
    {
        if (is_null($export_id)) {
            array_push($this->openAPINullablesSetToNull, 'export_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_id'] = $export_id;

        return $this;
    }

    /**
     * Gets generate_export_finished_at.
     */
    public function getGenerateExportFinishedAt(): ?\DateTime
    {
        return $this->container['generate_export_finished_at'];
    }

    /**
     * Sets generate_export_finished_at.
     *
     * @param null|\DateTime $generate_export_finished_at The date and time when the export generation finished. Vales are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    public function setGenerateExportFinishedAt(?\DateTime $generate_export_finished_at): self
    {
        if (is_null($generate_export_finished_at)) {
            array_push($this->openAPINullablesSetToNull, 'generate_export_finished_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generate_export_finished_at', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generate_export_finished_at'] = $generate_export_finished_at;

        return $this;
    }

    /**
     * Gets generate_export_started_at.
     */
    public function getGenerateExportStartedAt(): ?\DateTime
    {
        return $this->container['generate_export_started_at'];
    }

    /**
     * Sets generate_export_started_at.
     *
     * @param null|\DateTime $generate_export_started_at The date and time when the export generation started. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    public function setGenerateExportStartedAt(?\DateTime $generate_export_started_at): self
    {
        if (is_null($generate_export_started_at)) {
            array_push($this->openAPINullablesSetToNull, 'generate_export_started_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('generate_export_started_at', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['generate_export_started_at'] = $generate_export_started_at;

        return $this;
    }

    /**
     * Gets invoices_document_ids.
     */
    public function getInvoicesDocumentIds(): ?array
    {
        return $this->container['invoices_document_ids'];
    }

    /**
     * Sets invoices_document_ids.
     *
     * @param null|array $invoices_document_ids The identifier for the export documents. To get the information required to retrieve the export document's contents, pass each ID in the `getInvoicesDocument` operation.  This list is empty until the status is `DONE`.
     */
    public function setInvoicesDocumentIds(?array $invoices_document_ids): self
    {
        if (is_null($invoices_document_ids)) {
            array_push($this->openAPINullablesSetToNull, 'invoices_document_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoices_document_ids', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoices_document_ids'] = $invoices_document_ids;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status status
     */
    public function setStatus(?string $status): self
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
