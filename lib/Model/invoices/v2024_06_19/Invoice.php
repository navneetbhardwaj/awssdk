<?php

/**
 * Invoice.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Invoices.
 *
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\invoices\v2024_06_19;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * Invoice Class Doc Comment.
 *
 * @category Class
 *
 * @description Provides detailed information about an invoice.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'Invoice';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'date' => '\DateTime',
        'error_code' => 'string',
        'external_invoice_id' => 'string',
        'gov_response' => 'string',
        'id' => 'string',
        'invoice_type' => 'string',
        'series' => 'string',
        'status' => 'string',
        'transaction_ids' => '\SpApi\Model\invoices\v2024_06_19\TransactionIdentifier[]',
        'transaction_type' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'date' => 'date-time',
        'error_code' => null,
        'external_invoice_id' => null,
        'gov_response' => null,
        'id' => null,
        'invoice_type' => null,
        'series' => null,
        'status' => null,
        'transaction_ids' => null,
        'transaction_type' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'date' => true,
        'error_code' => true,
        'external_invoice_id' => true,
        'gov_response' => true,
        'id' => true,
        'invoice_type' => true,
        'series' => true,
        'status' => true,
        'transaction_ids' => true,
        'transaction_type' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'date' => 'date',
        'error_code' => 'errorCode',
        'external_invoice_id' => 'externalInvoiceId',
        'gov_response' => 'govResponse',
        'id' => 'id',
        'invoice_type' => 'invoiceType',
        'series' => 'series',
        'status' => 'status',
        'transaction_ids' => 'transactionIds',
        'transaction_type' => 'transactionType',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'date' => 'setDate',
        'error_code' => 'setErrorCode',
        'external_invoice_id' => 'setExternalInvoiceId',
        'gov_response' => 'setGovResponse',
        'id' => 'setId',
        'invoice_type' => 'setInvoiceType',
        'series' => 'setSeries',
        'status' => 'setStatus',
        'transaction_ids' => 'setTransactionIds',
        'transaction_type' => 'setTransactionType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'date' => 'getDate',
        'error_code' => 'getErrorCode',
        'external_invoice_id' => 'getExternalInvoiceId',
        'gov_response' => 'getGovResponse',
        'id' => 'getId',
        'invoice_type' => 'getInvoiceType',
        'series' => 'getSeries',
        'status' => 'getStatus',
        'transaction_ids' => 'getTransactionIds',
        'transaction_type' => 'getTransactionType',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('external_invoice_id', $data ?? [], null);
        $this->setIfExists('gov_response', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('series', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('transaction_ids', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets date.
     */
    public function getDate(): ?\DateTime
    {
        return $this->container['date'];
    }

    /**
     * Sets date.
     *
     * @param null|\DateTime $date The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     */
    public function setDate(?\DateTime $date): self
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets error_code.
     */
    public function getErrorCode(): ?string
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code.
     *
     * @param null|string $error_code if the invoice is in an error state, this attribute displays the error code
     */
    public function setErrorCode(?string $error_code): self
    {
        if (is_null($error_code)) {
            array_push($this->openAPINullablesSetToNull, 'error_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error_code', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets external_invoice_id.
     */
    public function getExternalInvoiceId(): ?string
    {
        return $this->container['external_invoice_id'];
    }

    /**
     * Sets external_invoice_id.
     *
     * @param null|string $external_invoice_id The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice.
     */
    public function setExternalInvoiceId(?string $external_invoice_id): self
    {
        if (is_null($external_invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_invoice_id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_invoice_id'] = $external_invoice_id;

        return $this;
    }

    /**
     * Gets gov_response.
     */
    public function getGovResponse(): ?string
    {
        return $this->container['gov_response'];
    }

    /**
     * Sets gov_response.
     *
     * @param null|string $gov_response the response message from the government authority when there is an error during invoice issuance
     */
    public function setGovResponse(?string $gov_response): self
    {
        if (is_null($gov_response)) {
            array_push($this->openAPINullablesSetToNull, 'gov_response');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gov_response', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gov_response'] = $gov_response;

        return $this;
    }

    /**
     * Gets id.
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|string $id the invoice identifier
     */
    public function setId(?string $id): self
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_type.
     */
    public function getInvoiceType(): ?string
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type.
     *
     * @param null|string $invoice_type The classification of the invoice type. This varies across marketplaces. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
     */
    public function setInvoiceType(?string $invoice_type): self
    {
        if (is_null($invoice_type)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets series.
     */
    public function getSeries(): ?string
    {
        return $this->container['series'];
    }

    /**
     * Sets series.
     *
     * @param null|string $series use this identifier in conjunction with `externalInvoiceId` to identify invoices from the same seller
     */
    public function setSeries(?string $series): self
    {
        if (is_null($series)) {
            array_push($this->openAPINullablesSetToNull, 'series');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('series', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['series'] = $series;

        return $this;
    }

    /**
     * Gets status.
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param null|string $status The invoice status classification. Use the `getInvoicesAttributes` operation to check invoice status options.
     */
    public function setStatus(?string $status): self
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets transaction_ids.
     */
    public function getTransactionIds(): ?array
    {
        return $this->container['transaction_ids'];
    }

    /**
     * Sets transaction_ids.
     *
     * @param null|array $transaction_ids list with identifiers for the transactions associated to the invoice
     */
    public function setTransactionIds(?array $transaction_ids): self
    {
        if (is_null($transaction_ids)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_ids', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_ids'] = $transaction_ids;

        return $this;
    }

    /**
     * Gets transaction_type.
     */
    public function getTransactionType(): ?string
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type.
     *
     * @param null|string $transaction_type Classification of the transaction that originated this invoice. Use the `getInvoicesAttributes` operation to check `transactionType` options.
     */
    public function setTransactionType(?string $transaction_type): self
    {
        if (is_null($transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_type', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
