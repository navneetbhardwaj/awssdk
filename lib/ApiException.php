<?php

/**
 * ApiException
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Selling Partner API.
 *
 * The Selling Partner API enables developers to programmatically retrieve information from various domains.
 * These APIs provide tools for building fast, flexible, and custom applications,
 * as well as demand-based decision support systems.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi;

use stdClass;

/**
 * ApiException Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class ApiException extends \Exception
{
    /**
     * The HTTP body of the server response either as Json or string.
     */
    protected null|\stdClass|string $responseBody;

    /**
     * The HTTP header of the server response.
     *
     * @var null|string[][]
     */
    protected ?array $responseHeaders;

    /**
     * The deserialized response object.
     */
    protected null|\stdClass|string $responseObject;

    /**
     * Constructor.
     *
     * @param string                $message         Error message
     * @param int                   $code            HTTP status code
     * @param null|string[][]       $responseHeaders HTTP response header
     * @param null|\stdClass|string $responseBody
     *                                               HTTP decoded body of the server response either as stdClass or string
     */
    public function __construct(
        string $message = '',
        int $code = 0,
        $responseHeaders = [],
        null|\stdClass|string $responseBody = null
    ) {
        parent::__construct($message, $code);
        $this->responseHeaders = $responseHeaders;
        $this->responseBody = $responseBody;
    }

    /**
     * Gets the HTTP response header.
     *
     * @return null|string[][] HTTP response header
     */
    public function getResponseHeaders(): ?array
    {
        return $this->responseHeaders;
    }

    /**
     * Gets the HTTP body of the server response either as Json or string.
     *
     * @return null|\stdClass|string HTTP body of the server response either as \stdClass or string
     */
    public function getResponseBody(): null|\stdClass|string
    {
        return $this->responseBody;
    }

    /**
     * Sets the deserialized response object (during deserialization).
     *
     * @param mixed $obj Deserialized response object
     */
    public function setResponseObject(mixed $obj): void
    {
        $this->responseObject = $obj;
    }

    /**
     * Gets the deserialized response object (during deserialization).
     *
     * @return null|\stdClass|string the deserialized response object
     */
    public function getResponseObject(): null|\stdClass|string
    {
        return $this->responseObject;
    }
}
