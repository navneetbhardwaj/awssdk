<?php
/**
 * SupplySourcesApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Supply Sources
 *
 * Manage configurations and capabilities of seller supply sources.
 *
 * The version of the OpenAPI document: 2020-07-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\supplySources\v2020_07_01\SupplySourcesApi;
use SpApi\ObjectSerializer;

/**
 * SupplySourcesApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplySourcesApiTest extends BaseTestCase
{
    private SupplySourcesApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('SupplySourcesApi', $this->getName());
        $this->apiInstance = new SupplySourcesApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for archiveSupplySource_204
     */
    public function testArchiveSupplySource204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testArchiveSupplySource204', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'archiveSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->archiveSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for archiveSupplySource_400
     */
    public function testArchiveSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testArchiveSupplySource400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;supplySourceId&quot; : {
            &quot;value&quot; : &quot;cf146560-392a-43e6-bf99-2ca3b5d42b5c&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Supply Source has been archived and cannot be modified.&quot;,
          &quot;details&quot; : &quot;1005&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'archiveSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->archiveSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for archiveSupplySource_403
     */
    public function testArchiveSupplySource403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_404
     */
    public function testArchiveSupplySource404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_413
     */
    public function testArchiveSupplySource413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_415
     */
    public function testArchiveSupplySource415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_429
     */
    public function testArchiveSupplySource429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_500
     */
    public function testArchiveSupplySource500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for archiveSupplySource_503
     */
    public function testArchiveSupplySource503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_200
     */
    public function testCreateSupplySource200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateSupplySource200', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/CreateSupplySourceResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;supplySourceId&quot; : &quot;ed85fcf9-798c-4b63-a47e-8d4f0d273ddb&quot;,
        &quot;supplySourceCode&quot; : &quot;owner_s2cs_test_010101_aaaas&quot;
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createSupplySource_400
     */
    public function testCreateSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateSupplySource400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;supplySourceCode&quot; : &quot;owner_s2cs_test_010101_aaaab&quot;,
              &quot;alias&quot; : &quot;alias_jksjdkf_aaaab&quot;,
              &quot;address&quot; : {
                &quot;name&quot; : &quot;name&quot;,
                &quot;addressLine1&quot; : &quot;addresline 1234 010101 asaaab&quot;,
                &quot;city&quot; : &quot;Red&quot;,
                &quot;county&quot; : &quot;King&quot;,
                &quot;stateOrRegion&quot; : &quot;string&quot;,
                &quot;postalCode&quot; : &quot;99999&quot;,
                &quot;countryCode&quot; : &quot;US&quot;,
                &quot;phone&quot; : &quot;string&quot;
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Supply Source with given Code already exists&quot;,
          &quot;details&quot; : &quot;1004&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createSupplySource_403
     */
    public function testCreateSupplySource403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_404
     */
    public function testCreateSupplySource404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_413
     */
    public function testCreateSupplySource413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_415
     */
    public function testCreateSupplySource415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_429
     */
    public function testCreateSupplySource429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_500
     */
    public function testCreateSupplySource500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createSupplySource_503
     */
    public function testCreateSupplySource503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_200
     */
    public function testGetSupplySource200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySource200', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/SupplySource&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;supplySourceId&quot; : &quot;cbc976e5-1e55-4d33-855b-35e6254f5a58&quot;,
        &quot;supplySourceCode&quot; : &quot;test-gw-435dgh2o39&quot;,
        &quot;alias&quot; : &quot;test-gw-ssss&quot;,
        &quot;status&quot; : &quot;Inactive&quot;,
        &quot;address&quot; : {
          &quot;addressLine1&quot; : &quot;tst-addressLine1-423&quot;,
          &quot;addressLine2&quot; : &quot;tes-addressLine2-gew&quot;,
          &quot;addressLine3&quot; : &quot;Rufus&quot;,
          &quot;city&quot; : &quot;Gekl&quot;,
          &quot;county&quot; : &quot;&quot;,
          &quot;district&quot; : &quot;&quot;,
          &quot;stateOrRegion&quot; : &quot;WA&quot;,
          &quot;postalCode&quot; : &quot;59202&quot;,
          &quot;countryCode&quot; : &quot;US&quot;
        },
        &quot;configuration&quot; : {
          &quot;operationalConfiguration&quot; : {
            &quot;contactDetails&quot; : {
              &quot;primary&quot; : {
                &quot;email&quot; : &quot;test324@gmail.com&quot;,
                &quot;phone&quot; : &quot;4813924781&quot;
              }
            },
            &quot;throughputConfig&quot; : {
              &quot;throughputCap&quot; : {
                &quot;value&quot; : 1,
                &quot;timeUnit&quot; : &quot;Days&quot;
              },
              &quot;throughputUnit&quot; : &quot;ORDER&quot;
            },
            &quot;handlingTime&quot; : {
              &quot;value&quot; : 1,
              &quot;timeUnit&quot; : &quot;Hours&quot;
            },
            &quot;operatingHoursByDay&quot; : {
              &quot;monday&quot; : [ {
                &quot;startTime&quot; : &quot;00:59&quot;,
                &quot;endTime&quot; : &quot;06:01&quot;
              } ],
              &quot;tuesday&quot; : [ {
                &quot;startTime&quot; : &quot;19:03&quot;,
                &quot;endTime&quot; : &quot;23:25&quot;
              } ],
              &quot;wednesday&quot; : [ {
                &quot;startTime&quot; : &quot;00:00&quot;,
                &quot;endTime&quot; : &quot;00:00&quot;
              } ],
              &quot;thursday&quot; : [ {
                &quot;startTime&quot; : &quot;00:00&quot;,
                &quot;endTime&quot; : &quot;00:00&quot;
              } ],
              &quot;friday&quot; : [ {
                &quot;startTime&quot; : &quot;00:00&quot;,
                &quot;endTime&quot; : &quot;00:00&quot;
              } ],
              &quot;saturday&quot; : [ {
                &quot;startTime&quot; : &quot;00:00&quot;,
                &quot;endTime&quot; : &quot;00:00&quot;
              } ],
              &quot;sunday&quot; : [ {
                &quot;startTime&quot; : &quot;00:00&quot;,
                &quot;endTime&quot; : &quot;00:00&quot;
              } ]
            }
          },
          &quot;timezone&quot; : &quot;Africa/Accra&quot;
        },
        &quot;capabilities&quot; : {
          &quot;outbound&quot; : {
            &quot;isSupported&quot; : true,
            &quot;operationalConfiguration&quot; : {
              &quot;contactDetails&quot; : {
                &quot;primary&quot; : {
                  &quot;email&quot; : &quot;tet@gmail.com&quot;,
                  &quot;phone&quot; : &quot;4281937491&quot;
                }
              },
              &quot;throughputConfig&quot; : {
                &quot;throughputCap&quot; : {
                  &quot;value&quot; : 1,
                  &quot;timeUnit&quot; : &quot;Days&quot;
                },
                &quot;throughputUnit&quot; : &quot;ORDER&quot;
              },
              &quot;handlingTime&quot; : {
                &quot;value&quot; : 1,
                &quot;timeUnit&quot; : &quot;Hours&quot;
              },
              &quot;operatingHoursByDay&quot; : {
                &quot;monday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:43&quot;,
                  &quot;endTime&quot; : &quot;04:05&quot;
                } ],
                &quot;tuesday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;wednesday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;thursday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;friday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;saturday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;sunday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ]
              }
            },
            &quot;deliveryChannel&quot; : {
              &quot;isSupported&quot; : false,
              &quot;operationalConfiguration&quot; : {
                &quot;contactDetails&quot; : {
                  &quot;primary&quot; : {
                    &quot;email&quot; : &quot;&quot;,
                    &quot;phone&quot; : &quot;&quot;
                  }
                },
                &quot;throughputConfig&quot; : {
                  &quot;throughputCap&quot; : {
                    &quot;value&quot; : 1,
                    &quot;timeUnit&quot; : &quot;Days&quot;
                  },
                  &quot;throughputUnit&quot; : &quot;ORDER&quot;
                },
                &quot;handlingTime&quot; : {
                  &quot;value&quot; : 1,
                  &quot;timeUnit&quot; : &quot;Hours&quot;
                }
              }
            },
            &quot;pickupChannel&quot; : {
              &quot;isSupported&quot; : true,
              &quot;inventoryHoldPeriod&quot; : {
                &quot;value&quot; : 452,
                &quot;timeUnit&quot; : &quot;Minutes&quot;
              },
              &quot;operationalConfiguration&quot; : {
                &quot;contactDetails&quot; : {
                  &quot;primary&quot; : {
                    &quot;email&quot; : &quot;yre4@gmail.com&quot;,
                    &quot;phone&quot; : &quot;4381232840&quot;
                  }
                },
                &quot;throughputConfig&quot; : {
                  &quot;throughputCap&quot; : {
                    &quot;value&quot; : 1,
                    &quot;timeUnit&quot; : &quot;Days&quot;
                  },
                  &quot;throughputUnit&quot; : &quot;ORDER&quot;
                },
                &quot;handlingTime&quot; : {
                  &quot;value&quot; : 1,
                  &quot;timeUnit&quot; : &quot;Hours&quot;
                }
              }
            }
          },
          &quot;services&quot; : {
            &quot;isSupported&quot; : true,
            &quot;operationalConfiguration&quot; : {
              &quot;contactDetails&quot; : {
                &quot;primary&quot; : {
                  &quot;email&quot; : &quot;testservices@gmail.com&quot;,
                  &quot;phone&quot; : &quot;4281937491&quot;
                }
              },
              &quot;operatingHoursByDay&quot; : {
                &quot;monday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:43&quot;,
                  &quot;endTime&quot; : &quot;04:05&quot;
                } ],
                &quot;tuesday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;wednesday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;thursday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;friday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;saturday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ],
                &quot;sunday&quot; : [ {
                  &quot;startTime&quot; : &quot;00:00&quot;,
                  &quot;endTime&quot; : &quot;00:00&quot;
                } ]
              }
            }
          }
        },
        &quot;createdAt&quot; : &quot;1.596578152E9&quot;,
        &quot;updatedAt&quot; : &quot;1.596842808E9&quot;
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySource_400
     */
    public function testGetSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySource400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;supplySourceId&quot; : {
            &quot;value&quot; : &quot;cbc976e5-1e55-4d33-855b-35e6254f5a5&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid Input&quot;,
          &quot;details&quot; : &quot;&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySource_403
     */
    public function testGetSupplySource403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_404
     */
    public function testGetSupplySource404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_413
     */
    public function testGetSupplySource413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_415
     */
    public function testGetSupplySource415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_429
     */
    public function testGetSupplySource429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_500
     */
    public function testGetSupplySource500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySource_503
     */
    public function testGetSupplySource503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_200
     */
    public function testGetSupplySources200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySources200', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetSupplySourcesResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;supplySources&quot; : [ {
          &quot;supplySourceId&quot; : &quot;ed85fcf9-798c-4b63-a47e-8d4f0d273ddb&quot;,
          &quot;supplySourceCode&quot; : &quot;owner_s2cs_test_010101_aaaas&quot;,
          &quot;alias&quot; : &quot;alias_jksjdkf_aaaas&quot;,
          &quot;address&quot; : {
            &quot;addressLine1&quot; : &quot;addresline 1234 010101 asaaab&quot;,
            &quot;city&quot; : &quot;Red&quot;,
            &quot;stateOrRegion&quot; : &quot;string&quot;,
            &quot;postalCode&quot; : &quot;99999&quot;,
            &quot;countryCode&quot; : &quot;US&quot;
          }
        } ],
        &quot;nextPageToken&quot; : &quot;eyJzMl9zb3J0X2tleSI6eyJzIjoic3VwcGx5U291cmNlQ29kZSNvd25lcl9zMmNzX3Rlc3RfMDEwMTAxX2FhYWFzIiwibiI6bnVsbCwiYiI6bnVsbCwibSI6bnVsbCwibCI6bnVsbCwiYnMiOm51bGwsIm5zIjpudWxsLCJzcyI6bnVsbCwibnVsbCI6bnVsbCwiYm9vbCI6bnVsbH0sInMyX3ByaW1hcnlfa2V5Ijp7InMiOiJvd25lciNNZXJjaGFudDpBMU1QWVFRSjVUVThRVSIsIm4iOm51bGwsImIiOm51bGwsIm0iOm51bGwsImwiOm51bGwsImJzIjpudWxsLCJucyI6bnVsbCwic3MiOm51bGwsIm51bGwiOm51bGwsImJvb2wiOm51bGx9LCJsc2lTS0xpdmVDcmVhdGVkVGltZSI6eyJzIjpudWxsLCJuIjoiMTU5NzEyNjU2MSIsImIiOm51bGwsIm0iOm51bGwsImwiOm51bGwsImJzIjpudWxsLCJucyI6bnVsbCwic3MiOm51bGwsIm51bGwiOm51bGwsImJvb2wiOm51bGx9fQ&#x3D;&#x3D;&quot;
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getSupplySources'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySources_400
     */
    public function testGetSupplySources400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetSupplySources400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;pageSize&quot; : {
            &quot;value&quot; : 3
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid or malformed address Id.&quot;,
          &quot;details&quot; : &quot;1012&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getSupplySources'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getSupplySourcesWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getSupplySources_403
     */
    public function testGetSupplySources403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_404
     */
    public function testGetSupplySources404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_413
     */
    public function testGetSupplySources413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_415
     */
    public function testGetSupplySources415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_429
     */
    public function testGetSupplySources429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_500
     */
    public function testGetSupplySources500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getSupplySources_503
     */
    public function testGetSupplySources503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_204
     */
    public function testUpdateSupplySource204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySource204', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySource_400
     */
    public function testUpdateSupplySource400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySource400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;supplySourceId&quot; : {
            &quot;value&quot; : &quot;cf146560-392a-43e6-bf99-2ca3b5d42b5c&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;alias&quot; : &quot;test-config&quot;,
              &quot;configuration&quot; : {
                &quot;operationalConfiguration&quot; : {
                  &quot;contactDetails&quot; : {
                    &quot;primary&quot; : {
                      &quot;email&quot; : &quot;111@gmail.com&quot;,
                      &quot;phone&quot; : &quot;111&quot;
                    }
                  },
                  &quot;operatingHoursByDay&quot; : {
                    &quot;monday&quot; : [ {
                      &quot;startTime&quot; : &quot;01:30&quot;,
                      &quot;endTime&quot; : &quot;02:40&quot;
                    } ],
                    &quot;tuesday&quot; : [ {
                      &quot;startTime&quot; : &quot;2:00&quot;,
                      &quot;endTime&quot; : &quot;2:00&quot;
                    } ]
                  },
                  &quot;throughputConfig&quot; : {
                    &quot;throughputCap&quot; : {
                      &quot;value&quot; : 17,
                      &quot;timeUnit&quot; : &quot;Hours&quot;
                    }
                  },
                  &quot;handlingTime&quot; : {
                    &quot;value&quot; : 1,
                    &quot;timeUnit&quot; : &quot;Hours&quot;
                  }
                },
                &quot;timezone&quot; : &quot;Africa/Accra&quot;
              },
              &quot;capabilities&quot; : {
                &quot;outbound&quot; : {
                  &quot;isSupported&quot; : true,
                  &quot;operationalConfiguration&quot; : {
                    &quot;contactDetails&quot; : {
                      &quot;primary&quot; : {
                        &quot;email&quot; : &quot;outbound@gmail.com&quot;,
                        &quot;phone&quot; : &quot;222&quot;
                      }
                    },
                    &quot;operatingHoursByDay&quot; : {
                      &quot;wednesday&quot; : [ {
                        &quot;startTime&quot; : &quot;03:30&quot;,
                        &quot;endTime&quot; : &quot;03:40&quot;
                      } ],
                      &quot;thursday&quot; : [ {
                        &quot;startTime&quot; : &quot;4:00&quot;,
                        &quot;endTime&quot; : &quot;4:00&quot;
                      } ]
                    },
                    &quot;throughputConfig&quot; : {
                      &quot;throughputCap&quot; : {
                        &quot;value&quot; : 10,
                        &quot;timeUnit&quot; : &quot;Hours&quot;
                      }
                    },
                    &quot;handlingTime&quot; : {
                      &quot;value&quot; : 1,
                      &quot;timeUnit&quot; : &quot;Hours&quot;
                    }
                  },
                  &quot;returnLocation&quot; : {
                    &quot;addressWithContact&quot; : {
                      &quot;address&quot; : {
                        &quot;addressLine1&quot; : &quot;returnLocation&quot;,
                        &quot;countryCode&quot; : &quot;na&quot;
                      },
                      &quot;contactDetails&quot; : {
                        &quot;primary&quot; : {
                          &quot;email&quot; : &quot;returnLocation@gmail.com&quot;,
                          &quot;phone&quot; : &quot;333&quot;
                        }
                      }
                    },
                    &quot;supplySourceId&quot; : &quot;cbb1658a-949e-4c42-9d29-6c38ac1c4746&quot;
                  },
                  &quot;deliveryChannel&quot; : {
                    &quot;isSupported&quot; : true,
                    &quot;operationalConfiguration&quot; : {
                      &quot;contactDetails&quot; : {
                        &quot;primary&quot; : {
                          &quot;email&quot; : &quot;deliveryChannel@gmail.com&quot;,
                          &quot;phone&quot; : &quot;444&quot;
                        }
                      },
                      &quot;operatingHoursByDay&quot; : {
                        &quot;friday&quot; : [ {
                          &quot;startTime&quot; : &quot;03:30&quot;,
                          &quot;endTime&quot; : &quot;03:40&quot;
                        } ],
                        &quot;thursday&quot; : [ {
                          &quot;startTime&quot; : &quot;4:00&quot;,
                          &quot;endTime&quot; : &quot;4:00&quot;
                        } ]
                      },
                      &quot;throughputConfig&quot; : {
                        &quot;throughputCap&quot; : {
                          &quot;value&quot; : 4,
                          &quot;timeUnit&quot; : &quot;Hours&quot;
                        }
                      },
                      &quot;handlingTime&quot; : {
                        &quot;value&quot; : 1,
                        &quot;timeUnit&quot; : &quot;Hours&quot;
                      }
                    }
                  },
                  &quot;pickupChannel&quot; : {
                    &quot;isSupported&quot; : true,
                    &quot;inventoryHoldPeriod&quot; : {
                      &quot;value&quot; : 4,
                      &quot;timeUnit&quot; : &quot;Minutes&quot;
                    },
                    &quot;operationalConfiguration&quot; : {
                      &quot;contactDetails&quot; : {
                        &quot;primary&quot; : {
                          &quot;email&quot; : &quot;pickupChannel@gmail.com&quot;,
                          &quot;phone&quot; : &quot;555&quot;
                        }
                      },
                      &quot;operatingHoursByDay&quot; : {
                        &quot;saturday&quot; : [ {
                          &quot;startTime&quot; : &quot;12:30&quot;,
                          &quot;endTime&quot; : &quot;03:40&quot;
                        } ],
                        &quot;sunday&quot; : [ {
                          &quot;startTime&quot; : &quot;5:00&quot;,
                          &quot;endTime&quot; : &quot;23:30&quot;
                        } ]
                      },
                      &quot;throughputConfig&quot; : {
                        &quot;throughputCap&quot; : {
                          &quot;value&quot; : 3,
                          &quot;timeUnit&quot; : &quot;Hours&quot;
                        }
                      },
                      &quot;handlingTime&quot; : {
                        &quot;value&quot; : 1,
                        &quot;timeUnit&quot; : &quot;Hours&quot;
                      }
                    }
                  }
                },
                &quot;services&quot; : {
                  &quot;isSupported&quot; : true,
                  &quot;operationalConfiguration&quot; : {
                    &quot;contactDetails&quot; : {
                      &quot;primary&quot; : {
                        &quot;email&quot; : &quot;services@gmail.com&quot;,
                        &quot;phone&quot; : &quot;222&quot;
                      }
                    },
                    &quot;operatingHoursByDay&quot; : {
                      &quot;wednesday&quot; : [ {
                        &quot;startTime&quot; : &quot;03:30&quot;,
                        &quot;endTime&quot; : &quot;03:40&quot;
                      } ],
                      &quot;thursday&quot; : [ {
                        &quot;startTime&quot; : &quot;4:00&quot;,
                        &quot;endTime&quot; : &quot;4:00&quot;
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Supply Source has been archived and cannot be modified.&quot;,
          &quot;details&quot; : &quot;1005&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateSupplySource'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySource_403
     */
    public function testUpdateSupplySource403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_404
     */
    public function testUpdateSupplySource404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_413
     */
    public function testUpdateSupplySource413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_415
     */
    public function testUpdateSupplySource415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_429
     */
    public function testUpdateSupplySource429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_500
     */
    public function testUpdateSupplySource500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySource_503
     */
    public function testUpdateSupplySource503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_204
     */
    public function testUpdateSupplySourceStatus204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySourceStatus204', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateSupplySourceStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySourceStatus_400
     */
    public function testUpdateSupplySourceStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testUpdateSupplySourceStatus400', 'SupplySourcesApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;supplySourceId&quot; : {
            &quot;value&quot; : &quot;cf146560-392a-43e6-bf99-2ca3b5d42b5c&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;status&quot; : &quot;Inactive&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Supply Source has been archived and cannot be modified.&quot;,
          &quot;details&quot; : &quot;1005&quot;
        } ]
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;supplySourceId&quot; : {
            &quot;value&quot; : &quot;cf146560-392a-43e6-bf99-2ca3b5d42b5c&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;status&quot; : &quot;Active&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Supply Source has been archived and cannot be modified.&quot;,
          &quot;details&quot; : &quot;1005&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'updateSupplySourceStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('SupplySourcesApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->updateSupplySourceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for updateSupplySourceStatus_403
     */
    public function testUpdateSupplySourceStatus403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_404
     */
    public function testUpdateSupplySourceStatus404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_413
     */
    public function testUpdateSupplySourceStatus413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_415
     */
    public function testUpdateSupplySourceStatus415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_429
     */
    public function testUpdateSupplySourceStatus429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_500
     */
    public function testUpdateSupplySourceStatus500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for updateSupplySourceStatus_503
     */
    public function testUpdateSupplySourceStatus503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
