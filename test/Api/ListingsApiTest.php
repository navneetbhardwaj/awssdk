<?php
/**
 * ListingsApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\listings\items\v2021_08_01\ListingsApi;
use SpApi\ObjectSerializer;

/**
 * ListingsApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListingsApiTest extends BaseTestCase
{
    private ListingsApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('ListingsApi', $this->getName());
        $this->apiInstance = new ListingsApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for deleteListingsItem_200
     */
    public function testDeleteListingsItem200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testDeleteListingsItem200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Successfully understood the listings item delete request. See the response to determine whether the submission has been accepted.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ListingsItemSubmissionResponse&quot;
      },
      &quot;example&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : { }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'deleteListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->deleteListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for deleteListingsItem_400
     */
    public function testDeleteListingsItem400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testDeleteListingsItem400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;BadSKU&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BAD_REQUEST&quot;,
          &quot;message&quot; : &quot;Invalid input&quot;,
          &quot;details&quot; : &quot;Invalid input&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'deleteListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->deleteListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for deleteListingsItem_403
     */
    public function testDeleteListingsItem403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for deleteListingsItem_413
     */
    public function testDeleteListingsItem413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for deleteListingsItem_415
     */
    public function testDeleteListingsItem415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for deleteListingsItem_429
     */
    public function testDeleteListingsItem429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for deleteListingsItem_500
     */
    public function testDeleteListingsItem500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for deleteListingsItem_503
     */
    public function testDeleteListingsItem503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_200
     */
    public function testGetListingsItem200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingsItem200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/Item&quot;
      },
      &quot;example&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;summaries&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;asin&quot; : &quot;B071VG5N9D&quot;,
          &quot;productType&quot; : &quot;LUGGAGE&quot;,
          &quot;conditionType&quot; : &quot;new_new&quot;,
          &quot;status&quot; : [ &quot;BUYABLE&quot; ],
          &quot;itemName&quot; : &quot;Hardside Carry-On Spinner Suitcase Luggage&quot;,
          &quot;createdDate&quot; : &quot;2021-02-01T00:00:00Z&quot;,
          &quot;lastUpdatedDate&quot; : &quot;2021-03-01T00:00:00Z&quot;,
          &quot;mainImage&quot; : {
            &quot;link&quot; : &quot;https://www.example.com/luggage.png&quot;,
            &quot;height&quot; : 500,
            &quot;width&quot; : 500
          }
        } ],
        &quot;offers&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;offerType&quot; : &quot;B2C&quot;,
          &quot;price&quot; : {
            &quot;currencyCode&quot; : &quot;USD&quot;,
            &quot;amount&quot; : &quot;100.00&quot;
          },
          &quot;audience&quot; : {
            &quot;value&quot; : &quot;ALL&quot;,
            &quot;displayName&quot; : &quot;Sell on Amazon&quot;
          }
        } ],
        &quot;fulfillmentAvailability&quot; : [ {
          &quot;fulfillmentChannelCode&quot; : &quot;DEFAULT&quot;,
          &quot;quantity&quot; : 100
        } ],
        &quot;issues&quot; : [ {
          &quot;code&quot; : &quot;90220&quot;,
          &quot;message&quot; : &quot;&#39;size&#39; is required but not supplied.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;attributeNames&quot; : [ &quot;size&quot; ],
          &quot;categories&quot; : [ &quot;MISSING_ATTRIBUTE&quot; ]
        }, {
          &quot;code&quot; : &quot;18027&quot;,
          &quot;message&quot; : &quot;We believe the main image has text, logo, graphic or watermark which is not permitted for this product type. Please submit a compliant image to lift the suppression. Also refer to Product image requirements.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ &quot;INVALID_IMAGE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;SEARCH_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;EXEMPT_UNTIL_EXPIRY_DATE&quot;,
              &quot;expiryDate&quot; : &quot;2025-05-28T00:36:48.914Z&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;99300&quot;,
          &quot;message&quot; : &quot;Product Detail Page Rules Violation (Inaccurate information on product detail page)&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;ATTRIBUTE_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;EXEMPT&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;18155&quot;,
          &quot;message&quot; : &quot;The &#39;minimum price&#39; is greater than the selling price (excluding shipping) for the listing. Please review and update your price and/or minimum price.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ &quot;INVALID_PRICE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;LISTING_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;18742&quot;,
          &quot;message&quot; : &quot;Restricted Products Policy Violation&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;CATALOG_ITEM_REMOVED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : { }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;summaries&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;asin&quot; : &quot;B071VG5N9D&quot;,
          &quot;productType&quot; : &quot;LUGGAGE&quot;,
          &quot;conditionType&quot; : &quot;new_new&quot;,
          &quot;status&quot; : [ &quot;BUYABLE&quot; ],
          &quot;itemName&quot; : &quot;Hardside Carry-On Spinner Suitcase Luggage&quot;,
          &quot;createdDate&quot; : &quot;2021-02-01T00:00:00Z&quot;,
          &quot;lastUpdatedDate&quot; : &quot;2021-03-01T00:00:00Z&quot;,
          &quot;mainImage&quot; : {
            &quot;link&quot; : &quot;https://www.example.com/luggage.png&quot;,
            &quot;height&quot; : 500,
            &quot;width&quot; : 500
          }
        } ],
        &quot;offers&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;offerType&quot; : &quot;B2C&quot;,
          &quot;price&quot; : {
            &quot;currencyCode&quot; : &quot;USD&quot;,
            &quot;amount&quot; : &quot;100.00&quot;
          },
          &quot;audience&quot; : {
            &quot;value&quot; : &quot;ALL&quot;,
            &quot;displayName&quot; : &quot;Sell on Amazon&quot;
          }
        } ],
        &quot;fulfillmentAvailability&quot; : [ {
          &quot;fulfillmentChannelCode&quot; : &quot;DEFAULT&quot;,
          &quot;quantity&quot; : 100
        } ],
        &quot;issues&quot; : [ {
          &quot;code&quot; : &quot;90220&quot;,
          &quot;message&quot; : &quot;&#39;size&#39; is required but not supplied.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;attributeNames&quot; : [ &quot;size&quot; ],
          &quot;categories&quot; : [ &quot;MISSING_ATTRIBUTE&quot; ]
        }, {
          &quot;code&quot; : &quot;18027&quot;,
          &quot;message&quot; : &quot;We believe the main image has text, logo, graphic or watermark which is not permitted for this product type. Please submit a compliant image to lift the suppression. Also refer to Product image requirements.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ &quot;INVALID_IMAGE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;SEARCH_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;EXEMPT_UNTIL_EXPIRY_DATE&quot;,
              &quot;expiryDate&quot; : &quot;2025-05-28T00:36:48.914Z&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;99300&quot;,
          &quot;message&quot; : &quot;Product Detail Page Rules Violation (Inaccurate information on product detail page)&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;ATTRIBUTE_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;EXEMPT&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;18155&quot;,
          &quot;message&quot; : &quot;The &#39;minimum price&#39; is greater than the selling price (excluding shipping) for the listing. Please review and update your price and/or minimum price.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ &quot;INVALID_PRICE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;LISTING_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;18742&quot;,
          &quot;message&quot; : &quot;Restricted Products Policy Violation&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;categories&quot; : [ ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;CATALOG_ITEM_REMOVED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingsItem_400
     */
    public function testGetListingsItem400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetListingsItem400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;BadSKU&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BAD_REQUEST&quot;,
          &quot;message&quot; : &quot;Invalid input&quot;,
          &quot;details&quot; : &quot;Invalid input&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getListingsItem_403
     */
    public function testGetListingsItem403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_404
     */
    public function testGetListingsItem404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_413
     */
    public function testGetListingsItem413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_415
     */
    public function testGetListingsItem415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_429
     */
    public function testGetListingsItem429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_500
     */
    public function testGetListingsItem500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getListingsItem_503
     */
    public function testGetListingsItem503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_200
     */
    public function testPatchListingsItem200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPatchListingsItem200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Successfully understood the listings item patch request. See the response to determine if the submission was accepted.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ListingsItemSubmissionResponse&quot;
      },
      &quot;example&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : { }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;VALIDATION_VALID&quot;
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;ATVPDKIKX0DER&quot; ]
          },
          &quot;includedData&quot; : {
            &quot;value&quot; : [ &quot;identifiers&quot;, &quot;issues&quot; ]
          },
          &quot;mode&quot; : {
            &quot;value&quot; : &quot;VALIDATION_PREVIEW&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;VALIDATION_VALID&quot;,
        &quot;status&quot; : &quot;VALID&quot;,
        &quot;submissionId&quot; : &quot;1edc94ea-a3d7-210b-42bc-0ec72c1384762&quot;,
        &quot;identifiers&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;asin&quot; : &quot;B07N4M94X4&quot;
        } ],
        &quot;issues&quot; : [ ]
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;VALIDATION_INVALID&quot;
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;ATVPDKIKX0DER&quot; ]
          },
          &quot;includedData&quot; : {
            &quot;value&quot; : [ &quot;identifiers&quot;, &quot;issues&quot; ]
          },
          &quot;mode&quot; : {
            &quot;value&quot; : &quot;VALIDATION_PREVIEW&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;VALIDATION_INVALID&quot;,
        &quot;status&quot; : &quot;INVALID&quot;,
        &quot;submissionId&quot; : &quot;a1c562c2-1695-11ee-be56-0242ac120002&quot;,
        &quot;identifiers&quot; : [ ],
        &quot;issues&quot; : [ {
          &quot;code&quot; : &quot;90000900&quot;,
          &quot;message&quot; : &quot;The attributes are invalid.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;attributeNames&quot; : [ &quot;fake_attribute&quot; ],
          &quot;categories&quot; : [ &quot;INVALID_ATTRIBUTE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;ATTRIBUTE_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'patchListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->patchListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for patchListingsItem_400
     */
    public function testPatchListingsItem400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPatchListingsItem400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;BadSKU&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BAD_REQUEST&quot;,
          &quot;message&quot; : &quot;Invalid input&quot;,
          &quot;details&quot; : &quot;Invalid input&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'patchListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->patchListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for patchListingsItem_403
     */
    public function testPatchListingsItem403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_413
     */
    public function testPatchListingsItem413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_415
     */
    public function testPatchListingsItem415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_429
     */
    public function testPatchListingsItem429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_500
     */
    public function testPatchListingsItem500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for patchListingsItem_503
     */
    public function testPatchListingsItem503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_200
     */
    public function testPutListingsItem200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPutListingsItem200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Successfully understood the request to create or fully-update a listings item. See the response to determine if the submission has been accepted.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ListingsItemSubmissionResponse&quot;
      },
      &quot;example&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : { }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
        &quot;status&quot; : &quot;ACCEPTED&quot;,
        &quot;submissionId&quot; : &quot;f1dc2914-75dd-11ea-bc55-0242ac130003&quot;,
        &quot;issues&quot; : [ ]
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;VALIDATION_VALID&quot;
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;ATVPDKIKX0DER&quot; ]
          },
          &quot;includedData&quot; : {
            &quot;value&quot; : [ &quot;identifiers&quot;, &quot;issues&quot; ]
          },
          &quot;mode&quot; : {
            &quot;value&quot; : &quot;VALIDATION_PREVIEW&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;VALIDATION_VALID&quot;,
        &quot;status&quot; : &quot;VALID&quot;,
        &quot;submissionId&quot; : &quot;1edc94ea-a3d7-210b-42bc-0ec72c1384762&quot;,
        &quot;identifiers&quot; : [ {
          &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
          &quot;asin&quot; : &quot;B07N4M94X4&quot;
        } ],
        &quot;issues&quot; : [ ]
      }
    }, {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;VALIDATION_INVALID&quot;
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;ATVPDKIKX0DER&quot; ]
          },
          &quot;includedData&quot; : {
            &quot;value&quot; : [ &quot;identifiers&quot;, &quot;issues&quot; ]
          },
          &quot;mode&quot; : {
            &quot;value&quot; : &quot;VALIDATION_PREVIEW&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;sku&quot; : &quot;VALIDATION_INVALID&quot;,
        &quot;status&quot; : &quot;INVALID&quot;,
        &quot;submissionId&quot; : &quot;a1c562c2-1695-11ee-be56-0242ac120002&quot;,
        &quot;identifiers&quot; : [ ],
        &quot;issues&quot; : [ {
          &quot;code&quot; : &quot;90220&quot;,
          &quot;message&quot; : &quot;&#39;condition_type&#39; is required but not supplied.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;attributeNames&quot; : [ &quot;condition_type&quot; ],
          &quot;categories&quot; : [ &quot;MISSING_ATTRIBUTE&quot; ],
          &quot;enforcements&quot; : {
            &quot;actions&quot; : [ {
              &quot;action&quot; : &quot;LISTING_SUPPRESSED&quot;
            } ],
            &quot;exemption&quot; : {
              &quot;status&quot; : &quot;NOT_EXEMPT&quot;
            }
          }
        }, {
          &quot;code&quot; : &quot;90000900&quot;,
          &quot;message&quot; : &quot;The attributes are invalid.&quot;,
          &quot;severity&quot; : &quot;ERROR&quot;,
          &quot;attributeNames&quot; : [ &quot;fake_attribute&quot; ],
          &quot;categories&quot; : [ ]
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'putListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->putListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for putListingsItem_400
     */
    public function testPutListingsItem400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testPutListingsItem400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sku&quot; : {
            &quot;value&quot; : &quot;BadSKU&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BAD_REQUEST&quot;,
          &quot;message&quot; : &quot;Invalid input&quot;,
          &quot;details&quot; : &quot;Invalid input&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'putListingsItem'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->putListingsItemWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for putListingsItem_403
     */
    public function testPutListingsItem403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_413
     */
    public function testPutListingsItem413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_415
     */
    public function testPutListingsItem415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_429
     */
    public function testPutListingsItem429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_500
     */
    public function testPutListingsItem500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for putListingsItem_503
     */
    public function testPutListingsItem503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_200
     */
    public function testSearchListingsItems200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSearchListingsItems200', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ItemSearchResults&quot;
      },
      &quot;example&quot; : {
        &quot;numberOfResults&quot; : 3,
        &quot;pagination&quot; : {
          &quot;nextToken&quot; : &quot;xsdflkj324lkjsdlkj3423klkjsdfkljlk2j34klj2l3k4jlksdjl234&quot;,
          &quot;previousToken&quot; : &quot;ilkjsdflkj234lkjds234234lkjl234lksjdflkj234234lkjsfsdflkj333d&quot;
        },
        &quot;items&quot; : [ {
          &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
          &quot;summaries&quot; : [ {
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;asin&quot; : &quot;B071VG5N9D&quot;,
            &quot;productType&quot; : &quot;LUGGAGE&quot;,
            &quot;conditionType&quot; : &quot;new_new&quot;,
            &quot;status&quot; : [ &quot;BUYABLE&quot; ],
            &quot;itemName&quot; : &quot;Hardside Carry-On Spinner Suitcase Luggage&quot;,
            &quot;createdDate&quot; : &quot;2021-02-01T00:00:00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2021-03-01T00:00:00Z&quot;,
            &quot;mainImage&quot; : {
              &quot;link&quot; : &quot;https://www.example.com/luggage.png&quot;,
              &quot;height&quot; : 500,
              &quot;width&quot; : 500
            }
          } ],
          &quot;attributes&quot; : {
            &quot;total_hdmi_ports&quot; : [ {
              &quot;value&quot; : 4,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;resolution&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;4K&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_weight&quot; : [ {
              &quot;unit&quot; : &quot;pounds&quot;,
              &quot;value&quot; : 107.6,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;product_subcategory&quot; : [ {
              &quot;value&quot; : &quot;50400120&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;bullet_point&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;SMART TV WITH UNIVERSAL GUIDE: Simple On-screen Guide is an easy way to find streaming content and live TV shows&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;100% COLOR VOLUME WITH QUANTUM DOTS: Powered by Quantum dots, Samsung’s 4K QLED TV offers over a billion shades of brilliant color and 100% color volume for exceptional depth of detail that will draw you in to the picture for the best 4K TV experience&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;QUANTUM PROCESSOR 4K: Intelligently powered processor instantly upscales content to 4K for sharp detail and refined color&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;QUANTUM HDR 4X: 4K depth of detail with high dynamic range powered by HDR10+ delivers the lightest to darkest colors, scene by scene, for amazing picture realism&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;AMBIENT MODE: Customizes and complements your living space by turning a blank screen of this big screen TV into enticing visuals including décor, info, photos and artwork&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;SMART TV FEATURES: OneRemote to control all compatible devices, Bixby voice command, on-screen universal guide, SmartThings to control compatible home appliances and devices, smart speaker expandability with Alexa and Google Assistant compatibility, and more&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_dimensions&quot; : [ {
              &quot;width&quot; : {
                &quot;unit&quot; : &quot;inches&quot;,
                &quot;value&quot; : 72.4
              },
              &quot;length&quot; : {
                &quot;unit&quot; : &quot;inches&quot;,
                &quot;value&quot; : 2.4
              },
              &quot;height&quot; : {
                &quot;unit&quot; : &quot;inches&quot;,
                &quot;value&quot; : 41.4
              },
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;brand&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;SAMSUNG&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;generic_keyword&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;oled 65 inch smart tv qled 75 inch tv 85 inch 4k tv smart tv 4k tv 65 inch qled 82 inch tv 8k tv oled 65 smart tv qled 65 inch 80 inch tv 4k 4k tv shield tv 2018&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;q9fn qled 2018 oled 4k 4k oled toshiba antenna dvd player outdoor tv kitchen tv fire tv firetv hdtv hd tv android shield tv gaming deals tv ears dvr speakers digital tv antenna tv android tv frame mount&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;4k hdr tv 70 tv shield tv 90 inch tv gaming tv 75 tv 65 inch 4k tv tv 65 inch smart tv 4k 65 inch 4k tv 65 inch 4k tv 4k tv uhd tv uhd tv 4k&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;smart tv 4k tv tv tv oled tv 65 inch smart tv 4k tv 65 inch smart tv shield tv 2018 tv 4k oled tv 65 4k tv 4k smart tv 4k hdr tv shield tv gaming tv 65 inch 4k tv tv 65 inch smart tv 4k 65 inch 4k tv 65 inch 4k tv 4k tv uhd tv uhd tv 4k&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;control_method&quot; : [ {
              &quot;value&quot; : &quot;voice&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_package_dimensions&quot; : [ {
              &quot;length&quot; : {
                &quot;unit&quot; : &quot;centimeters&quot;,
                &quot;value&quot; : 26.67
              },
              &quot;width&quot; : {
                &quot;unit&quot; : &quot;centimeters&quot;,
                &quot;value&quot; : 121.92
              },
              &quot;height&quot; : {
                &quot;unit&quot; : &quot;centimeters&quot;,
                &quot;value&quot; : 203.2
              },
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;image_aspect_ratio&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;16:9&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;part_number&quot; : [ {
              &quot;value&quot; : &quot;QN82Q60RAFXZA&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;includes_remote&quot; : [ {
              &quot;value&quot; : true,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;style&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;TV only&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_type_name&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;TV&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;battery&quot; : [ {
              &quot;cell_composition&quot; : [ {
                &quot;value&quot; : &quot;alkaline&quot;
              } ],
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;image_contrast_ratio&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;QLED 4K&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;manufacturer&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Samsung&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;number_of_boxes&quot; : [ {
              &quot;value&quot; : 1,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;total_usb_ports&quot; : [ {
              &quot;value&quot; : 2,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;model_number&quot; : [ {
              &quot;value&quot; : &quot;QN82Q60RAFXZA&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;supplier_declared_dg_hz_regulation&quot; : [ {
              &quot;value&quot; : &quot;not_applicable&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;num_batteries&quot; : [ {
              &quot;quantity&quot; : 2,
              &quot;type&quot; : &quot;aaa&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;california_proposition_65&quot; : [ {
              &quot;compliance_type&quot; : &quot;on_product_combined_cancer_reproductive&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;compliance_type&quot; : &quot;chemical&quot;,
              &quot;chemical_names&quot; : [ &quot;di_2_ethylhexyl_phthalate_dehp&quot; ],
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;display&quot; : [ {
              &quot;resolution_maximum&quot; : [ {
                &quot;unit&quot; : &quot;pixels&quot;,
                &quot;language_tag&quot; : &quot;en_US&quot;,
                &quot;value&quot; : &quot;3840 x 2160&quot;
              } ],
              &quot;size&quot; : [ {
                &quot;unit&quot; : &quot;inches&quot;,
                &quot;value&quot; : 82
              } ],
              &quot;type&quot; : [ {
                &quot;language_tag&quot; : &quot;en_US&quot;,
                &quot;value&quot; : &quot;QLED&quot;
              } ],
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_name&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Samsung QN82Q60RAFXZA Flat 82-Inch QLED 4K Q60 Series (2019) Ultra HD Smart TV with HDR and Alexa Compatibility&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;list_price&quot; : [ {
              &quot;currency&quot; : &quot;USD&quot;,
              &quot;value&quot; : 3799.99,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;batteries_required&quot; : [ {
              &quot;value&quot; : false,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;includes_rechargable_battery&quot; : [ {
              &quot;value&quot; : false,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;product_site_launch_date&quot; : [ {
              &quot;value&quot; : &quot;2019-03-11T08:00:01.000Z&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;product_category&quot; : [ {
              &quot;value&quot; : &quot;50400100&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;batteries_included&quot; : [ {
              &quot;value&quot; : false,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;connectivity_technology&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Bluetooth&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;USB&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Wireless&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;HDMI&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;included_components&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;QLED Standard Smart Remote&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Power Cable&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Stand&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Samsung Smart Control&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;specification_met&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;parental_control_technology&quot; : [ {
              &quot;value&quot; : &quot;V-Chip&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;power_consumption&quot; : [ {
              &quot;unit&quot; : &quot;watts&quot;,
              &quot;value&quot; : 120,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;cpsia_cautionary_statement&quot; : [ {
              &quot;value&quot; : &quot;no_warning_applicable&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_type_keyword&quot; : [ {
              &quot;value&quot; : &quot;qled-televisions&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;number_of_items&quot; : [ {
              &quot;value&quot; : 1,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;warranty_description&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;1 year manufacturer&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;max_resolution&quot; : [ {
              &quot;unit&quot; : &quot;pixels&quot;,
              &quot;value&quot; : 8.3,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;color&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Black&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;screen_surface_description&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Flat&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;item_package_weight&quot; : [ {
              &quot;unit&quot; : &quot;kilograms&quot;,
              &quot;value&quot; : 62.142,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;speaker_type&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;2CH&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;supported_internet_services&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Amazon Instant Video&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;YouTube&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Netflix&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Hulu&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Browser&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;tuner_technology&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Analog Tuner&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;controller_type&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;SmartThings&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Voice Control&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;special_feature&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;100% Color Volume with Quantum Dot; Quantum Processor 4K; Ambient Mode; Quantum HDR 4X; Real Game Enhancer&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;wireless_communication_technology&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Wi-Fi::Wi-Fi Direct::Bluetooth&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;model_year&quot; : [ {
              &quot;value&quot; : 2019,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;power_source_type&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Corded Electric&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;street_date&quot; : [ {
              &quot;value&quot; : &quot;2019-03-21T00:00:01Z&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;mounting_type&quot; : [ {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Table Mount&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            }, {
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;Wall Mount&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ],
            &quot;refresh_rate&quot; : [ {
              &quot;unit&quot; : &quot;hertz&quot;,
              &quot;language_tag&quot; : &quot;en_US&quot;,
              &quot;value&quot; : &quot;120&quot;,
              &quot;marketplace_id&quot; : &quot;ATVPDKIKX0DER&quot;
            } ]
          },
          &quot;offers&quot; : [ {
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;offerType&quot; : &quot;B2C&quot;,
            &quot;price&quot; : {
              &quot;currencyCode&quot; : &quot;USD&quot;,
              &quot;amount&quot; : &quot;100.00&quot;
            }
          } ],
          &quot;fulfillmentAvailability&quot; : [ {
            &quot;fulfillmentChannelCode&quot; : &quot;DEFAULT&quot;,
            &quot;quantity&quot; : 100
          } ],
          &quot;issues&quot; : [ {
            &quot;code&quot; : &quot;90220&quot;,
            &quot;message&quot; : &quot;&#39;size&#39; is required but not supplied.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;attributeNames&quot; : [ &quot;size&quot; ],
            &quot;categories&quot; : [ &quot;MISSING_ATTRIBUTE&quot; ]
          }, {
            &quot;code&quot; : &quot;18027&quot;,
            &quot;message&quot; : &quot;We believe the main image has text, logo, graphic or watermark which is not permitted for this product type. Please submit a compliant image to lift the suppression. Also refer to Product image requirements.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ &quot;INVALID_IMAGE&quot; ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;SEARCH_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;EXEMPT_UNTIL_EXPIRY_DATE&quot;,
                &quot;expiryDate&quot; : &quot;2025-05-28T00:36:48.914Z&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;99300&quot;,
            &quot;message&quot; : &quot;Product Detail Page Rules Violation (Inaccurate information on product detail page)&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;ATTRIBUTE_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;EXEMPT&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;18155&quot;,
            &quot;message&quot; : &quot;The &#39;minimum price&#39; is greater than the selling price (excluding shipping) for the listing. Please review and update your price and/or minimum price.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ &quot;INVALID_PRICE&quot; ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;LISTING_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;NOT_EXEMPT&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;18742&quot;,
            &quot;message&quot; : &quot;Restricted Products Policy Violation&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;CATALOG_ITEM_REMOVED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;NOT_EXEMPT&quot;
              }
            }
          } ]
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;identifiersType&quot; : {
            &quot;value&quot; : &quot;SKU&quot;
          },
          &quot;identifiers&quot; : {
            &quot;value&quot; : [ &quot;GM-ZDPI-9B4E&quot;, &quot;HW-ZDPI-9B4E&quot;, &quot;TC-ZDPI-9B4E&quot; ]
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;ATVPDKIKX0DER&quot; ]
          },
          &quot;includedData&quot; : {
            &quot;value&quot; : [ &quot;summaries&quot;, &quot;offers&quot;, &quot;fulfillmentAvailability&quot;, &quot;issues&quot; ]
          },
          &quot;pageSize&quot; : {
            &quot;value&quot; : 1
          }
        }
      },
      &quot;response&quot; : {
        &quot;numberOfResults&quot; : 3,
        &quot;pagination&quot; : {
          &quot;nextToken&quot; : &quot;xsdflkj324lkjsdlkj3423klkjsdfkljlk2j34klj2l3k4jlksdjl234&quot;,
          &quot;previousToken&quot; : &quot;ilkjsdflkj234lkjds234234lkjl234lksjdflkj234234lkjsfsdflkj333d&quot;
        },
        &quot;items&quot; : [ {
          &quot;sku&quot; : &quot;GM-ZDPI-9B4E&quot;,
          &quot;summaries&quot; : [ {
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;asin&quot; : &quot;B071VG5N9D&quot;,
            &quot;productType&quot; : &quot;LUGGAGE&quot;,
            &quot;conditionType&quot; : &quot;new_new&quot;,
            &quot;status&quot; : [ &quot;BUYABLE&quot; ],
            &quot;itemName&quot; : &quot;Hardside Carry-On Spinner Suitcase Luggage&quot;,
            &quot;createdDate&quot; : &quot;2021-02-01T00:00:00Z&quot;,
            &quot;lastUpdatedDate&quot; : &quot;2021-03-01T00:00:00Z&quot;,
            &quot;mainImage&quot; : {
              &quot;link&quot; : &quot;https://www.example.com/luggage.png&quot;,
              &quot;height&quot; : 500,
              &quot;width&quot; : 500
            }
          } ],
          &quot;offers&quot; : [ {
            &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
            &quot;offerType&quot; : &quot;B2C&quot;,
            &quot;price&quot; : {
              &quot;currencyCode&quot; : &quot;USD&quot;,
              &quot;amount&quot; : &quot;100.00&quot;
            }
          } ],
          &quot;fulfillmentAvailability&quot; : [ {
            &quot;fulfillmentChannelCode&quot; : &quot;DEFAULT&quot;,
            &quot;quantity&quot; : 100
          } ],
          &quot;issues&quot; : [ {
            &quot;code&quot; : &quot;90220&quot;,
            &quot;message&quot; : &quot;&#39;size&#39; is required but not supplied.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;attributeNames&quot; : [ &quot;size&quot; ],
            &quot;categories&quot; : [ &quot;MISSING_ATTRIBUTE&quot; ]
          }, {
            &quot;code&quot; : &quot;18027&quot;,
            &quot;message&quot; : &quot;We believe the main image has text, logo, graphic or watermark which is not permitted for this product type. Please submit a compliant image to lift the suppression. Also refer to Product image requirements.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ &quot;INVALID_IMAGE&quot; ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;SEARCH_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;EXEMPT_UNTIL_EXPIRY_DATE&quot;,
                &quot;expiryDate&quot; : &quot;2025-05-28T00:36:48.914Z&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;99300&quot;,
            &quot;message&quot; : &quot;Product Detail Page Rules Violation (Inaccurate information on product detail page)&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;ATTRIBUTE_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;EXEMPT&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;18155&quot;,
            &quot;message&quot; : &quot;The &#39;minimum price&#39; is greater than the selling price (excluding shipping) for the listing. Please review and update your price and/or minimum price.&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ &quot;INVALID_PRICE&quot; ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;LISTING_SUPPRESSED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;NOT_EXEMPT&quot;
              }
            }
          }, {
            &quot;code&quot; : &quot;18742&quot;,
            &quot;message&quot; : &quot;Restricted Products Policy Violation&quot;,
            &quot;severity&quot; : &quot;ERROR&quot;,
            &quot;categories&quot; : [ ],
            &quot;enforcements&quot; : {
              &quot;actions&quot; : [ {
                &quot;action&quot; : &quot;CATALOG_ITEM_REMOVED&quot;
              } ],
              &quot;exemption&quot; : {
                &quot;status&quot; : &quot;NOT_EXEMPT&quot;
              }
            }
          } ]
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'searchListingsItems'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->searchListingsItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for searchListingsItems_400
     */
    public function testSearchListingsItems400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSearchListingsItems400', 'ListingsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;sellerId&quot; : {
            &quot;value&quot; : &quot;SellerId&quot;
          },
          &quot;marketplaceIds&quot; : {
            &quot;value&quot; : [ &quot;invalid&quot; ]
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;BAD_REQUEST&quot;,
          &quot;message&quot; : &quot;Invalid input&quot;,
          &quot;details&quot; : &quot;Invalid input&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'searchListingsItems'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ListingsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->searchListingsItemsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for searchListingsItems_403
     */
    public function testSearchListingsItems403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_404
     */
    public function testSearchListingsItems404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_413
     */
    public function testSearchListingsItems413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_415
     */
    public function testSearchListingsItems415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_429
     */
    public function testSearchListingsItems429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_500
     */
    public function testSearchListingsItems500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for searchListingsItems_503
     */
    public function testSearchListingsItems503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
