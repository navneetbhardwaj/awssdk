<?php
/**
 * TransactionsApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 *
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\sellerWallet\v2024_03_01\TransactionsApi;
use SpApi\ObjectSerializer;

/**
 * TransactionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApiTest extends BaseTestCase
{
    private TransactionsApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('TransactionsApi', $this->getName());
        $this->apiInstance = new TransactionsApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for createTransaction_200
     */
    public function testCreateTransaction200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction200', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/Transaction&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase200&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;Joane Packaging Ltd&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market Street&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;transactionId&quot; : &quot;amzn.transaction.ALNR19JCVWLN3E&quot;,
        &quot;transactionType&quot; : &quot;DEBIT&quot;,
        &quot;transactionStatus&quot; : &quot;PAYEE_UNDER_REVIEW&quot;,
        &quot;transactionRequestDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;expectedCompletionDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;transactionActualCompletionDate&quot; : &quot;2023-09-30T02:32:59.787Z&quot;,
        &quot;lastUpdateDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;requesterName&quot; : &quot;TppOrgId&quot;,
        &quot;transactionRequesterSource&quot; : &quot;TPP&quot;,
        &quot;transactionDescription&quot; : &quot;Test transaction request&quot;,
        &quot;transactionSourceAccount&quot; : {
          &quot;accountId&quot; : &quot;sourceAccountIdCase200&quot;,
          &quot;bankAccountHolderName&quot; : &quot;John Doe&quot;,
          &quot;bankName&quot; : &quot;Amazon Seller Wallet&quot;,
          &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
          &quot;bankAccountCurrency&quot; : &quot;GBP&quot;
        },
        &quot;transactionDestinationAccount&quot; : {
          &quot;bankAccountHolderName&quot; : &quot;Johnny Packaging&quot;,
          &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
          &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
          &quot;bankAccountNumberTail&quot; : &quot;819&quot;,
          &quot;bankAccountCurrency&quot; : &quot;GBP&quot;,
          &quot;bankAccountCountryCode&quot; : &quot;EU&quot;
        },
        &quot;transactionRequestAmount&quot; : {
          &quot;currencyCode&quot; : &quot;EUR&quot;,
          &quot;currencyAmount&quot; : 500.0
        },
        &quot;transferRateDetails&quot; : {
          &quot;baseAmount&quot; : {
            &quot;currencyCode&quot; : &quot;EUR&quot;,
            &quot;currencyAmount&quot; : 500.0
          },
          &quot;fxRateDetails&quot; : {
            &quot;fxRateId&quot; : &quot;UNIQUE_FX_RATE_ID_1&quot;,
            &quot;baseRate&quot; : 7.6915,
            &quot;effectiveFxRate&quot; : 7.6084,
            &quot;rateDirection&quot; : &quot;BUY&quot;
          },
          &quot;transferAmount&quot; : {
            &quot;currencyCode&quot; : &quot;CNY&quot;,
            &quot;currencyAmount&quot; : 3804.2
          },
          &quot;fees&quot; : [ {
            &quot;feeId&quot; : &quot;Unique_FeeId_001&quot;,
            &quot;feeType&quot; : &quot;TRANSACTION_FEE&quot;,
            &quot;feeRateValue&quot; : 0.9,
            &quot;feeAmount&quot; : {
              &quot;currencyCode&quot; : &quot;EUR&quot;,
              &quot;currencyAmount&quot; : 4.5
            }
          }, {
            &quot;feeId&quot; : &quot;Unique_FeeId_002&quot;,
            &quot;feeType&quot; : &quot;TAX&quot;,
            &quot;feeRateValue&quot; : 20.0,
            &quot;feeAmount&quot; : {
              &quot;currencyCode&quot; : &quot;EUR&quot;,
              &quot;currencyAmount&quot; : 0.9
            }
          } ]
        },
        &quot;transactionFinalAmount&quot; : {
          &quot;currencyCode&quot; : &quot;CNY&quot;,
          &quot;currencyAmount&quot; : 3804.2
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_400
     */
    public function testCreateTransaction400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction400', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase400&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;Johnny Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market Street&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid or Missing signature.&quot;,
          &quot;details&quot; : &quot;Missing addressDigitalSignature&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_403
     */
    public function testCreateTransaction403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction403', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase403&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;Johnny Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market Street&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;UnauthorizedRequest&quot;,
          &quot;message&quot; : &quot;Invalid WAC certificate.&quot;,
          &quot;details&quot; : &quot;NCA Status for the certificate is invalid&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_404
     */
    public function testCreateTransaction404()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction404', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The resource specified does not exist.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase404&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market Street&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;NotFound&quot;,
          &quot;message&quot; : &quot;BankAccount not found.&quot;,
          &quot;details&quot; : &quot;BankAccount doesn&#39;t exists for invalid SourceAccountId&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(404, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 404, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 404);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_408
     */
    public function testCreateTransaction408()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction408', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request Timed Out.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase408&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market St&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;City of Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestTimedOut&quot;,
          &quot;message&quot; : &quot;Request Timed Out&quot;,
          &quot;details&quot; : &quot;Server did not respond in time&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(408, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 408, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 408);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_413
     */
    public function testCreateTransaction413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createTransaction_415
     */
    public function testCreateTransaction415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for createTransaction_422
     */
    public function testCreateTransaction422()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction422', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The request was well-formed (i.e., syntactically correct) but could not be processed because of some restrictions like insufficient funds, transaction limit breach, etc.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase422&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market St&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InsufficientBalance&quot;,
          &quot;message&quot; : &quot;Insufficient Balance&quot;,
          &quot;details&quot; : &quot;Insufficient Balance&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(422, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 422, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 422);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_429
     */
    public function testCreateTransaction429()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction429', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The frequency of requests was greater than allowed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase429&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market St&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestThrottled&quot;,
          &quot;message&quot; : &quot;Request Throttled&quot;,
          &quot;details&quot; : &quot;Server throttled the request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(429, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 429, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 429);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_500
     */
    public function testCreateTransaction500()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction500', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;An unexpected condition occurred that prevented the server from fulfilling the request.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase500&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market St&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InternalServerError&quot;,
          &quot;message&quot; : &quot;Internal Server Error&quot;,
          &quot;details&quot; : &quot;Internal Server Error Occurred&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(500, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 500, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 500);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for createTransaction_503
     */
    public function testCreateTransaction503()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testCreateTransaction503', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Temporary overloading or maintenance of the server.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;sourceAccountId&quot; : &quot;sourceAccountIdCase503&quot;,
              &quot;destinationTransactionInstrument&quot; : {
                &quot;bankAccount&quot; : {
                  &quot;accountHolderName&quot; : &quot;John Doe&quot;,
                  &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
                  &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
                  &quot;bankAccountOwnershipType&quot; : &quot;THIRD_PARTY&quot;,
                  &quot;routingNumber&quot; : &quot;RBOSGB2L&quot;,
                  &quot;bankNumberFormat&quot; : &quot;BASIC&quot;,
                  &quot;accountCountryCode&quot; : &quot;GB&quot;,
                  &quot;accountCurrency&quot; : &quot;GBP&quot;,
                  &quot;bankAccountNumberTail&quot; : &quot;819&quot;
                },
                &quot;bankAccountNumber&quot; : &quot;GB29RBOS60161331926819&quot;
              },
              &quot;destinationAccountHolderAddress&quot; : {
                &quot;addressLine1&quot; : &quot;4 East Market St&quot;,
                &quot;city&quot; : &quot;Edinburgh&quot;,
                &quot;addressLine2&quot; : &quot;Unit 101&quot;,
                &quot;state&quot; : &quot;Alba&quot;,
                &quot;postalCode&quot; : &quot;EH88BG&quot;,
                &quot;country&quot; : &quot;United Kingdom&quot;,
                &quot;countryCode&quot; : &quot;UK&quot;
              },
              &quot;sourceAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 1000.0
              },
              &quot;requestTime&quot; : &quot;2023-09-26T01:21:53.002Z&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;ServiceUnavailable&quot;,
          &quot;message&quot; : &quot;Server Unavailable&quot;,
          &quot;details&quot; : &quot;Server is not accepting request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'createTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->createTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(503, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 503, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 503);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_200
     */
    public function testGetTransaction200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction200', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/Transaction&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase200&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;transactionId&quot; : &quot;amzn.transaction.AKJBNEFNL23R84V&quot;,
        &quot;transactionType&quot; : &quot;DEBIT&quot;,
        &quot;transactionStatus&quot; : &quot;PAYEE_UNDER_REVIEW&quot;,
        &quot;transactionRequestDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;expectedCompletionDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;transactionActualCompletionDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;lastUpdateDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
        &quot;requesterName&quot; : &quot;TppOrgId&quot;,
        &quot;transactionRequesterSource&quot; : &quot;TPP&quot;,
        &quot;transactionDescription&quot; : &quot;Test transaction request&quot;,
        &quot;transactionSourceAccount&quot; : {
          &quot;accountId&quot; : &quot;sourceAccountIdCase200&quot;,
          &quot;bankAccountHolderName&quot; : &quot;John Doe&quot;,
          &quot;bankName&quot; : &quot;Amazon Seller Wallet&quot;,
          &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
          &quot;bankAccountNumberTail&quot; : &quot;123&quot;,
          &quot;bankAccountCurrency&quot; : &quot;GBP&quot;
        },
        &quot;transactionDestinationAccount&quot; : {
          &quot;bankAccountHolderName&quot; : &quot;Dane Shipping&quot;,
          &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
          &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
          &quot;bankAccountNumberTail&quot; : &quot;819&quot;,
          &quot;bankAccountCurrency&quot; : &quot;GBP&quot;,
          &quot;bankAccountCountryCode&quot; : &quot;EU&quot;
        },
        &quot;transactionRequestAmount&quot; : {
          &quot;currencyCode&quot; : &quot;EUR&quot;,
          &quot;currencyAmount&quot; : 500.0
        },
        &quot;transferRateDetails&quot; : {
          &quot;baseAmount&quot; : {
            &quot;currencyCode&quot; : &quot;EUR&quot;,
            &quot;currencyAmount&quot; : 500.0
          },
          &quot;fxRateDetails&quot; : {
            &quot;fxRateId&quot; : &quot;UNIQUE_FX_RATE_ID_1&quot;,
            &quot;baseRate&quot; : 7.6915,
            &quot;effectiveFxRate&quot; : 7.6084,
            &quot;rateDirection&quot; : &quot;BUY&quot;
          },
          &quot;transferAmount&quot; : {
            &quot;currencyCode&quot; : &quot;CNY&quot;,
            &quot;currencyAmount&quot; : 3804.2
          },
          &quot;fees&quot; : [ {
            &quot;feeId&quot; : &quot;Unique_FeeId_001&quot;,
            &quot;feeType&quot; : &quot;TRANSACTION_FEE&quot;,
            &quot;feeRateValue&quot; : 0.9,
            &quot;feeAmount&quot; : {
              &quot;currencyCode&quot; : &quot;EUR&quot;,
              &quot;currencyAmount&quot; : 4.5
            }
          }, {
            &quot;feeId&quot; : &quot;Unique_FeeId_002&quot;,
            &quot;feeType&quot; : &quot;TAX&quot;,
            &quot;feeRateValue&quot; : 20.0,
            &quot;feeAmount&quot; : {
              &quot;currencyCode&quot; : &quot;EUR&quot;,
              &quot;currencyAmount&quot; : 0.9
            }
          } ]
        },
        &quot;transactionFinalAmount&quot; : {
          &quot;currencyCode&quot; : &quot;CNY&quot;,
          &quot;currencyAmount&quot; : 3804.2
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_400
     */
    public function testGetTransaction400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction400', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase400&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid or Missing wacCertificate.&quot;,
          &quot;details&quot; : &quot;WAC certificate is missing for the request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_403
     */
    public function testGetTransaction403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction403', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase403&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;UnauthorizedRequest&quot;,
          &quot;message&quot; : &quot;Invalid WAC certificate.&quot;,
          &quot;details&quot; : &quot;NCA Status for the certificate is invalid&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_404
     */
    public function testGetTransaction404()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction404', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The resource specified does not exist.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase404&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;NotFound&quot;,
          &quot;message&quot; : &quot;BankAccount not found.&quot;,
          &quot;details&quot; : &quot;BankAccount doesn&#39;t exists for InvalidAccountId&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(404, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 404, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 404);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_408
     */
    public function testGetTransaction408()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction408', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request Timed Out.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase408&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestTimedOut&quot;,
          &quot;message&quot; : &quot;Request Timed Out&quot;,
          &quot;details&quot; : &quot;Server did not respond in time&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(408, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 408, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 408);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_413
     */
    public function testGetTransaction413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransaction_415
     */
    public function testGetTransaction415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getTransaction_429
     */
    public function testGetTransaction429()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction429', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The frequency of requests was greater than allowed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase429&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestThrottled&quot;,
          &quot;message&quot; : &quot;Request Throttled&quot;,
          &quot;details&quot; : &quot;Server throttled the request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(429, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 429, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 429);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_500
     */
    public function testGetTransaction500()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction500', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;An unexpected condition occurred that prevented the server from fulfilling the request.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase500&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InternalServerError&quot;,
          &quot;message&quot; : &quot;Internal Server Error&quot;,
          &quot;details&quot; : &quot;Internal Server Error Occurred&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(500, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 500, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 500);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getTransaction_503
     */
    public function testGetTransaction503()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetTransaction503', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Temporary overloading or maintenance of the server.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;transactionId&quot; : {
            &quot;value&quot; : &quot;transactionIdCase503&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;ServiceUnavailable&quot;,
          &quot;message&quot; : &quot;Server Unavailable&quot;,
          &quot;details&quot; : &quot;Server is not accepting request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getTransaction'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getTransactionWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(503, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 503, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 503);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_200
     */
    public function testListAccountTransactions200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions200', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/TransactionListing&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase200&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;nextPageToken&quot; : &quot;3493805734095308457308475&quot;,
        &quot;transactions&quot; : [ {
          &quot;transactionId&quot; : &quot;amzn.transaction.AKJBNEFNL23R84V&quot;,
          &quot;transactionType&quot; : &quot;DEBIT&quot;,
          &quot;transactionStatus&quot; : &quot;PAYEE_UNDER_REVIEW&quot;,
          &quot;transactionRequestDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
          &quot;expectedCompletionDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
          &quot;transactionActualCompletionDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
          &quot;lastUpdateDate&quot; : &quot;2023-09-26T02:32:59.787Z&quot;,
          &quot;requesterName&quot; : &quot;TppOrgId&quot;,
          &quot;transactionRequesterSource&quot; : &quot;TPP&quot;,
          &quot;transactionDescription&quot; : &quot;Test transaction request&quot;,
          &quot;transactionSourceAccount&quot; : {
            &quot;accountId&quot; : &quot;sourceAccountIdCase200&quot;,
            &quot;bankAccountHolderName&quot; : &quot;John Doe&quot;,
            &quot;bankName&quot; : &quot;Amazon Seller Wallet&quot;,
            &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
            &quot;bankAccountNumberTail&quot; : &quot;123&quot;,
            &quot;bankAccountCurrency&quot; : &quot;GBP&quot;
          },
          &quot;transactionDestinationAccount&quot; : {
            &quot;bankAccountHolderName&quot; : &quot;Dane Shipping&quot;,
            &quot;bankName&quot; : &quot;Royal Bank of Scotland&quot;,
            &quot;bankAccountNumberFormat&quot; : &quot;IBAN&quot;,
            &quot;bankAccountNumberTail&quot; : &quot;819&quot;,
            &quot;bankAccountCurrency&quot; : &quot;GBP&quot;,
            &quot;bankAccountCountryCode&quot; : &quot;UK&quot;
          },
          &quot;transactionRequestAmount&quot; : {
            &quot;currencyCode&quot; : &quot;EUR&quot;,
            &quot;currencyAmount&quot; : 500.0
          },
          &quot;transferRateDetails&quot; : {
            &quot;baseAmount&quot; : {
              &quot;currencyCode&quot; : &quot;EUR&quot;,
              &quot;currencyAmount&quot; : 500.0
            },
            &quot;fxRateDetails&quot; : {
              &quot;fxRateId&quot; : &quot;UNIQUE_FX_RATE_ID_1&quot;,
              &quot;baseRate&quot; : 7.6915,
              &quot;effectiveFxRate&quot; : 7.6084,
              &quot;rateDirection&quot; : &quot;BUY&quot;
            },
            &quot;transferAmount&quot; : {
              &quot;currencyCode&quot; : &quot;CNY&quot;,
              &quot;currencyAmount&quot; : 3804.2
            },
            &quot;fees&quot; : [ {
              &quot;feeId&quot; : &quot;Unique_FeeId_001&quot;,
              &quot;feeType&quot; : &quot;TRANSACTION_FEE&quot;,
              &quot;feeRateValue&quot; : 0.9,
              &quot;feeAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 4.5
              }
            }, {
              &quot;feeId&quot; : &quot;Unique_FeeId_002&quot;,
              &quot;feeType&quot; : &quot;TAX&quot;,
              &quot;feeRateValue&quot; : 20.0,
              &quot;feeAmount&quot; : {
                &quot;currencyCode&quot; : &quot;EUR&quot;,
                &quot;currencyAmount&quot; : 0.9
              }
            } ]
          },
          &quot;transactionFinalAmount&quot; : {
            &quot;currencyCode&quot; : &quot;CNY&quot;,
            &quot;currencyAmount&quot; : 3804.2
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_400
     */
    public function testListAccountTransactions400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions400', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase400&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid or Missing wacCertificate.&quot;,
          &quot;details&quot; : &quot;WAC certificate is missing for the request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_403
     */
    public function testListAccountTransactions403()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions403', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase403&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;UnauthorizedRequest&quot;,
          &quot;message&quot; : &quot;Invalid WAC certificate.&quot;,
          &quot;details&quot; : &quot;NCA Status for the certificate is invalid&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(403, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 403, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 403);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_404
     */
    public function testListAccountTransactions404()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions404', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The resource specified does not exist.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase404&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;NotFound&quot;,
          &quot;message&quot; : &quot;BankAccount not found.&quot;,
          &quot;details&quot; : &quot;BankAccount doesn&#39;t exists for InvalidAccountId&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(404, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 404, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 404);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_408
     */
    public function testListAccountTransactions408()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions408', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request Timed Out.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase408&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestTimedOut&quot;,
          &quot;message&quot; : &quot;Request Timed Out&quot;,
          &quot;details&quot; : &quot;Server did not respond in time&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(408, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 408, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 408);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_413
     */
    public function testListAccountTransactions413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for listAccountTransactions_415
     */
    public function testListAccountTransactions415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for listAccountTransactions_429
     */
    public function testListAccountTransactions429()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions429', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;The frequency of requests was greater than allowed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase429&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;RequestThrottled&quot;,
          &quot;message&quot; : &quot;Request Throttled&quot;,
          &quot;details&quot; : &quot;Server throttled the request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(429, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 429, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 429);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_500
     */
    public function testListAccountTransactions500()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions500', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;An unexpected condition occurred that prevented the server from fulfilling the request.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase500&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InternalServerError&quot;,
          &quot;message&quot; : &quot;Internal Server Error&quot;,
          &quot;details&quot; : &quot;Internal Server Error Occurred&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(500, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 500, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 500);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for listAccountTransactions_503
     */
    public function testListAccountTransactions503()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testListAccountTransactions503', 'TransactionsApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Temporary overloading or maintenance of the server.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;accountId&quot; : {
            &quot;value&quot; : &quot;sourceAccountIdCase503&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;ServiceUnavailable&quot;,
          &quot;message&quot; : &quot;Server Unavailable&quot;,
          &quot;details&quot; : &quot;Server is not accepting request&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'listAccountTransactions'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('TransactionsApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->listAccountTransactionsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(503, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 503, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 503);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
}
