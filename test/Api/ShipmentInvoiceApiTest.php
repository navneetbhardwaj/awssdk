<?php
/**
 * ShipmentInvoiceApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\invoicing\v0\ShipmentInvoiceApi;
use SpApi\ObjectSerializer;

/**
 * ShipmentInvoiceApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ShipmentInvoiceApiTest extends BaseTestCase
{
    private ShipmentInvoiceApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('ShipmentInvoiceApi', $this->getName());
        $this->apiInstance = new ShipmentInvoiceApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for getInvoiceStatus_200
     */
    public function testGetInvoiceStatus200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInvoiceStatus200', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetInvoiceStatusResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;Shipments&quot; : {
            &quot;AmazonShipmentId&quot; : &quot;shipmentId1&quot;,
            &quot;InvoiceStatus&quot; : &quot;Accepted&quot;
          }
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getInvoiceStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInvoiceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInvoiceStatus_400
     */
    public function testGetInvoiceStatus400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetInvoiceStatus400', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetInvoiceStatusResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BadShipId&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid Shipment ID&quot;,
          &quot;details&quot; : &quot;&#39;BadShipId&#39; is an invalid ShipmentID&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getInvoiceStatus'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getInvoiceStatusWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getInvoiceStatus_401
     */
    public function testGetInvoiceStatus401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_403
     */
    public function testGetInvoiceStatus403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_404
     */
    public function testGetInvoiceStatus404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_415
     */
    public function testGetInvoiceStatus415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_429
     */
    public function testGetInvoiceStatus429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_500
     */
    public function testGetInvoiceStatus500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getInvoiceStatus_503
     */
    public function testGetInvoiceStatus503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_200
     */
    public function testGetShipmentDetails200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentDetails200', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;payload&quot; : {
          &quot;WarehouseId&quot; : &quot;wID1234&quot;,
          &quot;AmazonOrderId&quot; : &quot;222-333-4444333&quot;,
          &quot;AmazonShipmentId&quot; : &quot;F4385943758&quot;,
          &quot;PurchaseDate&quot; : &quot;2020-10-07T17:36:47.470Z&quot;,
          &quot;ShippingAddress&quot; : {
            &quot;Name&quot; : &quot;User Address1&quot;,
            &quot;AddressLine1&quot; : &quot;123 any st&quot;,
            &quot;City&quot; : &quot;Ann Arbor&quot;,
            &quot;County&quot; : &quot;Washtenaw&quot;,
            &quot;StateOrRegion&quot; : &quot;MI&quot;,
            &quot;PostalCode&quot; : &quot;48104&quot;,
            &quot;CountryCode&quot; : &quot;US&quot;,
            &quot;Phone&quot; : &quot;333-444-5555&quot;,
            &quot;AddressType&quot; : &quot;Residential&quot;
          },
          &quot;PaymentMethodDetails&quot; : [ &quot;GiftCertificate&quot; ],
          &quot;MarketplaceId&quot; : &quot;ATV943520DER&quot;,
          &quot;SellerId&quot; : &quot;TEST34509GOGM&quot;,
          &quot;BuyerName&quot; : &quot;1&quot;,
          &quot;BuyerCounty&quot; : &quot;Washtenaw&quot;,
          &quot;BuyerTaxInfo&quot; : {
            &quot;CompanyLegalName&quot; : &quot;Buyer Company&quot;,
            &quot;TaxingRegion&quot; : &quot;MI&quot;,
            &quot;TaxClassifications&quot; : [ {
              &quot;Name&quot; : &quot;Millage&quot;,
              &quot;Value&quot; : &quot;10&quot;
            } ]
          },
          &quot;MarketplaceTaxInfo&quot; : {
            &quot;CompanyLegalName&quot; : &quot;Seller Legal Company Name&quot;,
            &quot;TaxingRegion&quot; : &quot;SP&quot;,
            &quot;TaxClassifications&quot; : [ {
              &quot;Name&quot; : &quot;CNPJ&quot;,
              &quot;Value&quot; : &quot;15436940000103&quot;
            } ]
          },
          &quot;SellerDisplayName&quot; : &quot;Seller Display Name in the marketplace&quot;,
          &quot;ShipmentItems&quot; : [ {
            &quot;ASIN&quot; : &quot;BKUO9348543&quot;,
            &quot;SellerSKU&quot; : &quot;BKUO9348543SKU&quot;,
            &quot;OrderItemId&quot; : &quot;23423424&quot;,
            &quot;Title&quot; : &quot;Pencil&quot;,
            &quot;QuantityOrdered&quot; : 1,
            &quot;ItemPrice&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : &quot;100&quot;
            },
            &quot;ShippingPrice&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : &quot;20&quot;
            },
            &quot;GiftWrapPrice&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : &quot;1&quot;
            },
            &quot;ShippingDiscount&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : &quot;10&quot;
            },
            &quot;PromotionDiscount&quot; : {
              &quot;CurrencyCode&quot; : &quot;USD&quot;,
              &quot;Amount&quot; : &quot;10&quot;
            },
            &quot;SerialNumbers&quot; : [ &quot;23424&quot;, &quot;23423&quot; ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentDetails_400
     */
    public function testGetShipmentDetails400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetShipmentDetails400', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/GetShipmentDetailsResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BadShipId&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid Shipment ID&quot;,
          &quot;details&quot; : &quot;&#39;BadShipId&#39; is an invalid ShipmentID&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getShipmentDetails'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getShipmentDetailsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getShipmentDetails_401
     */
    public function testGetShipmentDetails401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_403
     */
    public function testGetShipmentDetails403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_404
     */
    public function testGetShipmentDetails404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_415
     */
    public function testGetShipmentDetails415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_429
     */
    public function testGetShipmentDetails429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_500
     */
    public function testGetShipmentDetails500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getShipmentDetails_503
     */
    public function testGetShipmentDetails503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_200
     */
    public function testSubmitInvoice200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice200', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/SubmitInvoiceResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;shipmentId1&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;InvoiceContent&quot; : &quot;SGF2ZSB0byBkZWFsIHdpdGggQmFzZTY0IGZvcm1hdD8&#x3D;&quot;,
              &quot;ContentMD5Value&quot; : &quot;9906bd8f227f6a43f1e27db4b9258ad4&quot;
            }
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'submitInvoice'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_400
     */
    public function testSubmitInvoice400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testSubmitInvoice400', 'ShipmentInvoiceApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/SubmitInvoiceResponse&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;shipmentId&quot; : {
            &quot;value&quot; : &quot;BadIDForShipment&quot;
          },
          &quot;body&quot; : {
            &quot;value&quot; : {
              &quot;InvoiceContent&quot; : &quot;NonBase64EncodedValue&quot;,
              &quot;ContentMD5Value&quot; : &quot;8f6df519a2125946820bc34a561164c2&quot;
            }
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Shipment ID is invalid&quot;,
          &quot;details&quot; : &quot;InvoiceContent fails encoding. Shipment &#39;BadIDForShipment&#39; does not exist&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'submitInvoice'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('ShipmentInvoiceApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->submitInvoiceWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for submitInvoice_401
     */
    public function testSubmitInvoice401()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_403
     */
    public function testSubmitInvoice403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_404
     */
    public function testSubmitInvoice404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_415
     */
    public function testSubmitInvoice415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_429
     */
    public function testSubmitInvoice429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_500
     */
    public function testSubmitInvoice500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for submitInvoice_503
     */
    public function testSubmitInvoice503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
